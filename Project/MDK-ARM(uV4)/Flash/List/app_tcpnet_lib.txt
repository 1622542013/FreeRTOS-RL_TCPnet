; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\app_tcpnet_lib.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\app_tcpnet_lib.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp\inc -I..\..\User\bsp -I..\..\User -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM4F -I..\..\RL-ARM\Config -I..\..\RL-ARM\Driver -I..\..\RL-ARM\RL-RTX\inc -IC:\Keil4.74\ARM\RV31\INC -IC:\Keil4.74\ARM\CMSIS\Include -IC:\Keil4.74\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -D__RTX --omf_browse=.\flash\obj\app_tcpnet_lib.crf ..\..\User\libapp\app_tcpnet_lib.c]
                          THUMB

                          AREA ||i.TCPnetTest||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  TCPnetTest PROC
;;;80     */
;;;81     void TCPnetTest(void)
000000  b08e              SUB      sp,sp,#0x38
;;;82     {  
;;;83     	char dbuf[10];
;;;84     	int len;
;;;85     	int sock, sd, res;
;;;86     	SOCKADDR_IN addr;
;;;87     	SOCKADDR_IN ReAddr;
;;;88     
;;;89     	
;;;90     	while (1) 
000002  e0c1              B        |L1.392|
                  |L1.4|
;;;91     	{
;;;92     		/* 创建一个socket 
;;;93     		   第1个参数AF_INET：当前仅支持这个类型的地址族。
;;;94     		   第2个参数SOCK_STREAM：表示数据流通信类型，即使用的TCP。
;;;95     		   第3个参数0 ：配置为0的话，自动跟第2个参数进行协议匹配，这里就是TCP协议。
;;;96     		*/
;;;97     		sock = socket (AF_INET, SOCK_STREAM, 0);
000004  2200              MOVS     r2,#0
000006  2101              MOVS     r1,#1
000008  4608              MOV      r0,r1
00000a  f7fffffe          BL       socket
00000e  4607              MOV      r7,r0
;;;98     
;;;99     		/* 端口号设置为1001 */
;;;100    		addr.sin_port        = htons(LocalPort_NUM);
000010  f24030e9          MOV      r0,#0x3e9
000014  ba00              REV      r0,r0
000016  0c00              LSRS     r0,r0,#16
000018  f8ad001a          STRH     r0,[sp,#0x1a]
;;;101    		
;;;102    		/* 与函数socket中的AF_INET作用一样 */
;;;103    		addr.sin_family      = PF_INET;
00001c  2001              MOVS     r0,#1
00001e  f8ad0018          STRH     r0,[sp,#0x18]
;;;104    		/* 
;;;105    		   INADDR_ANY就是指定地址为0.0.0.0的地址，这个地址事实上表示不确定地址，或所有地址，
;;;106    		   任意地址。用在这里的话就表示监控端口号为ddr.sin_port的所有IP地址消息。一般主要用
;;;107    		   于有多个网卡或者IP地址的情况。开发板只用了DM9161的网口，就是监听这个网口的IP地址。
;;;108    		*/
;;;109    		addr.sin_addr.s_addr = INADDR_ANY;
000022  2000              MOVS     r0,#0
000024  9007              STR      r0,[sp,#0x1c]
;;;110    		
;;;111    		/* 给socket绑定IP和端口号 */
;;;112    		bind (sock, (SOCKADDR *)&addr, sizeof(addr));
000026  2210              MOVS     r2,#0x10
000028  a906              ADD      r1,sp,#0x18
00002a  4638              MOV      r0,r7
00002c  f7fffffe          BL       bind
;;;113    
;;;114    		/* 设置监听，最大监听1个连接 */
;;;115    		listen (sock, 1);
000030  2101              MOVS     r1,#1
000032  4638              MOV      r0,r7
000034  f7fffffe          BL       listen
;;;116    		
;;;117    		/* 
;;;118    		   等待soket连接请求，有的话，自动创建1个新的socket进行连接通信，没有的话，等待连接。
;;;119    		   注意，能够accept的个数受到listen函数的限制，而listen函数又受到Net_Config.c中宏定义
;;;120    		   BSD_NUMSOCKS 的限制。
;;;121    		*/
;;;122    		len = sizeof(ReAddr);
000038  2010              MOVS     r0,#0x10
00003a  900a              STR      r0,[sp,#0x28]
;;;123    		sd = accept (sock, (SOCKADDR *)&ReAddr, &len);
00003c  aa0a              ADD      r2,sp,#0x28
00003e  a902              ADD      r1,sp,#8
000040  4638              MOV      r0,r7
000042  f7fffffe          BL       accept
000046  4605              MOV      r5,r0
;;;124    		printf_debug ("远程客户端请求连接IP: %d.%d.%d.%d\n", ReAddr.sin_addr.s_b1,
000048  f89d000f          LDRB     r0,[sp,#0xf]
00004c  9000              STR      r0,[sp,#0]
00004e  f89d300e          LDRB     r3,[sp,#0xe]
000052  f89d200d          LDRB     r2,[sp,#0xd]
000056  f89d100c          LDRB     r1,[sp,#0xc]
00005a  a04c              ADR      r0,|L1.396|
00005c  f7fffffe          BL       __2printf
;;;125                                                                 ReAddr.sin_addr.s_b2,
;;;126    															 ReAddr.sin_addr.s_b3,
;;;127                                                                 ReAddr.sin_addr.s_b4);
;;;128    		printf_debug ("远程客户端端口号: %d\n", ntohs(ReAddr.sin_port));
000060  f8bd000a          LDRH     r0,[sp,#0xa]
000064  ba00              REV      r0,r0
000066  0c01              LSRS     r1,r0,#16
000068  a051              ADR      r0,|L1.432|
00006a  f7fffffe          BL       __2printf
;;;129    		
;;;130    		/* 关闭监听socket，这个监听socket是调用函数socket后自动创建的 */
;;;131    		closesocket (sock);
00006e  4638              MOV      r0,r7
000070  f7fffffe          BL       closesocket
;;;132    		sock = sd;
000074  462f              MOV      r7,r5
;;;133    
;;;134    		
;;;135    		while (1) 
000076  e082              B        |L1.382|
                  |L1.120|
;;;136    		{
;;;137    			/*
;;;138    			  socket数据接收函数，如果recv工作在阻塞模式，使用这个函数注意以下事项：
;;;139    			  1. 此函数的溢出时间受到Net_Config.c中宏定义 BSD_RCVTOUT 的限制。溢出时间到会自动退出。
;;;140    			  2. 这个函数接收到一次数据包就会返回，大于或者小于设置的缓冲区大小都没有关系，如果数据量
;;;141    			     大于接收缓冲区大小，用户只需多次调用函数recv进行接收即可。
;;;142    			  3. 实际接收到数据大小通过判断此函数的返回值即可。
;;;143    			*/
;;;144    			res = recv (sock, dbuf, sizeof(dbuf), 0);
000078  2300              MOVS     r3,#0
00007a  220a              MOVS     r2,#0xa
00007c  a90b              ADD      r1,sp,#0x2c
00007e  4638              MOV      r0,r7
000080  f7fffffe          BL       recv
000084  4604              MOV      r4,r0
;;;145    			if (res <= 0) 
000086  2c00              CMP      r4,#0
000088  dc0b              BGT      |L1.162|
;;;146    			{
;;;147    				printf_debug("退出接收函数，重新开始监听%s\r\n", ReVal_Table[abs(res)]);
00008a  1e26              SUBS     r6,r4,#0
00008c  db01              BLT      |L1.146|
00008e  4630              MOV      r0,r6
000090  e000              B        |L1.148|
                  |L1.146|
000092  4270              RSBS     r0,r6,#0
                  |L1.148|
000094  4a4c              LDR      r2,|L1.456|
000096  f8521020          LDR      r1,[r2,r0,LSL #2]
00009a  a04c              ADR      r0,|L1.460|
00009c  f7fffffe          BL       __2printf
;;;148    				break;
0000a0  e06e              B        |L1.384|
                  |L1.162|
;;;149    			}
;;;150    			else
;;;151    			{
;;;152    				printf_debug("Receive Data Length = %d\r\n", res);
0000a2  4621              MOV      r1,r4
0000a4  a051              ADR      r0,|L1.492|
0000a6  f7fffffe          BL       __2printf
;;;153    				switch(dbuf[0])
0000aa  f89d002c          LDRB     r0,[sp,#0x2c]
0000ae  2831              CMP      r0,#0x31
0000b0  d002              BEQ      |L1.184|
0000b2  2832              CMP      r0,#0x32
0000b4  d161              BNE      |L1.378|
0000b6  e024              B        |L1.258|
                  |L1.184|
;;;154    				{
;;;155    					/* 字符命令 1 */
;;;156    					case '1':
;;;157    						sendbuf[0] = '1';
0000b8  2031              MOVS     r0,#0x31
0000ba  4953              LDR      r1,|L1.520|
0000bc  7008              STRB     r0,[r1,#0]
;;;158    						sendbuf[1] = '2';
0000be  2032              MOVS     r0,#0x32
0000c0  7048              STRB     r0,[r1,#1]
;;;159    						sendbuf[2] = '3';
0000c2  2033              MOVS     r0,#0x33
0000c4  7088              STRB     r0,[r1,#2]
;;;160    						sendbuf[3] = '4';
0000c6  2034              MOVS     r0,#0x34
0000c8  70c8              STRB     r0,[r1,#3]
;;;161    						sendbuf[4] = '5';
0000ca  2035              MOVS     r0,#0x35
0000cc  7108              STRB     r0,[r1,#4]
;;;162    						sendbuf[5] = '6';
0000ce  2036              MOVS     r0,#0x36
0000d0  7148              STRB     r0,[r1,#5]
;;;163    						sendbuf[6] = '7';
0000d2  2037              MOVS     r0,#0x37
0000d4  7188              STRB     r0,[r1,#6]
;;;164    						sendbuf[7] = '8';
0000d6  2038              MOVS     r0,#0x38
0000d8  71c8              STRB     r0,[r1,#7]
;;;165    						sendbuf[8] = '\r';
0000da  200d              MOVS     r0,#0xd
0000dc  7208              STRB     r0,[r1,#8]
;;;166    						sendbuf[9] = '\n';						
0000de  200a              MOVS     r0,#0xa
0000e0  7248              STRB     r0,[r1,#9]
;;;167    						res = send (sock, (char *)sendbuf, 10, 0);
0000e2  2300              MOVS     r3,#0
0000e4  220a              MOVS     r2,#0xa
0000e6  4638              MOV      r0,r7
0000e8  f7fffffe          BL       send
0000ec  4604              MOV      r4,r0
;;;168    						if (res < 0) 
0000ee  2c00              CMP      r4,#0
0000f0  da03              BGE      |L1.250|
;;;169    						{
;;;170    							printf_debug("函数send发送数据失败\r\n");
0000f2  a046              ADR      r0,|L1.524|
0000f4  f7fffffe          BL       __2printf
0000f8  e002              B        |L1.256|
                  |L1.250|
;;;171    						}
;;;172    						else
;;;173    						{
;;;174    							printf_debug("函数send发送数据成功\r\n");							
0000fa  a04a              ADR      r0,|L1.548|
0000fc  f7fffffe          BL       __2printf
                  |L1.256|
;;;175    						}
;;;176    						break;
000100  e03c              B        |L1.380|
                  |L1.258|
;;;177    					
;;;178    					/* 字符命令 2 */
;;;179    					case '2':
;;;180    						/* 将数据缓冲区清成字符0，方便网络调试助手查看数据 */
;;;181    						len = sizeof(sendbuf);
000102  f44f6080          MOV      r0,#0x400
000106  900a              STR      r0,[sp,#0x28]
;;;182    						memset(sendbuf, 48, len);
000108  2230              MOVS     r2,#0x30
00010a  483f              LDR      r0,|L1.520|
00010c  990a              LDR      r1,[sp,#0x28]
00010e  f7fffffe          BL       __aeabi_memset
;;;183    					
;;;184    						/* 这里仅初始化了数据包的前4个字节和最后4个字节 */
;;;185    						sendbuf[0] = 'a';
000112  2061              MOVS     r0,#0x61
000114  493c              LDR      r1,|L1.520|
000116  7008              STRB     r0,[r1,#0]
;;;186    						sendbuf[1] = 'b';
000118  2062              MOVS     r0,#0x62
00011a  7048              STRB     r0,[r1,#1]
;;;187    						sendbuf[2] = 'c';
00011c  2063              MOVS     r0,#0x63
00011e  7088              STRB     r0,[r1,#2]
;;;188    						sendbuf[3] = 'd';
000120  2064              MOVS     r0,#0x64
000122  70c8              STRB     r0,[r1,#3]
;;;189    						sendbuf[len - 4] = 'e';
000124  2165              MOVS     r1,#0x65
000126  980a              LDR      r0,[sp,#0x28]
000128  1f00              SUBS     r0,r0,#4
00012a  4a37              LDR      r2,|L1.520|
00012c  5411              STRB     r1,[r2,r0]
;;;190    						sendbuf[len - 3] = 'f';
00012e  2166              MOVS     r1,#0x66
000130  980a              LDR      r0,[sp,#0x28]
000132  1ec0              SUBS     r0,r0,#3
000134  5411              STRB     r1,[r2,r0]
;;;191    						sendbuf[len - 2] = 'g';
000136  2167              MOVS     r1,#0x67
000138  980a              LDR      r0,[sp,#0x28]
00013a  1e80              SUBS     r0,r0,#2
00013c  5411              STRB     r1,[r2,r0]
;;;192    						sendbuf[len - 1] = 'h';					
00013e  2168              MOVS     r1,#0x68
000140  980a              LDR      r0,[sp,#0x28]
000142  1e40              SUBS     r0,r0,#1
000144  5411              STRB     r1,[r2,r0]
;;;193    						res = send (sock, (char *)sendbuf, len, 0);
000146  2300              MOVS     r3,#0
000148  492f              LDR      r1,|L1.520|
00014a  4638              MOV      r0,r7
00014c  9a0a              LDR      r2,[sp,#0x28]
00014e  f7fffffe          BL       send
000152  4604              MOV      r4,r0
;;;194    						if (res < 0) 
000154  2c00              CMP      r4,#0
000156  da0b              BGE      |L1.368|
;;;195    						{
;;;196    							printf_debug("函数send发送数据失败%s\r\n", ReVal_Table[abs(res)]);
000158  1e26              SUBS     r6,r4,#0
00015a  db01              BLT      |L1.352|
00015c  4630              MOV      r0,r6
00015e  e000              B        |L1.354|
                  |L1.352|
000160  4270              RSBS     r0,r6,#0
                  |L1.354|
000162  4a19              LDR      r2,|L1.456|
000164  f8521020          LDR      r1,[r2,r0,LSL #2]
000168  a034              ADR      r0,|L1.572|
00016a  f7fffffe          BL       __2printf
00016e  e003              B        |L1.376|
                  |L1.368|
;;;197    						}
;;;198    						else
;;;199    						{
;;;200    							printf_debug("函数send成功发送数据 = %d字节\r\n", res);							
000170  4621              MOV      r1,r4
000172  a039              ADR      r0,|L1.600|
000174  f7fffffe          BL       __2printf
                  |L1.376|
;;;201    						}
;;;202    						break;
000178  e000              B        |L1.380|
                  |L1.378|
;;;203    				
;;;204    					/* 其它数值不做处理 */
;;;205    					default:                     
;;;206    						break;
00017a  bf00              NOP      
                  |L1.380|
00017c  bf00              NOP                            ;176
                  |L1.382|
00017e  e77b              B        |L1.120|
                  |L1.384|
000180  bf00              NOP                            ;148
;;;207    				}
;;;208    			}
;;;209    
;;;210    		}
;;;211    		
;;;212    		/* 
;;;213    		   溢出时间到，远程设备断开连接等，程序都会执行到这里，我们在这里关闭socket，
;;;214    		   程序返回到第一个大while循环的开头重新创建socket并监听。
;;;215    		*/
;;;216    		closesocket (sock);
000182  4638              MOV      r0,r7
000184  f7fffffe          BL       closesocket
                  |L1.392|
000188  e73c              B        |L1.4|
;;;217    	}
;;;218    }
;;;219    
                          ENDP

00018a  0000              DCW      0x0000
                  |L1.396|
00018c  d4b6b3cc          DCB      212,182,179,204,191,205,187,167,182,203,199,235,199,243,193
000190  bfcdbba7
000194  b6cbc7eb
000198  c7f3c1  
00019b  acbdd349          DCB      172,189,211,"IP: %d.%d.%d.%d\n",0
00019f  503a2025
0001a3  642e2564
0001a7  2e25642e
0001ab  25640a00
0001af  00                DCB      0
                  |L1.432|
0001b0  d4b6b3cc          DCB      212,182,179,204,191,205,187,167,182,203,182,203,191,218,186
0001b4  bfcdbba7
0001b8  b6cbb6cb
0001bc  bfdaba  
0001bf  c53a2025          DCB      197,": %d\n",0
0001c3  640a00  
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L1.456|
                          DCD      ReVal_Table
                  |L1.460|
0001cc  cdcbb3f6          DCB      205,203,179,246,189,211,202,213,186,175,202,253,163,172,214
0001d0  bdd3cad5
0001d4  baafcafd
0001d8  a3acd6  
0001db  d8d0c2bf          DCB      216,208,194,191,170,202,188,188,224,204,253,"%s\r\n",0
0001df  aacabcbc
0001e3  e0ccfd25
0001e7  730d0a00
0001eb  00                DCB      0
                  |L1.492|
0001ec  52656365          DCB      "Receive Data Length = %d\r\n",0
0001f0  69766520
0001f4  44617461
0001f8  204c656e
0001fc  67746820
000200  3d202564
000204  0d0a00  
000207  00                DCB      0
                  |L1.520|
                          DCD      sendbuf
                  |L1.524|
00020c  baafcafd          DCB      186,175,202,253,"send",183,162,203,205,202,253,190,221,202
000210  73656e64
000214  b7a2cbcd
000218  cafdbedd
00021c  ca      
00021d  a7b0dc0d          DCB      167,176,220,"\r\n",0
000221  0a00    
000223  00                DCB      0
                  |L1.548|
000224  baafcafd          DCB      186,175,202,253,"send",183,162,203,205,202,253,190,221,179
000228  73656e64
00022c  b7a2cbcd
000230  cafdbedd
000234  b3      
000235  c9b9a60d          DCB      201,185,166,"\r\n",0
000239  0a00    
00023b  00                DCB      0
                  |L1.572|
00023c  baafcafd          DCB      186,175,202,253,"send",183,162,203,205,202,253,190,221,202
000240  73656e64
000244  b7a2cbcd
000248  cafdbedd
00024c  ca      
00024d  a7b0dc25          DCB      167,176,220,"%s\r\n",0
000251  730d0a00
000255  00                DCB      0
000256  00                DCB      0
000257  00                DCB      0
                  |L1.600|
000258  baafcafd          DCB      186,175,202,253,"send",179,201,185,166,183,162,203,205,202
00025c  73656e64
000260  b3c9b9a6
000264  b7a2cbcd
000268  ca      
000269  fdbedd20          DCB      253,190,221," = %d",215,214,189,218,"\r\n",0
00026d  3d202564
000271  d7d6bdda
000275  0d0a00  

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  sendbuf
                          %        1024

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  20303a20          DCB      " 0: SCK_SUCCESS       Success                          "
000004  53434b5f
000008  53554343
00000c  45535320
000010  20202020
000014  20205375
000018  63636573
00001c  73202020
000020  20202020
000024  20202020
000028  20202020
00002c  20202020
000030  20202020
000034  202020  
000037  20202000          DCB      "   ",0
00003b  2d313a20          DCB      "-1: SCK_ERROR         General Error                    "
00003f  53434b5f
000043  4552524f
000047  52202020
00004b  20202020
00004f  20204765
000053  6e657261
000057  6c204572
00005b  726f7220
00005f  20202020
000063  20202020
000067  20202020
00006b  20202020
00006f  202020  
000072  20202000          DCB      "   ",0
000076  2d323a20          DCB      "-2: SCK_EINVALID      Invalid socket descriptor        "
00007a  53434b5f
00007e  45494e56
000082  414c4944
000086  20202020
00008a  2020496e
00008e  76616c69
000092  6420736f
000096  636b6574
00009a  20646573
00009e  63726970
0000a2  746f7220
0000a6  20202020
0000aa  202020  
0000ad  20202000          DCB      "   ",0
0000b1  2d333a20          DCB      "-3: SCK_EINVALIDPARA  Invalid parameter                "
0000b5  53434b5f
0000b9  45494e56
0000bd  414c4944
0000c1  50415241
0000c5  2020496e
0000c9  76616c69
0000cd  64207061
0000d1  72616d65
0000d5  74657220
0000d9  20202020
0000dd  20202020
0000e1  20202020
0000e5  202020  
0000e8  20202000          DCB      "   ",0
0000ec  2d343a20          DCB      "-4: SCK_EWOULDBLOCK   It would have blocked.           "
0000f0  53434b5f
0000f4  45574f55
0000f8  4c44424c
0000fc  4f434b20
000100  20204974
000104  20776f75
000108  6c642068
00010c  61766520
000110  626c6f63
000114  6b65642e
000118  20202020
00011c  20202020
000120  202020  
000123  20202000          DCB      "   ",0
000127  2d353a20          DCB      "-5: SCK_EMEMNOTAVAIL  Not enough memory in memory pool "
00012b  53434b5f
00012f  454d454d
000133  4e4f5441
000137  5641494c
00013b  20204e6f
00013f  7420656e
000143  6f756768
000147  206d656d
00014b  6f727920
00014f  696e206d
000153  656d6f72
000157  7920706f
00015b  6f6c20  
00015e  20202000          DCB      "   ",0
000162  2d363a20          DCB      "-6: SCK_ECLOSED       Connection is closed or aborted  "
000166  53434b5f
00016a  45434c4f
00016e  53454420
000172  20202020
000176  2020436f
00017a  6e6e6563
00017e  74696f6e
000182  20697320
000186  636c6f73
00018a  6564206f
00018e  72206162
000192  6f727465
000196  642020  
000199  20202000          DCB      "   ",0
00019d  2d373a20          DCB      "-7: SCK_ELOCKED       Socket is locked in RTX environme"
0001a1  53434b5f
0001a5  454c4f43
0001a9  4b454420
0001ad  20202020
0001b1  2020536f
0001b5  636b6574
0001b9  20697320
0001bd  6c6f636b
0001c1  65642069
0001c5  6e205254
0001c9  5820656e
0001cd  7669726f
0001d1  6e6d65  
0001d4  6e742000          DCB      "nt ",0
0001d8  2d383a20          DCB      "-8: SCK_ETIMEOUT      Socket, Host Resolver timeout    "
0001dc  53434b5f
0001e0  4554494d
0001e4  454f5554
0001e8  20202020
0001ec  2020536f
0001f0  636b6574
0001f4  2c20486f
0001f8  73742052
0001fc  65736f6c
000200  76657220
000204  74696d65
000208  6f757420
00020c  202020  
00020f  20202000          DCB      "   ",0
000213  2d393a20          DCB      "-9: SCK_EINPROGRESS   Host Name resolving in progress  "
000217  53434b5f
00021b  45494e50
00021f  524f4752
000223  45535320
000227  2020486f
00022b  7374204e
00022f  616d6520
000233  7265736f
000237  6c76696e
00023b  6720696e
00023f  2070726f
000243  67726573
000247  732020  
00024a  20202000          DCB      "   ",0
00024e  2d31303a          DCB      "-10: SCK_ENONAME      Host Name not existing           "
000252  2053434b
000256  5f454e4f
00025a  4e414d45
00025e  20202020
000262  2020486f
000266  7374204e
00026a  616d6520
00026e  6e6f7420
000272  65786973
000276  74696e67
00027a  20202020
00027e  20202020
000282  202020  
000285  20202000          DCB      "   ",0

                          AREA ||.data||, DATA, ALIGN=2

                  ReVal_Table
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x3b
                          DCD      ||.conststring||+0x76
                          DCD      ||.conststring||+0xb1
                          DCD      ||.conststring||+0xec
                          DCD      ||.conststring||+0x127
                          DCD      ||.conststring||+0x162
                          DCD      ||.conststring||+0x19d
                          DCD      ||.conststring||+0x1d8
                          DCD      ||.conststring||+0x213
                          DCD      ||.conststring||+0x24e

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\libapp\\app_tcpnet_lib.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_app_tcpnet_lib_c_21964908____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_app_tcpnet_lib_c_21964908____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_app_tcpnet_lib_c_21964908____REVSH|
#line 144
|__asm___16_app_tcpnet_lib_c_21964908____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_app_tcpnet_lib_c_21964908____RRX|
#line 300
|__asm___16_app_tcpnet_lib_c_21964908____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
