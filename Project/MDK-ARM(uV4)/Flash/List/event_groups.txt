; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\event_groups.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\event_groups.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp\inc -I..\..\User\bsp -I..\..\User -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM4F -I..\..\RL-ARM\Config -I..\..\RL-ARM\Driver -I..\..\RL-ARM\RL-RTX\inc -IC:\Keil4.74\ARM\RV31\INC -IC:\Keil4.74\ARM\CMSIS\Include -IC:\Keil4.74\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -D__RTX --omf_browse=.\flash\obj\event_groups.crf ..\..\FreeRTOS\event_groups.c]
                          THUMB

                          AREA ||i.prvTestWaitCondition||, CODE, READONLY, ALIGN=1

                  prvTestWaitCondition PROC
;;;612    
;;;613    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
000000  b510              PUSH     {r4,lr}
;;;614    {
000002  4603              MOV      r3,r0
;;;615    BaseType_t xWaitConditionMet = pdFALSE;
000004  2000              MOVS     r0,#0
;;;616    
;;;617    	if( xWaitForAllBits == pdFALSE )
000006  b91a              CBNZ     r2,|L1.16|
;;;618    	{
;;;619    		/* Task only has to wait for one bit within uxBitsToWaitFor to be
;;;620    		set.  Is one already set? */
;;;621    		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
000008  420b              TST      r3,r1
00000a  d006              BEQ      |L1.26|
;;;622    		{
;;;623    			xWaitConditionMet = pdTRUE;
00000c  2001              MOVS     r0,#1
00000e  e004              B        |L1.26|
                  |L1.16|
;;;624    		}
;;;625    		else
;;;626    		{
;;;627    			mtCOVERAGE_TEST_MARKER();
;;;628    		}
;;;629    	}
;;;630    	else
;;;631    	{
;;;632    		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
;;;633    		Are they set already? */
;;;634    		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
000010  ea030401          AND      r4,r3,r1
000014  428c              CMP      r4,r1
000016  d100              BNE      |L1.26|
;;;635    		{
;;;636    			xWaitConditionMet = pdTRUE;
000018  2001              MOVS     r0,#1
                  |L1.26|
;;;637    		}
;;;638    		else
;;;639    		{
;;;640    			mtCOVERAGE_TEST_MARKER();
;;;641    		}
;;;642    	}
;;;643    
;;;644    	return xWaitConditionMet;
;;;645    }
00001a  bd10              POP      {r4,pc}
;;;646    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.uxEventGroupGetNumber||, CODE, READONLY, ALIGN=1

                  uxEventGroupGetNumber PROC
;;;664    
;;;665    	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
000000  4601              MOV      r1,r0
;;;666    	{
;;;667    	UBaseType_t xReturn;
;;;668    	EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
000002  460a              MOV      r2,r1
;;;669    
;;;670    		if( xEventGroup == NULL )
000004  b909              CBNZ     r1,|L2.10|
;;;671    		{
;;;672    			xReturn = 0;
000006  2000              MOVS     r0,#0
000008  e000              B        |L2.12|
                  |L2.10|
;;;673    		}
;;;674    		else
;;;675    		{
;;;676    			xReturn = pxEventBits->uxEventGroupNumber;
00000a  6990              LDR      r0,[r2,#0x18]
                  |L2.12|
;;;677    		}
;;;678    
;;;679    		return xReturn;
;;;680    	}
00000c  4770              BX       lr
;;;681    
                          ENDP


                          AREA ||i.vEventGroupClearBitsCallback||, CODE, READONLY, ALIGN=1

                  vEventGroupClearBitsCallback PROC
;;;606    an interrupt. */
;;;607    void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
000000  b570              PUSH     {r4-r6,lr}
;;;608    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;609    	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       xEventGroupClearBits
;;;610    }
00000e  bd70              POP      {r4-r6,pc}
;;;611    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vEventGroupDelete||, CODE, READONLY, ALIGN=1

                  vEventGroupDelete PROC
;;;573    
;;;574    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
000000  b570              PUSH     {r4-r6,lr}
;;;575    {
000002  4605              MOV      r5,r0
;;;576    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
000004  462e              MOV      r6,r5
;;;577    const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
000006  1d34              ADDS     r4,r6,#4
;;;578    
;;;579    	vTaskSuspendAll();
000008  f7fffffe          BL       vTaskSuspendAll
;;;580    	{
;;;581    		traceEVENT_GROUP_DELETE( xEventGroup );
;;;582    
;;;583    		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
00000c  e018              B        |L4.64|
                  |L4.14|
;;;584    		{
;;;585    			/* Unblock the task, returning 0 as the event list is being deleted
;;;586    			and	cannot therefore have any bits set. */
;;;587    			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
00000e  f1040008          ADD      r0,r4,#8
000012  68e1              LDR      r1,[r4,#0xc]
000014  4281              CMP      r1,r0
000016  d001              BEQ      |L4.28|
000018  2001              MOVS     r0,#1
00001a  e000              B        |L4.30|
                  |L4.28|
00001c  2000              MOVS     r0,#0
                  |L4.30|
00001e  b950              CBNZ     r0,|L4.54|
000020  bf00              NOP      
000022  2010              MOVS     r0,#0x10
000024  f3808811          MSR      BASEPRI,r0
000028  f3bf8f4f          DSB      
00002c  f3bf8f6f          ISB      
000030  bf00              NOP      
000032  bf00              NOP      
                  |L4.52|
000034  e7fe              B        |L4.52|
                  |L4.54|
;;;588    			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
000036  f04f7100          MOV      r1,#0x2000000
00003a  68e0              LDR      r0,[r4,#0xc]
00003c  f7fffffe          BL       xTaskRemoveFromUnorderedEventList
                  |L4.64|
000040  6820              LDR      r0,[r4,#0]            ;583
000042  2800              CMP      r0,#0                 ;583
000044  d1e3              BNE      |L4.14|
;;;589    		}
;;;590    
;;;591    		vPortFree( pxEventBits );
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       vPortFree
;;;592    	}
;;;593    	( void ) xTaskResumeAll();
00004c  f7fffffe          BL       xTaskResumeAll
;;;594    }
000050  bd70              POP      {r4-r6,pc}
;;;595    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vEventGroupSetBitsCallback||, CODE, READONLY, ALIGN=1

                  vEventGroupSetBitsCallback PROC
;;;598    an interrupt. */
;;;599    void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
000000  b570              PUSH     {r4-r6,lr}
;;;600    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;601    	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       xEventGroupSetBits
;;;602    }
00000e  bd70              POP      {r4-r6,pc}
;;;603    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupClearBits||, CODE, READONLY, ALIGN=1

                  xEventGroupClearBits PROC
;;;421    
;;;422    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;423    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;424    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
000008  462c              MOV      r4,r5
;;;425    EventBits_t uxReturn;
;;;426    
;;;427    	/* Check the user is not attempting to clear the bits used by the kernel
;;;428    	itself. */
;;;429    	configASSERT( xEventGroup );
00000a  b955              CBNZ     r5,|L6.34|
00000c  bf00              NOP      
00000e  2010              MOVS     r0,#0x10
000010  f3808811          MSR      BASEPRI,r0
000014  f3bf8f4f          DSB      
000018  f3bf8f6f          ISB      
00001c  bf00              NOP      
00001e  bf00              NOP      
                  |L6.32|
000020  e7fe              B        |L6.32|
                  |L6.34|
;;;430    	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
000022  f0164f7f          TST      r6,#0xff000000
000026  d101              BNE      |L6.44|
000028  2001              MOVS     r0,#1
00002a  e000              B        |L6.46|
                  |L6.44|
00002c  2000              MOVS     r0,#0
                  |L6.46|
00002e  b950              CBNZ     r0,|L6.70|
000030  bf00              NOP      
000032  2010              MOVS     r0,#0x10
000034  f3808811          MSR      BASEPRI,r0
000038  f3bf8f4f          DSB      
00003c  f3bf8f6f          ISB      
000040  bf00              NOP      
000042  bf00              NOP      
                  |L6.68|
000044  e7fe              B        |L6.68|
                  |L6.70|
;;;431    
;;;432    	taskENTER_CRITICAL();
000046  f7fffffe          BL       vPortEnterCritical
;;;433    	{
;;;434    		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
;;;435    
;;;436    		/* The value returned is the event group value prior to the bits being
;;;437    		cleared. */
;;;438    		uxReturn = pxEventBits->uxEventBits;
00004a  6827              LDR      r7,[r4,#0]
;;;439    
;;;440    		/* Clear the bits. */
;;;441    		pxEventBits->uxEventBits &= ~uxBitsToClear;
00004c  6820              LDR      r0,[r4,#0]
00004e  43b0              BICS     r0,r0,r6
000050  6020              STR      r0,[r4,#0]
;;;442    	}
;;;443    	taskEXIT_CRITICAL();
000052  f7fffffe          BL       vPortExitCritical
;;;444    
;;;445    	return uxReturn;
000056  4638              MOV      r0,r7
;;;446    }
000058  e8bd81f0          POP      {r4-r8,pc}
;;;447    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupCreate||, CODE, READONLY, ALIGN=1

                  xEventGroupCreate PROC
;;;137    
;;;138    EventGroupHandle_t xEventGroupCreate( void )
000000  b510              PUSH     {r4,lr}
;;;139    {
;;;140    EventGroup_t *pxEventBits;
;;;141    
;;;142    	pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
000002  201c              MOVS     r0,#0x1c
000004  f7fffffe          BL       pvPortMalloc
000008  4604              MOV      r4,r0
;;;143    	if( pxEventBits != NULL )
00000a  b124              CBZ      r4,|L7.22|
;;;144    	{
;;;145    		pxEventBits->uxEventBits = 0;
00000c  2000              MOVS     r0,#0
00000e  6020              STR      r0,[r4,#0]
;;;146    		vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
000010  1d20              ADDS     r0,r4,#4
000012  f7fffffe          BL       vListInitialise
                  |L7.22|
;;;147    		traceEVENT_GROUP_CREATE( pxEventBits );
;;;148    	}
;;;149    	else
;;;150    	{
;;;151    		traceEVENT_GROUP_CREATE_FAILED();
;;;152    	}
;;;153    
;;;154    	return ( EventGroupHandle_t ) pxEventBits;
000016  4620              MOV      r0,r4
;;;155    }
000018  bd10              POP      {r4,pc}
;;;156    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupGetBitsFromISR||, CODE, READONLY, ALIGN=1

                  xEventGroupGetBitsFromISR PROC
;;;463    
;;;464    EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
000000  b570              PUSH     {r4-r6,lr}
;;;465    {
000002  4601              MOV      r1,r0
;;;466    UBaseType_t uxSavedInterruptStatus;
;;;467    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
000004  460b              MOV      r3,r1
;;;468    EventBits_t uxReturn;
;;;469    
;;;470    	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
000006  bf00              NOP      
000008  2510              MOVS     r5,#0x10
00000a  f3ef8011          MRS      r0,BASEPRI
00000e  f3858811          MSR      BASEPRI,r5
000012  f3bf8f4f          DSB      
000016  f3bf8f6f          ISB      
00001a  bf00              NOP      
00001c  4602              MOV      r2,r0
;;;471    	{
;;;472    		uxReturn = pxEventBits->uxEventBits;
00001e  681c              LDR      r4,[r3,#0]
;;;473    	}
;;;474    	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
000020  4610              MOV      r0,r2
000022  f3808811          MSR      BASEPRI,r0
000026  bf00              NOP      
;;;475    
;;;476    	return uxReturn;
000028  4620              MOV      r0,r4
;;;477    }
00002a  bd70              POP      {r4-r6,pc}
;;;478    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupSetBits||, CODE, READONLY, ALIGN=1

                  xEventGroupSetBits PROC
;;;479    
;;;480    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;481    {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
;;;482    ListItem_t *pxListItem, *pxNext;
;;;483    ListItem_t const *pxListEnd;
;;;484    List_t *pxList;
;;;485    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
000008  2000              MOVS     r0,#0
00000a  9001              STR      r0,[sp,#4]
;;;486    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
00000c  463c              MOV      r4,r7
;;;487    BaseType_t xMatchFound = pdFALSE;
00000e  9000              STR      r0,[sp,#0]
;;;488    
;;;489    	/* Check the user is not attempting to set the bits used by the kernel
;;;490    	itself. */
;;;491    	configASSERT( xEventGroup );
000010  b957              CBNZ     r7,|L9.40|
000012  bf00              NOP      
000014  2010              MOVS     r0,#0x10
000016  f3808811          MSR      BASEPRI,r0
00001a  f3bf8f4f          DSB      
00001e  f3bf8f6f          ISB      
000022  bf00              NOP      
000024  bf00              NOP      
                  |L9.38|
000026  e7fe              B        |L9.38|
                  |L9.40|
;;;492    	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
000028  f0184f7f          TST      r8,#0xff000000
00002c  d101              BNE      |L9.50|
00002e  2001              MOVS     r0,#1
000030  e000              B        |L9.52|
                  |L9.50|
000032  2000              MOVS     r0,#0
                  |L9.52|
000034  b950              CBNZ     r0,|L9.76|
000036  bf00              NOP      
000038  2010              MOVS     r0,#0x10
00003a  f3808811          MSR      BASEPRI,r0
00003e  f3bf8f4f          DSB      
000042  f3bf8f6f          ISB      
000046  bf00              NOP      
000048  bf00              NOP      
                  |L9.74|
00004a  e7fe              B        |L9.74|
                  |L9.76|
;;;493    
;;;494    	pxList = &( pxEventBits->xTasksWaitingForBits );
00004c  f1040904          ADD      r9,r4,#4
;;;495    	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
000050  f1090008          ADD      r0,r9,#8
000054  9002              STR      r0,[sp,#8]
;;;496    	vTaskSuspendAll();
000056  f7fffffe          BL       vTaskSuspendAll
;;;497    	{
;;;498    		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
;;;499    
;;;500    		pxListItem = listGET_HEAD_ENTRY( pxList );
00005a  f8d9600c          LDR      r6,[r9,#0xc]
;;;501    
;;;502    		/* Set the bits. */
;;;503    		pxEventBits->uxEventBits |= uxBitsToSet;
00005e  6820              LDR      r0,[r4,#0]
000060  ea400008          ORR      r0,r0,r8
000064  6020              STR      r0,[r4,#0]
;;;504    
;;;505    		/* See if the new bit value should unblock any tasks. */
;;;506    		while( pxListItem != pxListEnd )
000066  e026              B        |L9.182|
                  |L9.104|
;;;507    		{
;;;508    			pxNext = listGET_NEXT( pxListItem );
000068  f8d6b004          LDR      r11,[r6,#4]
;;;509    			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
00006c  6835              LDR      r5,[r6,#0]
;;;510    			xMatchFound = pdFALSE;
00006e  2000              MOVS     r0,#0
000070  9000              STR      r0,[sp,#0]
;;;511    
;;;512    			/* Split the bits waited for from the control bits. */
;;;513    			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
000072  f0054a7f          AND      r10,r5,#0xff000000
;;;514    			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
000076  f025457f          BIC      r5,r5,#0xff000000
;;;515    
;;;516    			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
00007a  f01a6f80          TST      r10,#0x4000000
00007e  d105              BNE      |L9.140|
;;;517    			{
;;;518    				/* Just looking for single bit being set. */
;;;519    				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
000080  6820              LDR      r0,[r4,#0]
000082  4228              TST      r0,r5
000084  d008              BEQ      |L9.152|
;;;520    				{
;;;521    					xMatchFound = pdTRUE;
000086  2001              MOVS     r0,#1
000088  9000              STR      r0,[sp,#0]
00008a  e005              B        |L9.152|
                  |L9.140|
;;;522    				}
;;;523    				else
;;;524    				{
;;;525    					mtCOVERAGE_TEST_MARKER();
;;;526    				}
;;;527    			}
;;;528    			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
00008c  6820              LDR      r0,[r4,#0]
00008e  4028              ANDS     r0,r0,r5
000090  42a8              CMP      r0,r5
000092  d101              BNE      |L9.152|
;;;529    			{
;;;530    				/* All bits are set. */
;;;531    				xMatchFound = pdTRUE;
000094  2001              MOVS     r0,#1
000096  9000              STR      r0,[sp,#0]
                  |L9.152|
;;;532    			}
;;;533    			else
;;;534    			{
;;;535    				/* Need all bits to be set, but not all the bits were set. */
;;;536    			}
;;;537    
;;;538    			if( xMatchFound != pdFALSE )
000098  9800              LDR      r0,[sp,#0]
00009a  b158              CBZ      r0,|L9.180|
;;;539    			{
;;;540    				/* The bits match.  Should the bits be cleared on exit? */
;;;541    				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
00009c  f01a7f80          TST      r10,#0x1000000
0000a0  d002              BEQ      |L9.168|
;;;542    				{
;;;543    					uxBitsToClear |= uxBitsWaitedFor;
0000a2  9801              LDR      r0,[sp,#4]
0000a4  4328              ORRS     r0,r0,r5
0000a6  9001              STR      r0,[sp,#4]
                  |L9.168|
;;;544    				}
;;;545    				else
;;;546    				{
;;;547    					mtCOVERAGE_TEST_MARKER();
;;;548    				}
;;;549    
;;;550    				/* Store the actual event flag value in the task's event list
;;;551    				item before removing the task from the event list.  The
;;;552    				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
;;;553    				that is was unblocked due to its required bits matching, rather
;;;554    				than because it timed out. */
;;;555    				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
0000a8  6820              LDR      r0,[r4,#0]
0000aa  f0407100          ORR      r1,r0,#0x2000000
0000ae  4630              MOV      r0,r6
0000b0  f7fffffe          BL       xTaskRemoveFromUnorderedEventList
                  |L9.180|
;;;556    			}
;;;557    
;;;558    			/* Move onto the next list item.  Note pxListItem->pxNext is not
;;;559    			used here as the list item may have been removed from the event list
;;;560    			and inserted into the ready/pending reading list. */
;;;561    			pxListItem = pxNext;
0000b4  465e              MOV      r6,r11
                  |L9.182|
0000b6  9802              LDR      r0,[sp,#8]            ;506
0000b8  4286              CMP      r6,r0                 ;506
0000ba  d1d5              BNE      |L9.104|
;;;562    		}
;;;563    
;;;564    		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
;;;565    		bit was set in the control word. */
;;;566    		pxEventBits->uxEventBits &= ~uxBitsToClear;
0000bc  6820              LDR      r0,[r4,#0]
0000be  9901              LDR      r1,[sp,#4]
0000c0  4388              BICS     r0,r0,r1
0000c2  6020              STR      r0,[r4,#0]
;;;567    	}
;;;568    	( void ) xTaskResumeAll();
0000c4  f7fffffe          BL       xTaskResumeAll
;;;569    
;;;570    	return pxEventBits->uxEventBits;
0000c8  6820              LDR      r0,[r4,#0]
;;;571    }
0000ca  e8bd8ffe          POP      {r1-r11,pc}
;;;572    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupSync||, CODE, READONLY, ALIGN=2

                  xEventGroupSync PROC
;;;157    
;;;158    EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;159    {
000004  4683              MOV      r11,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
00000a  461f              MOV      r7,r3
;;;160    EventBits_t uxOriginalBitValue, uxReturn;
;;;161    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
00000c  465d              MOV      r5,r11
;;;162    BaseType_t xAlreadyYielded;
;;;163    BaseType_t xTimeoutOccurred = pdFALSE;
00000e  2000              MOVS     r0,#0
000010  9000              STR      r0,[sp,#0]
;;;164    
;;;165    	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
000012  f0144f7f          TST      r4,#0xff000000
000016  d101              BNE      |L10.28|
000018  2001              MOVS     r0,#1
00001a  e000              B        |L10.30|
                  |L10.28|
00001c  2000              MOVS     r0,#0
                  |L10.30|
00001e  b950              CBNZ     r0,|L10.54|
000020  bf00              NOP      
000022  2010              MOVS     r0,#0x10
000024  f3808811          MSR      BASEPRI,r0
000028  f3bf8f4f          DSB      
00002c  f3bf8f6f          ISB      
000030  bf00              NOP      
000032  bf00              NOP      
                  |L10.52|
000034  e7fe              B        |L10.52|
                  |L10.54|
;;;166    	configASSERT( uxBitsToWaitFor != 0 );
000036  b10c              CBZ      r4,|L10.60|
000038  2001              MOVS     r0,#1
00003a  e000              B        |L10.62|
                  |L10.60|
00003c  2000              MOVS     r0,#0
                  |L10.62|
00003e  b950              CBNZ     r0,|L10.86|
000040  bf00              NOP      
000042  2010              MOVS     r0,#0x10
000044  f3808811          MSR      BASEPRI,r0
000048  f3bf8f4f          DSB      
00004c  f3bf8f6f          ISB      
000050  bf00              NOP      
000052  bf00              NOP      
                  |L10.84|
000054  e7fe              B        |L10.84|
                  |L10.86|
;;;167    	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;168    	{
;;;169    		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
;;;170    	}
;;;171    	#endif
;;;172    
;;;173    	vTaskSuspendAll();
000056  f7fffffe          BL       vTaskSuspendAll
;;;174    	{
;;;175    		uxOriginalBitValue = pxEventBits->uxEventBits;
00005a  f8d59000          LDR      r9,[r5,#0]
;;;176    
;;;177    		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
00005e  4641              MOV      r1,r8
000060  4658              MOV      r0,r11
000062  f7fffffe          BL       xEventGroupSetBits
;;;178    
;;;179    		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
000066  ea490008          ORR      r0,r9,r8
00006a  4020              ANDS     r0,r0,r4
00006c  42a0              CMP      r0,r4
00006e  d106              BNE      |L10.126|
;;;180    		{
;;;181    			/* All the rendezvous bits are now set - no need to block. */
;;;182    			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
000070  ea490608          ORR      r6,r9,r8
;;;183    
;;;184    			/* Rendezvous always clear the bits.  They will have been cleared
;;;185    			already unless this is the only task in the rendezvous. */
;;;186    			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
000074  6828              LDR      r0,[r5,#0]
000076  43a0              BICS     r0,r0,r4
000078  6028              STR      r0,[r5,#0]
;;;187    
;;;188    			xTicksToWait = 0;
00007a  2700              MOVS     r7,#0
00007c  e009              B        |L10.146|
                  |L10.126|
;;;189    		}
;;;190    		else
;;;191    		{
;;;192    			if( xTicksToWait != ( TickType_t ) 0 )
00007e  b13f              CBZ      r7,|L10.144|
;;;193    			{
;;;194    				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
;;;195    
;;;196    				/* Store the bits that the calling task is waiting for in the
;;;197    				task's event list item so the kernel knows when a match is
;;;198    				found.  Then enter the blocked state. */
;;;199    				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
000080  f04461a0          ORR      r1,r4,#0x5000000
000084  463a              MOV      r2,r7
000086  1d28              ADDS     r0,r5,#4
000088  f7fffffe          BL       vTaskPlaceOnUnorderedEventList
;;;200    
;;;201    				/* This assignment is obsolete as uxReturn will get set after
;;;202    				the task unblocks, but some compilers mistakenly generate a
;;;203    				warning about uxReturn being returned without being set if the
;;;204    				assignment is omitted. */
;;;205    				uxReturn = 0;
00008c  2600              MOVS     r6,#0
00008e  e000              B        |L10.146|
                  |L10.144|
;;;206    			}
;;;207    			else
;;;208    			{
;;;209    				/* The rendezvous bits were not set, but no block time was
;;;210    				specified - just return the current event bit value. */
;;;211    				uxReturn = pxEventBits->uxEventBits;
000090  682e              LDR      r6,[r5,#0]
                  |L10.146|
;;;212    			}
;;;213    		}
;;;214    	}
;;;215    	xAlreadyYielded = xTaskResumeAll();
000092  f7fffffe          BL       xTaskResumeAll
000096  4682              MOV      r10,r0
;;;216    
;;;217    	if( xTicksToWait != ( TickType_t ) 0 )
000098  b307              CBZ      r7,|L10.220|
;;;218    	{
;;;219    		if( xAlreadyYielded == pdFALSE )
00009a  f1ba0f00          CMP      r10,#0
00009e  d107              BNE      |L10.176|
;;;220    		{
;;;221    			portYIELD_WITHIN_API();
0000a0  f04f5080          MOV      r0,#0x10000000
0000a4  490f              LDR      r1,|L10.228|
0000a6  6008              STR      r0,[r1,#0]
0000a8  f3bf8f4f          DSB      
0000ac  f3bf8f6f          ISB      
                  |L10.176|
;;;222    		}
;;;223    		else
;;;224    		{
;;;225    			mtCOVERAGE_TEST_MARKER();
;;;226    		}
;;;227    
;;;228    		/* The task blocked to wait for its required bits to be set - at this
;;;229    		point either the required bits were set or the block time expired.  If
;;;230    		the required bits were set they will have been stored in the task's
;;;231    		event list item, and they should now be retrieved then cleared. */
;;;232    		uxReturn = uxTaskResetEventItemValue();
0000b0  f7fffffe          BL       uxTaskResetEventItemValue
0000b4  4606              MOV      r6,r0
;;;233    
;;;234    		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
0000b6  f0167f00          TST      r6,#0x2000000
0000ba  d10d              BNE      |L10.216|
;;;235    		{
;;;236    			/* The task timed out, just return the current event bit value. */
;;;237    			taskENTER_CRITICAL();
0000bc  f7fffffe          BL       vPortEnterCritical
;;;238    			{
;;;239    				uxReturn = pxEventBits->uxEventBits;
0000c0  682e              LDR      r6,[r5,#0]
;;;240    
;;;241    				/* Although the task got here because it timed out before the
;;;242    				bits it was waiting for were set, it is possible that since it
;;;243    				unblocked another task has set the bits.  If this is the case
;;;244    				then it needs to clear the bits before exiting. */
;;;245    				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
0000c2  ea060004          AND      r0,r6,r4
0000c6  42a0              CMP      r0,r4
0000c8  d102              BNE      |L10.208|
;;;246    				{
;;;247    					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
0000ca  6828              LDR      r0,[r5,#0]
0000cc  43a0              BICS     r0,r0,r4
0000ce  6028              STR      r0,[r5,#0]
                  |L10.208|
;;;248    				}
;;;249    				else
;;;250    				{
;;;251    					mtCOVERAGE_TEST_MARKER();
;;;252    				}
;;;253    			}
;;;254    			taskEXIT_CRITICAL();
0000d0  f7fffffe          BL       vPortExitCritical
;;;255    
;;;256    			xTimeoutOccurred = pdTRUE;
0000d4  2001              MOVS     r0,#1
0000d6  9000              STR      r0,[sp,#0]
                  |L10.216|
;;;257    		}
;;;258    		else
;;;259    		{
;;;260    			/* The task unblocked because the bits were set. */
;;;261    		}
;;;262    
;;;263    		/* Control bits might be set as the task had blocked should not be
;;;264    		returned. */
;;;265    		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
0000d8  f026467f          BIC      r6,r6,#0xff000000
                  |L10.220|
;;;266    	}
;;;267    
;;;268    	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
;;;269    
;;;270    	return uxReturn;
0000dc  4630              MOV      r0,r6
;;;271    }
0000de  e8bd8ff8          POP      {r3-r11,pc}
;;;272    /*-----------------------------------------------------------*/
                          ENDP

0000e2  0000              DCW      0x0000
                  |L10.228|
                          DCD      0xe000ed04

                          AREA ||i.xEventGroupWaitBits||, CODE, READONLY, ALIGN=2

                  xEventGroupWaitBits PROC
;;;273    
;;;274    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;275    {
000004  b083              SUB      sp,sp,#0xc
000006  4680              MOV      r8,r0
000008  460d              MOV      r5,r1
00000a  4617              MOV      r7,r2
00000c  f8dd9040          LDR      r9,[sp,#0x40]
;;;276    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
000010  4644              MOV      r4,r8
;;;277    EventBits_t uxReturn, uxControlBits = 0;
000012  f04f0a00          MOV      r10,#0
;;;278    BaseType_t xWaitConditionMet, xAlreadyYielded;
;;;279    BaseType_t xTimeoutOccurred = pdFALSE;
000016  2000              MOVS     r0,#0
000018  9001              STR      r0,[sp,#4]
;;;280    
;;;281    	/* Check the user is not attempting to wait on the bits used by the kernel
;;;282    	itself, and that at least one bit is being requested. */
;;;283    	configASSERT( xEventGroup );
00001a  f1b80f00          CMP      r8,#0
00001e  d10a              BNE      |L11.54|
000020  bf00              NOP      
000022  2010              MOVS     r0,#0x10
000024  f3808811          MSR      BASEPRI,r0
000028  f3bf8f4f          DSB      
00002c  f3bf8f6f          ISB      
000030  bf00              NOP      
000032  bf00              NOP      
                  |L11.52|
000034  e7fe              B        |L11.52|
                  |L11.54|
;;;284    	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
000036  f0154f7f          TST      r5,#0xff000000
00003a  d101              BNE      |L11.64|
00003c  2001              MOVS     r0,#1
00003e  e000              B        |L11.66|
                  |L11.64|
000040  2000              MOVS     r0,#0
                  |L11.66|
000042  b950              CBNZ     r0,|L11.90|
000044  bf00              NOP      
000046  2010              MOVS     r0,#0x10
000048  f3808811          MSR      BASEPRI,r0
00004c  f3bf8f4f          DSB      
000050  f3bf8f6f          ISB      
000054  bf00              NOP      
000056  bf00              NOP      
                  |L11.88|
000058  e7fe              B        |L11.88|
                  |L11.90|
;;;285    	configASSERT( uxBitsToWaitFor != 0 );
00005a  b10d              CBZ      r5,|L11.96|
00005c  2001              MOVS     r0,#1
00005e  e000              B        |L11.98|
                  |L11.96|
000060  2000              MOVS     r0,#0
                  |L11.98|
000062  b950              CBNZ     r0,|L11.122|
000064  bf00              NOP      
000066  2010              MOVS     r0,#0x10
000068  f3808811          MSR      BASEPRI,r0
00006c  f3bf8f4f          DSB      
000070  f3bf8f6f          ISB      
000074  bf00              NOP      
000076  bf00              NOP      
                  |L11.120|
000078  e7fe              B        |L11.120|
                  |L11.122|
;;;286    	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;287    	{
;;;288    		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
;;;289    	}
;;;290    	#endif
;;;291    
;;;292    	vTaskSuspendAll();
00007a  f7fffffe          BL       vTaskSuspendAll
;;;293    	{
;;;294    		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
00007e  6820              LDR      r0,[r4,#0]
000080  9000              STR      r0,[sp,#0]
;;;295    
;;;296    		/* Check to see if the wait condition is already met or not. */
;;;297    		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
000082  4629              MOV      r1,r5
000084  9a06              LDR      r2,[sp,#0x18]
000086  9800              LDR      r0,[sp,#0]
000088  f7fffffe          BL       prvTestWaitCondition
00008c  9002              STR      r0,[sp,#8]
;;;298    
;;;299    		if( xWaitConditionMet != pdFALSE )
00008e  9802              LDR      r0,[sp,#8]
000090  b138              CBZ      r0,|L11.162|
;;;300    		{
;;;301    			/* The wait condition has already been met so there is no need to
;;;302    			block. */
;;;303    			uxReturn = uxCurrentEventBits;
000092  9e00              LDR      r6,[sp,#0]
;;;304    			xTicksToWait = ( TickType_t ) 0;
000094  f04f0900          MOV      r9,#0
;;;305    
;;;306    			/* Clear the wait bits if requested to do so. */
;;;307    			if( xClearOnExit != pdFALSE )
000098  b1b7              CBZ      r7,|L11.200|
;;;308    			{
;;;309    				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
00009a  6820              LDR      r0,[r4,#0]
00009c  43a8              BICS     r0,r0,r5
00009e  6020              STR      r0,[r4,#0]
0000a0  e012              B        |L11.200|
                  |L11.162|
;;;310    			}
;;;311    			else
;;;312    			{
;;;313    				mtCOVERAGE_TEST_MARKER();
;;;314    			}
;;;315    		}
;;;316    		else if( xTicksToWait == ( TickType_t ) 0 )
0000a2  f1b90f00          CMP      r9,#0
0000a6  d101              BNE      |L11.172|
;;;317    		{
;;;318    			/* The wait condition has not been met, but no block time was
;;;319    			specified, so just return the current value. */
;;;320    			uxReturn = uxCurrentEventBits;
0000a8  9e00              LDR      r6,[sp,#0]
0000aa  e00d              B        |L11.200|
                  |L11.172|
;;;321    		}
;;;322    		else
;;;323    		{
;;;324    			/* The task is going to block to wait for its required bits to be
;;;325    			set.  uxControlBits are used to remember the specified behaviour of
;;;326    			this call to xEventGroupWaitBits() - for use when the event bits
;;;327    			unblock the task. */
;;;328    			if( xClearOnExit != pdFALSE )
0000ac  b10f              CBZ      r7,|L11.178|
;;;329    			{
;;;330    				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
0000ae  f04a7a80          ORR      r10,r10,#0x1000000
                  |L11.178|
;;;331    			}
;;;332    			else
;;;333    			{
;;;334    				mtCOVERAGE_TEST_MARKER();
;;;335    			}
;;;336    
;;;337    			if( xWaitForAllBits != pdFALSE )
0000b2  9806              LDR      r0,[sp,#0x18]
0000b4  b108              CBZ      r0,|L11.186|
;;;338    			{
;;;339    				uxControlBits |= eventWAIT_FOR_ALL_BITS;
0000b6  f04a6a80          ORR      r10,r10,#0x4000000
                  |L11.186|
;;;340    			}
;;;341    			else
;;;342    			{
;;;343    				mtCOVERAGE_TEST_MARKER();
;;;344    			}
;;;345    
;;;346    			/* Store the bits that the calling task is waiting for in the
;;;347    			task's event list item so the kernel knows when a match is
;;;348    			found.  Then enter the blocked state. */
;;;349    			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
0000ba  ea45010a          ORR      r1,r5,r10
0000be  464a              MOV      r2,r9
0000c0  1d20              ADDS     r0,r4,#4
0000c2  f7fffffe          BL       vTaskPlaceOnUnorderedEventList
;;;350    
;;;351    			/* This is obsolete as it will get set after the task unblocks, but
;;;352    			some compilers mistakenly generate a warning about the variable
;;;353    			being returned without being set if it is not done. */
;;;354    			uxReturn = 0;
0000c6  2600              MOVS     r6,#0
                  |L11.200|
;;;355    
;;;356    			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
;;;357    		}
;;;358    	}
;;;359    	xAlreadyYielded = xTaskResumeAll();
0000c8  f7fffffe          BL       xTaskResumeAll
0000cc  4683              MOV      r11,r0
;;;360    
;;;361    	if( xTicksToWait != ( TickType_t ) 0 )
0000ce  f1b90f00          CMP      r9,#0
0000d2  d023              BEQ      |L11.284|
;;;362    	{
;;;363    		if( xAlreadyYielded == pdFALSE )
0000d4  f1bb0f00          CMP      r11,#0
0000d8  d107              BNE      |L11.234|
;;;364    		{
;;;365    			portYIELD_WITHIN_API();
0000da  f04f5080          MOV      r0,#0x10000000
0000de  4911              LDR      r1,|L11.292|
0000e0  6008              STR      r0,[r1,#0]
0000e2  f3bf8f4f          DSB      
0000e6  f3bf8f6f          ISB      
                  |L11.234|
;;;366    		}
;;;367    		else
;;;368    		{
;;;369    			mtCOVERAGE_TEST_MARKER();
;;;370    		}
;;;371    
;;;372    		/* The task blocked to wait for its required bits to be set - at this
;;;373    		point either the required bits were set or the block time expired.  If
;;;374    		the required bits were set they will have been stored in the task's
;;;375    		event list item, and they should now be retrieved then cleared. */
;;;376    		uxReturn = uxTaskResetEventItemValue();
0000ea  f7fffffe          BL       uxTaskResetEventItemValue
0000ee  4606              MOV      r6,r0
;;;377    
;;;378    		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
0000f0  f0167f00          TST      r6,#0x2000000
0000f4  d110              BNE      |L11.280|
;;;379    		{
;;;380    			taskENTER_CRITICAL();
0000f6  f7fffffe          BL       vPortEnterCritical
;;;381    			{
;;;382    				/* The task timed out, just return the current event bit value. */
;;;383    				uxReturn = pxEventBits->uxEventBits;
0000fa  6826              LDR      r6,[r4,#0]
;;;384    
;;;385    				/* It is possible that the event bits were updated between this
;;;386    				task leaving the Blocked state and running again. */
;;;387    				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
0000fc  4629              MOV      r1,r5
0000fe  4630              MOV      r0,r6
000100  9a06              LDR      r2,[sp,#0x18]
000102  f7fffffe          BL       prvTestWaitCondition
000106  b118              CBZ      r0,|L11.272|
;;;388    				{
;;;389    					if( xClearOnExit != pdFALSE )
000108  b117              CBZ      r7,|L11.272|
;;;390    					{
;;;391    						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
00010a  6820              LDR      r0,[r4,#0]
00010c  43a8              BICS     r0,r0,r5
00010e  6020              STR      r0,[r4,#0]
                  |L11.272|
;;;392    					}
;;;393    					else
;;;394    					{
;;;395    						mtCOVERAGE_TEST_MARKER();
;;;396    					}
;;;397    				}
;;;398    				else
;;;399    				{
;;;400    					mtCOVERAGE_TEST_MARKER();
;;;401    				}
;;;402    			}
;;;403    			taskEXIT_CRITICAL();
000110  f7fffffe          BL       vPortExitCritical
;;;404    
;;;405    			/* Prevent compiler warnings when trace macros are not used. */
;;;406    			xTimeoutOccurred = pdFALSE;
000114  2000              MOVS     r0,#0
000116  9001              STR      r0,[sp,#4]
                  |L11.280|
;;;407    		}
;;;408    		else
;;;409    		{
;;;410    			/* The task unblocked because the bits were set. */
;;;411    		}
;;;412    
;;;413    		/* The task blocked so control bits may have been set. */
;;;414    		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
000118  f026467f          BIC      r6,r6,#0xff000000
                  |L11.284|
;;;415    	}
;;;416    	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
;;;417    
;;;418    	return uxReturn;
00011c  4630              MOV      r0,r6
;;;419    }
00011e  b007              ADD      sp,sp,#0x1c
000120  e8bd8ff0          POP      {r4-r11,pc}
;;;420    /*-----------------------------------------------------------*/
                          ENDP

                  |L11.292|
                          DCD      0xe000ed04
