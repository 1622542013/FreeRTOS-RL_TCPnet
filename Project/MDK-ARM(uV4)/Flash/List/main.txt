; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp\inc -I..\..\User\bsp -I..\..\User -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM4F -I..\..\RL-ARM\Config -I..\..\RL-ARM\Driver -I..\..\RL-ARM\RL-RTX\inc -IC:\Keil4.74\ARM\RV31\INC -IC:\Keil4.74\ARM\CMSIS\Include -IC:\Keil4.74\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -D__RTX --omf_browse=.\flash\obj\main.crf ..\..\User\main.c]
                          THUMB

                          AREA ||i.AppObjCreate||, CODE, READONLY, ALIGN=2

                  AppObjCreate PROC
;;;392    */
;;;393    static void AppObjCreate (void)
000000  b510              PUSH     {r4,lr}
;;;394    {
;;;395    	/* 创建互斥信号量 */
;;;396        xMutex = xSemaphoreCreateMutex();
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       xQueueCreateMutex
000008  4903              LDR      r1,|L1.24|
00000a  6008              STR      r0,[r1,#0]  ; xMutex
;;;397    	
;;;398    	if(xMutex == NULL)
;;;399        {
;;;400            /* 没有创建成功，用户可以在这里加入创建失败的处理机制 */
;;;401        }
;;;402    	
;;;403    	/* 创建事件标志组 */
;;;404    	xCreatedEventGroup = xEventGroupCreate();
00000c  f7fffffe          BL       xEventGroupCreate
000010  4902              LDR      r1,|L1.28|
000012  6008              STR      r0,[r1,#0]  ; xCreatedEventGroup
;;;405    	
;;;406    	if(xCreatedEventGroup == NULL)
;;;407        {
;;;408            /* 没有创建成功，用户可以在这里加入创建失败的处理机制 */
;;;409        }
;;;410    }
000014  bd10              POP      {r4,pc}
;;;411    
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
                          DCD      xMutex
                  |L1.28|
                          DCD      xCreatedEventGroup

                          AREA ||i.AppTaskCreate||, CODE, READONLY, ALIGN=2

                  AppTaskCreate PROC
;;;337    */
;;;338    static void AppTaskCreate (void)
000000  b51f              PUSH     {r0-r4,lr}
;;;339    {
;;;340        xTaskCreate( vTaskTaskUserIF,   	/* 任务函数  */
000002  2000              MOVS     r0,#0
000004  4a29              LDR      r2,|L2.172|
000006  2301              MOVS     r3,#1
000008  e9cd2001          STRD     r2,r0,[sp,#4]
00000c  9300              STR      r3,[sp,#0]
00000e  9003              STR      r0,[sp,#0xc]
000010  4603              MOV      r3,r0
000012  f44f7200          MOV      r2,#0x200
000016  a126              ADR      r1,|L2.176|
000018  4828              LDR      r0,|L2.188|
00001a  f7fffffe          BL       xTaskGenericCreate
;;;341                     "vTaskUserIF",     	/* 任务名    */
;;;342                     512,               	/* 任务栈大小，单位word，也就是4字节 */
;;;343                     NULL,              	/* 任务参数  */
;;;344                     1,                 	/* 任务优先级*/
;;;345                     &xHandleTaskUserIF );  /* 任务句柄  */
;;;346    	
;;;347    	
;;;348    	xTaskCreate( vTaskLED,    		/* 任务函数  */
00001e  2000              MOVS     r0,#0
000020  4a27              LDR      r2,|L2.192|
000022  2302              MOVS     r3,#2
000024  e9cd2001          STRD     r2,r0,[sp,#4]
000028  9300              STR      r3,[sp,#0]
00002a  9003              STR      r0,[sp,#0xc]
00002c  4603              MOV      r3,r0
00002e  f44f7200          MOV      r2,#0x200
000032  a124              ADR      r1,|L2.196|
000034  4826              LDR      r0,|L2.208|
000036  f7fffffe          BL       xTaskGenericCreate
;;;349                     "vTaskLED",  		/* 任务名    */
;;;350                     512,         		/* stack大小，单位word，也就是4字节 */
;;;351                     NULL,        		/* 任务参数  */
;;;352                     2,           		/* 任务优先级*/
;;;353                     &xHandleTaskLED ); /* 任务句柄  */
;;;354    	
;;;355    	xTaskCreate( vTaskMsgPro,     		/* 任务函数  */
00003a  2000              MOVS     r0,#0
00003c  4a25              LDR      r2,|L2.212|
00003e  2303              MOVS     r3,#3
000040  e9cd2001          STRD     r2,r0,[sp,#4]
000044  9300              STR      r3,[sp,#0]
000046  9003              STR      r0,[sp,#0xc]
000048  4603              MOV      r3,r0
00004a  f44f7200          MOV      r2,#0x200
00004e  a122              ADR      r1,|L2.216|
000050  4824              LDR      r0,|L2.228|
000052  f7fffffe          BL       xTaskGenericCreate
;;;356                     "vTaskMsgPro",   		/* 任务名    */
;;;357                     512,             		/* 任务栈大小，单位word，也就是4字节 */
;;;358                     NULL,           		/* 任务参数  */
;;;359                     3,               		/* 任务优先级*/
;;;360                     &xHandleTaskMsgPro );  /* 任务句柄  */
;;;361    
;;;362        xTaskCreate( vTaskSocket,     		/* 任务函数  */
000056  2000              MOVS     r0,#0
000058  4a23              LDR      r2,|L2.232|
00005a  2304              MOVS     r3,#4
00005c  e9cd2001          STRD     r2,r0,[sp,#4]
000060  9300              STR      r3,[sp,#0]
000062  9003              STR      r0,[sp,#0xc]
000064  4603              MOV      r3,r0
000066  f44f7200          MOV      r2,#0x200
00006a  a120              ADR      r1,|L2.236|
00006c  4822              LDR      r0,|L2.248|
00006e  f7fffffe          BL       xTaskGenericCreate
;;;363                     "vTaskSocket",   		/* 任务名    */
;;;364                     512,            		/* 任务栈大小，单位word，也就是4字节 */
;;;365                     NULL,           		/* 任务参数  */
;;;366                     4,              		/* 任务优先级*/
;;;367                     &xHandleTaskSocket );  /* 任务句柄  */
;;;368    				 
;;;369        xTaskCreate( vTaskTCPnet,     		/* 任务函数  */
000072  2000              MOVS     r0,#0
000074  4a21              LDR      r2,|L2.252|
000076  2305              MOVS     r3,#5
000078  e9cd2001          STRD     r2,r0,[sp,#4]
00007c  9300              STR      r3,[sp,#0]
00007e  9003              STR      r0,[sp,#0xc]
000080  4603              MOV      r3,r0
000082  f44f7200          MOV      r2,#0x200
000086  a11e              ADR      r1,|L2.256|
000088  4820              LDR      r0,|L2.268|
00008a  f7fffffe          BL       xTaskGenericCreate
;;;370                     "vTaskTCPnet",   		/* 任务名    */
;;;371                     512,            		/* 任务栈大小，单位word，也就是4字节 */
;;;372                     NULL,           		/* 任务参数  */
;;;373                     5,              		/* 任务优先级*/
;;;374                     &xHandleTaskTCPnet );  /* 任务句柄  */
;;;375    	
;;;376    	
;;;377    	xTaskCreate( vTaskStart,     		/* 任务函数  */
00008e  2000              MOVS     r0,#0
000090  4a1f              LDR      r2,|L2.272|
000092  2306              MOVS     r3,#6
000094  e9cd2001          STRD     r2,r0,[sp,#4]
000098  9300              STR      r3,[sp,#0]
00009a  9003              STR      r0,[sp,#0xc]
00009c  4603              MOV      r3,r0
00009e  f44f7200          MOV      r2,#0x200
0000a2  a11c              ADR      r1,|L2.276|
0000a4  481e              LDR      r0,|L2.288|
0000a6  f7fffffe          BL       xTaskGenericCreate
;;;378                     "vTaskStart",   		/* 任务名    */
;;;379                     512,            		/* 任务栈大小，单位word，也就是4字节 */
;;;380                     NULL,           		/* 任务参数  */
;;;381                     6,              		/* 任务优先级*/
;;;382                     &xHandleTaskStart );   /* 任务句柄  */
;;;383    }
0000aa  bd1f              POP      {r0-r4,pc}
;;;384    
                          ENDP

                  |L2.172|
                          DCD      xHandleTaskUserIF
                  |L2.176|
0000b0  76546173          DCB      "vTaskUserIF",0
0000b4  6b557365
0000b8  72494600
                  |L2.188|
                          DCD      vTaskTaskUserIF
                  |L2.192|
                          DCD      xHandleTaskLED
                  |L2.196|
0000c4  76546173          DCB      "vTaskLED",0
0000c8  6b4c4544
0000cc  00      
0000cd  00                DCB      0
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L2.208|
                          DCD      vTaskLED
                  |L2.212|
                          DCD      xHandleTaskMsgPro
                  |L2.216|
0000d8  76546173          DCB      "vTaskMsgPro",0
0000dc  6b4d7367
0000e0  50726f00
                  |L2.228|
                          DCD      vTaskMsgPro
                  |L2.232|
                          DCD      xHandleTaskSocket
                  |L2.236|
0000ec  76546173          DCB      "vTaskSocket",0
0000f0  6b536f63
0000f4  6b657400
                  |L2.248|
                          DCD      vTaskSocket
                  |L2.252|
                          DCD      xHandleTaskTCPnet
                  |L2.256|
000100  76546173          DCB      "vTaskTCPnet",0
000104  6b544350
000108  6e657400
                  |L2.268|
                          DCD      vTaskTCPnet
                  |L2.272|
                          DCD      xHandleTaskStart
                  |L2.276|
000114  76546173          DCB      "vTaskStart",0
000118  6b537461
00011c  727400  
00011f  00                DCB      0
                  |L2.288|
                          DCD      vTaskStart

                          AREA ||i.App_Printf||, CODE, READONLY, ALIGN=2

                  App_Printf PROC
;;;1      /* stdio.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.9 */
;;;425    void App_Printf(char* fmt,...)  
000000  b40f              PUSH     {r0-r3}
;;;426    {  
000002  b538              PUSH     {r3-r5,lr}
;;;427      static char buff[USART1_BufferSize_Tx];
;;;428      
;;;429        memset(buff,0,USART1_BufferSize_Tx);
000004  f44f6180          MOV      r1,#0x400
000008  480b              LDR      r0,|L3.56|
00000a  f7fffffe          BL       __aeabi_memclr
;;;430        va_list ap;
;;;431        va_start(ap,fmt);
00000e  a805              ADD      r0,sp,#0x14
000010  9000              STR      r0,[sp,#0]
;;;432        vsprintf((char*)buff,fmt,ap);
000012  4809              LDR      r0,|L3.56|
000014  9a00              LDR      r2,[sp,#0]
000016  9904              LDR      r1,[sp,#0x10]
000018  f7fffffe          BL       vsprintf
;;;433        va_end(ap);
00001c  2000              MOVS     r0,#0
00001e  9000              STR      r0,[sp,#0]
;;;434      
;;;435        USART_OUT(USART_1, (uint8_t*)buff, strlen(buff));
000020  4805              LDR      r0,|L3.56|
000022  f7fffffe          BL       strlen
000026  b284              UXTH     r4,r0
000028  4622              MOV      r2,r4
00002a  4903              LDR      r1,|L3.56|
00002c  2001              MOVS     r0,#1
00002e  f7fffffe          BL       USART_OUT
;;;436    }
000032  bc38              POP      {r3-r5}
000034  f85dfb14          LDR      pc,[sp],#0x14
;;;437    //#define u1_printf(format, ...);
                          ENDP

                  |L3.56|
                          DCD      buff

                          AREA ||i.USART_Init_Usr||, CODE, READONLY, ALIGN=2

                  USART_Init_Usr PROC
;;;204    #endif 	/* __USART_H */
;;;111    void USART_Init_Usr()
000000  b508              PUSH     {r3,lr}
;;;112    {
;;;113       USART_Configuration(USART_1, BAUD_RATE_230400, USART_Mode_Tx|USART_Mode_Rx, USART_IT_IDLE, USART_DMAReq_Tx|USART_DMAReq_Rx);
000002  20c0              MOVS     r0,#0xc0
000004  f2404324          MOV      r3,#0x424
000008  220c              MOVS     r2,#0xc
00000a  f44f3161          MOV      r1,#0x38400
00000e  9000              STR      r0,[sp,#0]
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       USART_Configuration
;;;114       USART_DMA_TX_Configuration(USART_1, (uint32_t)USART1_Buffer_Tx, USART1_BufferSize_Tx);
000016  f44f6280          MOV      r2,#0x400
00001a  4905              LDR      r1,|L4.48|
00001c  2001              MOVS     r0,#1
00001e  f7fffffe          BL       USART_DMA_TX_Configuration
;;;115       USART_DMA_RX_Configuration(USART_1, (uint32_t)USART1_Buffer_Rx, USART1_BufferSize_Rx);
000022  f44f6280          MOV      r2,#0x400
000026  4903              LDR      r1,|L4.52|
000028  2001              MOVS     r0,#1
00002a  f7fffffe          BL       USART_DMA_RX_Configuration
;;;116    }
00002e  bd08              POP      {r3,pc}
;;;117    int main(void)
                          ENDP

                  |L4.48|
                          DCD      USART1_Buffer_Tx
                  |L4.52|
                          DCD      USART1_Buffer_Rx

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;116    }
;;;117    int main(void)
000000  2001              MOVS     r0,#1
000002  f3808810          MSR      PRIMASK,r0
000006  bf00              NOP      
;;;118    {
;;;119    	/* 
;;;120    	  在启动调度前，为了防止初始化STM32外设时有中断服务程序执行，这里禁止全局中断(除了NMI和HardFault)。
;;;121    	  这样做的好处是：
;;;122    	  1. 防止执行的中断服务程序中有FreeRTOS的API函数。
;;;123    	  2. 保证系统正常启动，不受别的中断影响。
;;;124    	  3. 关于是否关闭全局中断，大家根据自己的实际情况设置即可。
;;;125    	  在移植文件port.c中的函数prvStartFirstTask中会重新开启全局中断。通过指令cpsie i开启，__set_PRIMASK(1)
;;;126    	  和cpsie i是等效的。
;;;127         */
;;;128    	__set_PRIMASK(1);  
;;;129    	
;;;130    	/* 硬件初始化 */
;;;131    	bsp_Init(); 
000008  f7fffffe          BL       bsp_Init
;;;132    	
;;;133    	USART_Init_Usr();
00000c  f7fffffe          BL       USART_Init_Usr
;;;134    	
;;;135    	/* 1. 初始化一个定时器中断，精度高于滴答定时器中断，这样才可以获得准确的系统信息 仅供调试目的，实际项
;;;136    		  目中不要使用，因为这个功能比较影响系统实时性。
;;;137    	   2. 为了正确获取FreeRTOS的调试信息，可以考虑将上面的关闭中断指令__set_PRIMASK(1); 注释掉。 
;;;138    	*/
;;;139    	vSetupSysInfoTest();
000010  f7fffffe          BL       vSetupSysInfoTest
;;;140    	
;;;141    	/* 创建任务 */
;;;142    	AppTaskCreate();
000014  f7fffffe          BL       AppTaskCreate
;;;143    
;;;144    	/* 创建任务通信机制 */
;;;145    	AppObjCreate();
000018  f7fffffe          BL       AppObjCreate
;;;146    	
;;;147        /* 启动调度，开始执行任务 */
;;;148        vTaskStartScheduler();
00001c  f7fffffe          BL       vTaskStartScheduler
;;;149    
;;;150    	/* 
;;;151    	  如果系统正常启动是不会运行到这里的，运行到这里极有可能是用于定时器任务或者空闲任务的
;;;152    	  heap空间不足造成创建失败，此要加大FreeRTOSConfig.h文件中定义的heap大小：
;;;153    	  #define configTOTAL_HEAP_SIZE	      ( ( size_t ) ( 17 * 1024 ) )
;;;154    	*/
;;;155    	while(1);
000020  bf00              NOP      
                  |L5.34|
000022  e7fe              B        |L5.34|
;;;156    }
;;;157    
                          ENDP


                          AREA ||i.vTaskLED||, CODE, READONLY, ALIGN=1

                  vTaskLED PROC
;;;227    */
;;;228    static void vTaskLED(void *pvParameters)
000000  b508              PUSH     {r3,lr}
;;;229    {
;;;230    	TickType_t xLastWakeTime;
;;;231    	const TickType_t xFrequency = 500;
000002  bf00              NOP      
;;;232    
;;;233    	/* 获取当前的系统时间 */
;;;234        xLastWakeTime = xTaskGetTickCount();
000004  f7fffffe          BL       xTaskGetTickCount
000008  9000              STR      r0,[sp,#0]
;;;235    	
;;;236        while(1)
00000a  e007              B        |L6.28|
                  |L6.12|
;;;237        {
;;;238    		bsp_LedToggle(2);
00000c  2002              MOVS     r0,#2
00000e  f7fffffe          BL       bsp_LedToggle
;;;239    		
;;;240    		/* vTaskDelayUntil是绝对延迟，vTaskDelay是相对延迟。*/
;;;241            vTaskDelayUntil(&xLastWakeTime, xFrequency);
000012  f44f71fa          MOV      r1,#0x1f4
000016  4668              MOV      r0,sp
000018  f7fffffe          BL       vTaskDelayUntil
                  |L6.28|
00001c  e7f6              B        |L6.12|
;;;242        }
;;;243    }
;;;244    
                          ENDP


                          AREA ||i.vTaskMsgPro||, CODE, READONLY, ALIGN=1

                  vTaskMsgPro PROC
;;;253    */
;;;254    static void vTaskMsgPro(void *pvParameters)
000000  e004              B        |L7.12|
                  |L7.2|
;;;255    {
;;;256        while(1)
;;;257        {
;;;258    		/* 按键扫描 */
;;;259    		bsp_KeyScan();
000002  f7fffffe          BL       bsp_KeyScan
;;;260    		vTaskDelay(10);
000006  200a              MOVS     r0,#0xa
000008  f7fffffe          BL       vTaskDelay
                  |L7.12|
00000c  e7f9              B        |L7.2|
;;;261        }
;;;262    }
;;;263    
                          ENDP


                          AREA ||i.vTaskSocket||, CODE, READONLY, ALIGN=1

                  vTaskSocket PROC
;;;272    */
;;;273    static void vTaskSocket(void *pvParameters)
000000  e001              B        |L8.6|
                  |L8.2|
;;;274    {
;;;275        while(1)
;;;276        {
;;;277    		TCPnetTest();
000002  f7fffffe          BL       TCPnetTest
                  |L8.6|
000006  e7fc              B        |L8.2|
;;;278        }
;;;279    }
;;;280    
                          ENDP


                          AREA ||i.vTaskStart||, CODE, READONLY, ALIGN=1

                  vTaskStart PROC
;;;308    */
;;;309    static void vTaskStart(void *pvParameters)
000000  b508              PUSH     {r3,lr}
;;;310    {
;;;311    	TickType_t xLastWakeTime;
;;;312    	const TickType_t xFrequency = 100;
000002  bf00              NOP      
;;;313    	
;;;314    	/* 初始化RL-TCPnet */
;;;315    	init_TcpNet ();
000004  f7fffffe          BL       init_TcpNet
;;;316    	
;;;317    	/* 获取当前的系统时间 */
;;;318        xLastWakeTime = xTaskGetTickCount();
000008  f7fffffe          BL       xTaskGetTickCount
00000c  9000              STR      r0,[sp,#0]
;;;319    	
;;;320        while(1)
00000e  e005              B        |L9.28|
                  |L9.16|
;;;321        {	
;;;322    		/* RL-TCPnet时间基准更新函数 */
;;;323    		timer_tick ();
000010  f7fffffe          BL       timer_tick
;;;324    		
;;;325    		/* vTaskDelayUntil是绝对延迟，vTaskDelay是相对延迟。*/
;;;326            vTaskDelayUntil(&xLastWakeTime, xFrequency);
000014  2164              MOVS     r1,#0x64
000016  4668              MOV      r0,sp
000018  f7fffffe          BL       vTaskDelayUntil
                  |L9.28|
00001c  e7f8              B        |L9.16|
;;;327        }
;;;328    }
;;;329    				
                          ENDP


                          AREA ||i.vTaskTCPnet||, CODE, READONLY, ALIGN=1

                  vTaskTCPnet PROC
;;;289    */
;;;290    static void vTaskTCPnet(void *pvParameters)
000000  e004              B        |L10.12|
                  |L10.2|
;;;291    {
;;;292        while(1)
;;;293        {
;;;294    		/* RL-TCPnet处理函数 */
;;;295    		main_TcpNet();
000002  f7fffffe          BL       main_TcpNet
;;;296    		vTaskDelay(2);
000006  2002              MOVS     r0,#2
000008  f7fffffe          BL       vTaskDelay
                  |L10.12|
00000c  e7f9              B        |L10.2|
;;;297        }
;;;298    }
;;;299    
                          ENDP


                          AREA ||i.vTaskTaskUserIF||, CODE, READONLY, ALIGN=2

                  vTaskTaskUserIF PROC
;;;166    */
;;;167    static void vTaskTaskUserIF(void *pvParameters)
000000  b0fe              SUB      sp,sp,#0x1f8
;;;168    {
;;;169    	uint8_t ucKeyCode;
;;;170    	uint8_t pcWriteBuffer[500];
;;;171    
;;;172    	
;;;173        while(1)
000002  e03d              B        |L11.128|
                  |L11.4|
;;;174        {
;;;175    		ucKeyCode = bsp_GetKey();
000004  f7fffffe          BL       bsp_GetKey
000008  4604              MOV      r4,r0
;;;176    		
;;;177    		if (ucKeyCode != KEY_NONE)
00000a  2c00              CMP      r4,#0
00000c  d035              BEQ      |L11.122|
;;;178    		{
;;;179    			switch (ucKeyCode)
00000e  2c01              CMP      r4,#1
000010  d006              BEQ      |L11.32|
000012  2c04              CMP      r4,#4
000014  d008              BEQ      |L11.40|
000016  2c07              CMP      r4,#7
000018  d00a              BEQ      |L11.48|
00001a  2c16              CMP      r4,#0x16
00001c  d12b              BNE      |L11.118|
00001e  e00b              B        |L11.56|
                  |L11.32|
;;;180    			{
;;;181    				/* K1键按下 */
;;;182    				case KEY_DOWN_K1:
;;;183    					App_Printf("K1键按下\r\n");	
000020  a018              ADR      r0,|L11.132|
000022  f7fffffe          BL       App_Printf
;;;184    					break;	
000026  e027              B        |L11.120|
                  |L11.40|
;;;185    
;;;186    				/* K2键按下 */
;;;187    				case KEY_DOWN_K2:
;;;188    					App_Printf("K2键按下\r\n");
000028  a019              ADR      r0,|L11.144|
00002a  f7fffffe          BL       App_Printf
;;;189    					break;
00002e  e023              B        |L11.120|
                  |L11.48|
;;;190    				
;;;191    				/* K3键按下 */
;;;192    				case KEY_DOWN_K3:
;;;193    					App_Printf("K3键按下\r\n");
000030  a01a              ADR      r0,|L11.156|
000032  f7fffffe          BL       App_Printf
;;;194    					break;
000036  e01f              B        |L11.120|
                  |L11.56|
;;;195    				
;;;196    				/* 摇杆的OK键按下，打印任务执行情况 */
;;;197    				case JOY_DOWN_OK:			 
;;;198    					App_Printf("=================================================\r\n");
000038  a01b              ADR      r0,|L11.168|
00003a  f7fffffe          BL       App_Printf
;;;199    					App_Printf("任务名      任务状态 优先级   剩余栈 任务序号\r\n");
00003e  a027              ADR      r0,|L11.220|
000040  f7fffffe          BL       App_Printf
;;;200    					vTaskList((char *)&pcWriteBuffer);
000044  a801              ADD      r0,sp,#4
000046  f7fffffe          BL       vTaskList
;;;201    					App_Printf("%s\r\n", pcWriteBuffer);
00004a  a901              ADD      r1,sp,#4
00004c  a02f              ADR      r0,|L11.268|
00004e  f7fffffe          BL       App_Printf
;;;202    				
;;;203    					App_Printf("\r\n任务名       运行计数         使用率\r\n");
000052  a030              ADR      r0,|L11.276|
000054  f7fffffe          BL       App_Printf
;;;204    					vTaskGetRunTimeStats((char *)&pcWriteBuffer);
000058  a801              ADD      r0,sp,#4
00005a  f7fffffe          BL       vTaskGetRunTimeStats
;;;205    					App_Printf("%s\r\n", pcWriteBuffer);
00005e  a901              ADD      r1,sp,#4
000060  a02a              ADR      r0,|L11.268|
000062  f7fffffe          BL       App_Printf
;;;206    					App_Printf("当前动态内存剩余大小 = %d字节\r\n", xPortGetFreeHeapSize());
000066  f7fffffe          BL       xPortGetFreeHeapSize
00006a  4605              MOV      r5,r0
00006c  4629              MOV      r1,r5
00006e  a034              ADR      r0,|L11.320|
000070  f7fffffe          BL       App_Printf
;;;207    					break;
000074  e000              B        |L11.120|
                  |L11.118|
;;;208    				
;;;209    				/* 其他的键值不处理 */
;;;210    				default:                     
;;;211    					break;
000076  bf00              NOP      
                  |L11.120|
000078  bf00              NOP                            ;184
                  |L11.122|
;;;212    			}
;;;213    		}
;;;214    		
;;;215    		vTaskDelay(20);
00007a  2014              MOVS     r0,#0x14
00007c  f7fffffe          BL       vTaskDelay
                  |L11.128|
000080  e7c0              B        |L11.4|
;;;216    	}
;;;217    }
;;;218    
                          ENDP

000082  0000              DCW      0x0000
                  |L11.132|
000084  4b31bcfc          DCB      "K1",188,252,176,180,207,194,"\r\n",0
000088  b0b4cfc2
00008c  0d0a00  
00008f  00                DCB      0
                  |L11.144|
000090  4b32bcfc          DCB      "K2",188,252,176,180,207,194,"\r\n",0
000094  b0b4cfc2
000098  0d0a00  
00009b  00                DCB      0
                  |L11.156|
00009c  4b33bcfc          DCB      "K3",188,252,176,180,207,194,"\r\n",0
0000a0  b0b4cfc2
0000a4  0d0a00  
0000a7  00                DCB      0
                  |L11.168|
0000a8  3d3d3d3d          DCB      "=================================================\r\n",0
0000ac  3d3d3d3d
0000b0  3d3d3d3d
0000b4  3d3d3d3d
0000b8  3d3d3d3d
0000bc  3d3d3d3d
0000c0  3d3d3d3d
0000c4  3d3d3d3d
0000c8  3d3d3d3d
0000cc  3d3d3d3d
0000d0  3d3d3d3d
0000d4  3d3d3d3d
0000d8  3d0d0a00
                  |L11.220|
0000dc  c8cecef1          DCB      200,206,206,241,195,251,"      ",200,206,206,241,215,180
0000e0  c3fb2020
0000e4  20202020
0000e8  c8cecef1
0000ec  d7b4    
0000ee  ccac20d3          DCB      204,172," ",211,197,207,200,188,182,"   ",202,163,211,224
0000f2  c5cfc8bc
0000f6  b6202020
0000fa  caa3d3e0
0000fe  d5bb20c8          DCB      213,187," ",200,206,206,241,208,242,186,197,"\r\n",0
000102  cecef1d0
000106  f2bac50d
00010a  0a00    
                  |L11.268|
00010c  25730d0a          DCB      "%s\r\n",0
000110  00      
000111  00                DCB      0
000112  00                DCB      0
000113  00                DCB      0
                  |L11.276|
000114  0d0ac8ce          DCB      "\r\n",200,206,206,241,195,251,"       ",212,203,208,208
000118  cef1c3fb
00011c  20202020
000120  202020d4
000124  cbd0d0  
000127  bcc6cafd          DCB      188,198,202,253,"         ",202,185,211,195,194,202,"\r\n"
00012b  20202020
00012f  20202020
000133  20cab9d3
000137  c3c2ca0d
00013b  0a      
00013c  00                DCB      0
00013d  00                DCB      0
00013e  00                DCB      0
00013f  00                DCB      0
                  |L11.320|
000140  b5b1c7b0          DCB      181,177,199,176,182,175,204,172,196,218,180,230,202,163,211
000144  b6afccac
000148  c4dab4e6
00014c  caa3d3  
00014f  e0b4f3d0          DCB      224,180,243,208,161," = %d",215,214,189,218,"\r\n",0
000153  a1203d20
000157  2564d7d6
00015b  bdda0d0a
00015f  00      

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  buff
                          %        1024

                          AREA ||.data||, DATA, ALIGN=2

                  xHandleTaskUserIF
                          DCD      0x00000000
                  xHandleTaskLED
                          DCD      0x00000000
                  xHandleTaskMsgPro
                          DCD      0x00000000
                  xHandleTaskSocket
                          DCD      0x00000000
                  xHandleTaskTCPnet
                          DCD      0x00000000
                  xHandleTaskStart
                          DCD      0x00000000
                  xMutex
                          DCD      0x00000000
                  xCreatedEventGroup
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\main.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_e7da1c53____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_e7da1c53____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_e7da1c53____REVSH|
#line 144
|__asm___6_main_c_e7da1c53____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_e7da1c53____RRX|
#line 300
|__asm___6_main_c_e7da1c53____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
