; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\system_stm32f4xx.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\system_stm32f4xx.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp\inc -I..\..\User\bsp -I..\..\User -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM4F -I..\..\RL-ARM\Config -I..\..\RL-ARM\Driver -I..\..\RL-ARM\RL-RTX\inc -IC:\Keil4.74\ARM\RV31\INC -IC:\Keil4.74\ARM\CMSIS\Include -IC:\Keil4.74\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -D__RTX --omf_browse=.\flash\obj\system_stm32f4xx.crf ..\..\User\bsp\system_stm32f4xx.c]
                          THUMB

                          AREA ||i.SetSysClock||, CODE, READONLY, ALIGN=2

                  SetSysClock PROC
;;;644      */
;;;645    static void SetSysClock(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;646    {
;;;647    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
;;;648    /******************************************************************************/
;;;649    /*            PLL (clocked by HSE) used as System clock source                */
;;;650    /******************************************************************************/
;;;651      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2000              MOVS     r0,#0
000004  9001              STR      r0,[sp,#4]
000006  9000              STR      r0,[sp,#0]
;;;652      
;;;653      /* Enable HSE */
;;;654      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000008  4834              LDR      r0,|L1.220|
00000a  6800              LDR      r0,[r0,#0]
00000c  f4403080          ORR      r0,r0,#0x10000
000010  4932              LDR      r1,|L1.220|
000012  6008              STR      r0,[r1,#0]
;;;655     
;;;656      /* Wait till HSE is ready and if Time out is reached exit */
;;;657      do
000014  bf00              NOP      
                  |L1.22|
;;;658      {
;;;659        HSEStatus = RCC->CR & RCC_CR_HSERDY;
000016  4831              LDR      r0,|L1.220|
000018  6800              LDR      r0,[r0,#0]
00001a  f4003000          AND      r0,r0,#0x20000
00001e  9000              STR      r0,[sp,#0]
;;;660        StartUpCounter++;
000020  9801              LDR      r0,[sp,#4]
000022  1c40              ADDS     r0,r0,#1
000024  9001              STR      r0,[sp,#4]
;;;661      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000026  9800              LDR      r0,[sp,#0]
000028  b918              CBNZ     r0,|L1.50|
00002a  9801              LDR      r0,[sp,#4]
00002c  f5b04fa0          CMP      r0,#0x5000
000030  d1f1              BNE      |L1.22|
                  |L1.50|
;;;662    
;;;663      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
000032  482a              LDR      r0,|L1.220|
000034  6800              LDR      r0,[r0,#0]
000036  f4103f00          TST      r0,#0x20000
00003a  d002              BEQ      |L1.66|
;;;664      {
;;;665        HSEStatus = (uint32_t)0x01;
00003c  2001              MOVS     r0,#1
00003e  9000              STR      r0,[sp,#0]
000040  e001              B        |L1.70|
                  |L1.66|
;;;666      }
;;;667      else
;;;668      {
;;;669        HSEStatus = (uint32_t)0x00;
000042  2000              MOVS     r0,#0
000044  9000              STR      r0,[sp,#0]
                  |L1.70|
;;;670      }
;;;671    
;;;672      if (HSEStatus == (uint32_t)0x01)
000046  9800              LDR      r0,[sp,#0]
000048  2801              CMP      r0,#1
00004a  d145              BNE      |L1.216|
;;;673      {
;;;674        /* Select regulator voltage output Scale 1 mode */
;;;675        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
00004c  4823              LDR      r0,|L1.220|
00004e  3040              ADDS     r0,r0,#0x40
000050  6800              LDR      r0,[r0,#0]
000052  f0405080          ORR      r0,r0,#0x10000000
000056  4921              LDR      r1,|L1.220|
000058  3140              ADDS     r1,r1,#0x40
00005a  6008              STR      r0,[r1,#0]
;;;676        PWR->CR |= PWR_CR_VOS;
00005c  4820              LDR      r0,|L1.224|
00005e  6800              LDR      r0,[r0,#0]
000060  f4404040          ORR      r0,r0,#0xc000
000064  491e              LDR      r1,|L1.224|
000066  6008              STR      r0,[r1,#0]
;;;677    
;;;678        /* HCLK = SYSCLK / 1*/
;;;679        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
000068  481c              LDR      r0,|L1.220|
00006a  3008              ADDS     r0,r0,#8
00006c  6800              LDR      r0,[r0,#0]
00006e  491b              LDR      r1,|L1.220|
000070  3108              ADDS     r1,r1,#8
000072  6008              STR      r0,[r1,#0]
;;;680    
;;;681    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)    
;;;682        /* PCLK2 = HCLK / 2*/
;;;683        RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
000074  4608              MOV      r0,r1
000076  6800              LDR      r0,[r0,#0]
000078  f4404000          ORR      r0,r0,#0x8000
00007c  6008              STR      r0,[r1,#0]
;;;684        
;;;685        /* PCLK1 = HCLK / 4*/
;;;686        RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
00007e  4608              MOV      r0,r1
000080  6800              LDR      r0,[r0,#0]
000082  f44050a0          ORR      r0,r0,#0x1400
000086  6008              STR      r0,[r1,#0]
;;;687    #endif /* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx  || STM32F446xx || STM32F469_479xx */
;;;688    
;;;689    #if defined(STM32F401xx)
;;;690        /* PCLK2 = HCLK / 2*/
;;;691        RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;692        
;;;693        /* PCLK1 = HCLK / 4*/
;;;694        RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;695    #endif /* STM32F401xx */
;;;696    
;;;697    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
;;;698        /* Configure the main PLL */
;;;699        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
000088  4816              LDR      r0,|L1.228|
00008a  1f09              SUBS     r1,r1,#4
00008c  6008              STR      r0,[r1,#0]
;;;700                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;701    #endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */
;;;702    
;;;703    #if defined(STM32F446xx)
;;;704        /* Configure the main PLL */
;;;705        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
;;;706                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
;;;707    #endif /* STM32F446xx */    
;;;708        
;;;709        /* Enable the main PLL */
;;;710        RCC->CR |= RCC_CR_PLLON;
00008e  1f08              SUBS     r0,r1,#4
000090  6800              LDR      r0,[r0,#0]
000092  f0407080          ORR      r0,r0,#0x1000000
000096  1f09              SUBS     r1,r1,#4
000098  6008              STR      r0,[r1,#0]
;;;711    
;;;712        /* Wait till the main PLL is ready */
;;;713        while((RCC->CR & RCC_CR_PLLRDY) == 0)
00009a  bf00              NOP      
                  |L1.156|
00009c  480f              LDR      r0,|L1.220|
00009e  6800              LDR      r0,[r0,#0]
0000a0  f0107f00          TST      r0,#0x2000000
0000a4  d0fa              BEQ      |L1.156|
;;;714        {
;;;715        }
;;;716       
;;;717    #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
;;;718        /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
;;;719        PWR->CR |= PWR_CR_ODEN;
;;;720        while((PWR->CSR & PWR_CSR_ODRDY) == 0)
;;;721        {
;;;722        }
;;;723        PWR->CR |= PWR_CR_ODSWEN;
;;;724        while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
;;;725        {
;;;726        }      
;;;727        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;728        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
;;;729    #endif /* STM32F427_437x || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
;;;730    
;;;731    #if defined(STM32F40_41xxx)     
;;;732        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;733        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
0000a6  f2407005          MOV      r0,#0x705
0000aa  490f              LDR      r1,|L1.232|
0000ac  6008              STR      r0,[r1,#0]
;;;734    #endif /* STM32F40_41xxx  */
;;;735    
;;;736    #if defined(STM32F401xx)
;;;737        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;738        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;739    #endif /* STM32F401xx */
;;;740    
;;;741        /* Select the main PLL as system clock source */
;;;742        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
0000ae  480b              LDR      r0,|L1.220|
0000b0  3008              ADDS     r0,r0,#8
0000b2  6800              LDR      r0,[r0,#0]
0000b4  f0200003          BIC      r0,r0,#3
0000b8  4908              LDR      r1,|L1.220|
0000ba  3108              ADDS     r1,r1,#8
0000bc  6008              STR      r0,[r1,#0]
;;;743        RCC->CFGR |= RCC_CFGR_SW_PLL;
0000be  4608              MOV      r0,r1
0000c0  6800              LDR      r0,[r0,#0]
0000c2  f0400002          ORR      r0,r0,#2
0000c6  6008              STR      r0,[r1,#0]
;;;744    
;;;745        /* Wait till the main PLL is used as system clock source */
;;;746        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
0000c8  bf00              NOP      
                  |L1.202|
0000ca  4804              LDR      r0,|L1.220|
0000cc  3008              ADDS     r0,r0,#8
0000ce  6800              LDR      r0,[r0,#0]
0000d0  f000000c          AND      r0,r0,#0xc
0000d4  2808              CMP      r0,#8
0000d6  d1f8              BNE      |L1.202|
                  |L1.216|
;;;747        {
;;;748        }
;;;749      }
;;;750      else
;;;751      { /* If HSE fails to start-up, the application will have wrong clock
;;;752             configuration. User can add here some code to deal with this error */
;;;753      }
;;;754    #elif defined(STM32F410xx) || defined(STM32F411xE)
;;;755    #if defined(USE_HSE_BYPASS) 
;;;756    /******************************************************************************/
;;;757    /*            PLL (clocked by HSE) used as System clock source                */
;;;758    /******************************************************************************/
;;;759      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
;;;760      
;;;761      /* Enable HSE and HSE BYPASS */
;;;762      RCC->CR |= ((uint32_t)RCC_CR_HSEON | RCC_CR_HSEBYP);
;;;763     
;;;764      /* Wait till HSE is ready and if Time out is reached exit */
;;;765      do
;;;766      {
;;;767        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;768        StartUpCounter++;
;;;769      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
;;;770    
;;;771      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
;;;772      {
;;;773        HSEStatus = (uint32_t)0x01;
;;;774      }
;;;775      else
;;;776      {
;;;777        HSEStatus = (uint32_t)0x00;
;;;778      }
;;;779    
;;;780      if (HSEStatus == (uint32_t)0x01)
;;;781      {
;;;782        /* Select regulator voltage output Scale 1 mode */
;;;783        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
;;;784        PWR->CR |= PWR_CR_VOS;
;;;785    
;;;786        /* HCLK = SYSCLK / 1*/
;;;787        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
;;;788    
;;;789        /* PCLK2 = HCLK / 2*/
;;;790        RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;791        
;;;792        /* PCLK1 = HCLK / 4*/
;;;793        RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;794    
;;;795        /* Configure the main PLL */
;;;796        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
;;;797                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;798        
;;;799        /* Enable the main PLL */
;;;800        RCC->CR |= RCC_CR_PLLON;
;;;801    
;;;802        /* Wait till the main PLL is ready */
;;;803        while((RCC->CR & RCC_CR_PLLRDY) == 0)
;;;804        {
;;;805        }
;;;806    
;;;807        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;808        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;809    
;;;810        /* Select the main PLL as system clock source */
;;;811        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
;;;812        RCC->CFGR |= RCC_CFGR_SW_PLL;
;;;813    
;;;814        /* Wait till the main PLL is used as system clock source */
;;;815        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
;;;816        {
;;;817        }
;;;818      }
;;;819      else
;;;820      { /* If HSE fails to start-up, the application will have wrong clock
;;;821             configuration. User can add here some code to deal with this error */
;;;822      }
;;;823    #else /* HSI will be used as PLL clock source */
;;;824      /* Select regulator voltage output Scale 1 mode */
;;;825      RCC->APB1ENR |= RCC_APB1ENR_PWREN;
;;;826      PWR->CR |= PWR_CR_VOS;
;;;827      
;;;828      /* HCLK = SYSCLK / 1*/
;;;829      RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
;;;830      
;;;831      /* PCLK2 = HCLK / 2*/
;;;832      RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;833      
;;;834      /* PCLK1 = HCLK / 4*/
;;;835      RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;836      
;;;837      /* Configure the main PLL */
;;;838      RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (PLL_Q << 24); 
;;;839      
;;;840      /* Enable the main PLL */
;;;841      RCC->CR |= RCC_CR_PLLON;
;;;842      
;;;843      /* Wait till the main PLL is ready */
;;;844      while((RCC->CR & RCC_CR_PLLRDY) == 0)
;;;845      {
;;;846      }
;;;847      
;;;848      /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;849      FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;850      
;;;851      /* Select the main PLL as system clock source */
;;;852      RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
;;;853      RCC->CFGR |= RCC_CFGR_SW_PLL;
;;;854      
;;;855      /* Wait till the main PLL is used as system clock source */
;;;856      while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
;;;857      {
;;;858      }
;;;859    #endif /* USE_HSE_BYPASS */  
;;;860    #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
;;;861    }
0000d8  bd0c              POP      {r2,r3,pc}
;;;862    
                          ENDP

0000da  0000              DCW      0x0000
                  |L1.220|
                          DCD      0x40023800
                  |L1.224|
                          DCD      0x40007000
                  |L1.228|
                          DCD      0x07405408
                  |L1.232|
                          DCD      0x40023c00

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;550      */
;;;551    void SystemCoreClockUpdate(void)
000000  b570              PUSH     {r4-r6,lr}
;;;552    {
;;;553      uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
000002  2000              MOVS     r0,#0
000004  2200              MOVS     r2,#0
000006  2302              MOVS     r3,#2
000008  2400              MOVS     r4,#0
00000a  2102              MOVS     r1,#2
;;;554    #if defined(STM32F446xx)  
;;;555      uint32_t pllr = 2;
;;;556    #endif /* STM32F446xx */
;;;557      /* Get SYSCLK source -------------------------------------------------------*/
;;;558      tmp = RCC->CFGR & RCC_CFGR_SWS;
00000c  4d27              LDR      r5,|L2.172|
00000e  682d              LDR      r5,[r5,#0]
000010  f005000c          AND      r0,r5,#0xc
;;;559    
;;;560      switch (tmp)
000014  b120              CBZ      r0,|L2.32|
000016  2804              CMP      r0,#4
000018  d006              BEQ      |L2.40|
00001a  2808              CMP      r0,#8
00001c  d134              BNE      |L2.136|
00001e  e007              B        |L2.48|
                  |L2.32|
;;;561      {
;;;562        case 0x00:  /* HSI used as system clock source */
;;;563          SystemCoreClock = HSI_VALUE;
000020  4d23              LDR      r5,|L2.176|
000022  4e24              LDR      r6,|L2.180|
000024  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;564          break;
000026  e033              B        |L2.144|
                  |L2.40|
;;;565        case 0x04:  /* HSE used as system clock source */
;;;566          SystemCoreClock = HSE_VALUE;
000028  4d23              LDR      r5,|L2.184|
00002a  4e22              LDR      r6,|L2.180|
00002c  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;567          break;
00002e  e02f              B        |L2.144|
                  |L2.48|
;;;568        case 0x08:  /* PLL P used as system clock source */
;;;569           /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;570             SYSCLK = PLL_VCO / PLL_P
;;;571             */    
;;;572          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
000030  4d1e              LDR      r5,|L2.172|
000032  1f2d              SUBS     r5,r5,#4
000034  682d              LDR      r5,[r5,#0]
000036  f3c55480          UBFX     r4,r5,#22,#1
;;;573          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
00003a  4d1c              LDR      r5,|L2.172|
00003c  1f2d              SUBS     r5,r5,#4
00003e  682d              LDR      r5,[r5,#0]
000040  f005013f          AND      r1,r5,#0x3f
;;;574          
;;;575    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
;;;576          if (pllsource != 0)
000044  b154              CBZ      r4,|L2.92|
;;;577          {
;;;578            /* HSE used as PLL clock source */
;;;579            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
000046  4d1c              LDR      r5,|L2.184|
000048  fbb5f5f1          UDIV     r5,r5,r1
00004c  4e17              LDR      r6,|L2.172|
00004e  1f36              SUBS     r6,r6,#4
000050  6836              LDR      r6,[r6,#0]
000052  f3c61688          UBFX     r6,r6,#6,#9
000056  fb05f206          MUL      r2,r5,r6
00005a  e009              B        |L2.112|
                  |L2.92|
;;;580          }
;;;581          else
;;;582          {
;;;583            /* HSI used as PLL clock source */
;;;584            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
00005c  4d14              LDR      r5,|L2.176|
00005e  fbb5f5f1          UDIV     r5,r5,r1
000062  4e12              LDR      r6,|L2.172|
000064  1f36              SUBS     r6,r6,#4
000066  6836              LDR      r6,[r6,#0]
000068  f3c61688          UBFX     r6,r6,#6,#9
00006c  fb05f206          MUL      r2,r5,r6
                  |L2.112|
;;;585          }
;;;586    #elif defined(STM32F410xx) || defined(STM32F411xE)
;;;587    #if defined(USE_HSE_BYPASS)
;;;588          if (pllsource != 0)
;;;589          {
;;;590            /* HSE used as PLL clock source */
;;;591            pllvco = (HSE_BYPASS_INPUT_FREQUENCY / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
;;;592          }  
;;;593    #else  
;;;594          if (pllsource == 0)
;;;595          {
;;;596            /* HSI used as PLL clock source */
;;;597            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
;;;598          }  
;;;599    #endif /* USE_HSE_BYPASS */  
;;;600    #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F446xx || STM32F469_479xx */  
;;;601          pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
000070  4d0e              LDR      r5,|L2.172|
000072  1f2d              SUBS     r5,r5,#4
000074  682d              LDR      r5,[r5,#0]
000076  f3c54501          UBFX     r5,r5,#16,#2
00007a  1c6d              ADDS     r5,r5,#1
00007c  006b              LSLS     r3,r5,#1
;;;602          SystemCoreClock = pllvco/pllp;      
00007e  fbb2f5f3          UDIV     r5,r2,r3
000082  4e0c              LDR      r6,|L2.180|
000084  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;603          break;
000086  e003              B        |L2.144|
                  |L2.136|
;;;604    #if defined(STM32F446xx)      
;;;605          case 0x0C:  /* PLL R used as system clock source */
;;;606           /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;607             SYSCLK = PLL_VCO / PLL_R
;;;608             */    
;;;609          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
;;;610          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
;;;611          if (pllsource != 0)
;;;612          {
;;;613            /* HSE used as PLL clock source */
;;;614            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
;;;615          }
;;;616          else
;;;617          {
;;;618            /* HSI used as PLL clock source */
;;;619            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
;;;620          }
;;;621     
;;;622          pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
;;;623          SystemCoreClock = pllvco/pllr;      
;;;624          break;
;;;625    #endif /* STM32F446xx */
;;;626        default:
;;;627          SystemCoreClock = HSI_VALUE;
000088  4d09              LDR      r5,|L2.176|
00008a  4e0a              LDR      r6,|L2.180|
00008c  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;628          break;
00008e  bf00              NOP      
                  |L2.144|
000090  bf00              NOP                            ;564
;;;629      }
;;;630      /* Compute HCLK frequency --------------------------------------------------*/
;;;631      /* Get HCLK prescaler */
;;;632      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000092  4d06              LDR      r5,|L2.172|
000094  682d              LDR      r5,[r5,#0]
000096  f3c51503          UBFX     r5,r5,#4,#4
00009a  4e08              LDR      r6,|L2.188|
00009c  5d70              LDRB     r0,[r6,r5]
;;;633      /* HCLK frequency */
;;;634      SystemCoreClock >>= tmp;
00009e  4d05              LDR      r5,|L2.180|
0000a0  682d              LDR      r5,[r5,#0]  ; SystemCoreClock
0000a2  40c5              LSRS     r5,r5,r0
0000a4  4e03              LDR      r6,|L2.180|
0000a6  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;635    }
0000a8  bd70              POP      {r4-r6,pc}
;;;636    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L2.172|
                          DCD      0x40023808
                  |L2.176|
                          DCD      0x00f42400
                  |L2.180|
                          DCD      SystemCoreClock
                  |L2.184|
                          DCD      0x007a1200
                  |L2.188|
                          DCD      AHBPrescTable

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;473      */
;;;474    void SystemInit(void)
000000  b510              PUSH     {r4,lr}
;;;475    {
;;;476      /* FPU settings ------------------------------------------------------------*/
;;;477      #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;;;478        SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
000002  4815              LDR      r0,|L3.88|
000004  6800              LDR      r0,[r0,#0]
000006  f4400070          ORR      r0,r0,#0xf00000
00000a  4913              LDR      r1,|L3.88|
00000c  6008              STR      r0,[r1,#0]
;;;479      #endif
;;;480      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;481      /* Set HSION bit */
;;;482      RCC->CR |= (uint32_t)0x00000001;
00000e  4813              LDR      r0,|L3.92|
000010  6800              LDR      r0,[r0,#0]
000012  f0400001          ORR      r0,r0,#1
000016  4911              LDR      r1,|L3.92|
000018  6008              STR      r0,[r1,#0]
;;;483    
;;;484      /* Reset CFGR register */
;;;485      RCC->CFGR = 0x00000000;
00001a  2000              MOVS     r0,#0
00001c  490f              LDR      r1,|L3.92|
00001e  3108              ADDS     r1,r1,#8
000020  6008              STR      r0,[r1,#0]
;;;486    
;;;487      /* Reset HSEON, CSSON and PLLON bits */
;;;488      RCC->CR &= (uint32_t)0xFEF6FFFF;
000022  480e              LDR      r0,|L3.92|
000024  6800              LDR      r0,[r0,#0]
000026  490e              LDR      r1,|L3.96|
000028  4008              ANDS     r0,r0,r1
00002a  490c              LDR      r1,|L3.92|
00002c  6008              STR      r0,[r1,#0]
;;;489    
;;;490      /* Reset PLLCFGR register */
;;;491      RCC->PLLCFGR = 0x24003010;
00002e  480d              LDR      r0,|L3.100|
000030  1d09              ADDS     r1,r1,#4
000032  6008              STR      r0,[r1,#0]
;;;492    
;;;493      /* Reset HSEBYP bit */
;;;494      RCC->CR &= (uint32_t)0xFFFBFFFF;
000034  1f08              SUBS     r0,r1,#4
000036  6800              LDR      r0,[r0,#0]
000038  f4202080          BIC      r0,r0,#0x40000
00003c  1f09              SUBS     r1,r1,#4
00003e  6008              STR      r0,[r1,#0]
;;;495    
;;;496      /* Disable all interrupts */
;;;497      RCC->CIR = 0x00000000;
000040  2000              MOVS     r0,#0
000042  4906              LDR      r1,|L3.92|
000044  310c              ADDS     r1,r1,#0xc
000046  6008              STR      r0,[r1,#0]
;;;498    
;;;499    #if defined(DATA_IN_ExtSRAM) || defined(DATA_IN_ExtSDRAM)
;;;500      SystemInit_ExtMemCtl(); 
;;;501    #endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
;;;502             
;;;503      /* Configure the System clock source, PLL Multiplier and Divider factors, 
;;;504         AHB/APBx prescalers and Flash settings ----------------------------------*/
;;;505      SetSysClock();
000048  f7fffffe          BL       SetSysClock
;;;506    
;;;507      /* Configure the Vector Table location add offset address ------------------*/
;;;508    #ifdef VECT_TAB_SRAM
;;;509      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;510    #else
;;;511      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
00004c  f04f6000          MOV      r0,#0x8000000
000050  4901              LDR      r1,|L3.88|
000052  3980              SUBS     r1,r1,#0x80
000054  6008              STR      r0,[r1,#0]
;;;512    #endif
;;;513    }
000056  bd10              POP      {r4,pc}
;;;514    
                          ENDP

                  |L3.88|
                          DCD      0xe000ed88
                  |L3.92|
                          DCD      0x40023800
                  |L3.96|
                          DCD      0xfef6ffff
                  |L3.100|
                          DCD      0x24003010

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x0a037a00
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\system_stm32f4xx.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_system_stm32f4xx_c_5d646a67____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REVSH|
#line 144
|__asm___18_system_stm32f4xx_c_5d646a67____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____RRX|
#line 300
|__asm___18_system_stm32f4xx_c_5d646a67____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
