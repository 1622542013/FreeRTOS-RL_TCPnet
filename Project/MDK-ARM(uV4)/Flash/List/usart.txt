; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\usart.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\usart.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp\inc -I..\..\User\bsp -I..\..\User -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM4F -I..\..\RL-ARM\Config -I..\..\RL-ARM\Driver -I..\..\RL-ARM\RL-RTX\inc -IC:\Keil4.74\ARM\RV31\INC -IC:\Keil4.74\ARM\CMSIS\Include -IC:\Keil4.74\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -D__RTX --omf_browse=.\flash\obj\usart.crf ..\..\User\bsp\src\USART.c]
                          THUMB

                          AREA ||i.USART_Configuration||, CODE, READONLY, ALIGN=2

                  USART_Configuration PROC
;;;54     *****************************************************************/
;;;55     void USART_Configuration(uint8_t USART_x, uint32_t BaudRate, uint16_t USART_Mode, uint16_t USART_IT, uint16_t USART_DMAReq)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;56     {
000004  b086              SUB      sp,sp,#0x18
000006  4606              MOV      r6,r0
000008  460f              MOV      r7,r1
00000a  4690              MOV      r8,r2
00000c  461c              MOV      r4,r3
00000e  9d0c              LDR      r5,[sp,#0x30]
;;;57       GPIO_InitTypeDef GPIO_InitStructure;
;;;58       USART_InitTypeDef USART_InitStructure;
;;;59     
;;;60       if(USART_x == USART_1)
000010  2e01              CMP      r6,#1
000012  d12e              BNE      |L1.114|
;;;61       {
;;;62         RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_USART1_Tx, ENABLE);  /* Enable USART1_Tx GPIO clock */
000014  2101              MOVS     r1,#1
000016  4608              MOV      r0,r1
000018  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;63         RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_USART1_Rx, ENABLE);  /* Enable USART1_Rx GPIO clock */
00001c  2101              MOVS     r1,#1
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;64         RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);     /* Enable USART1 clock */
000024  2101              MOVS     r1,#1
000026  2010              MOVS     r0,#0x10
000028  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;65     
;;;66         GPIO_PinAFConfig(GPIO_USART1_Tx, GPIO_PinSource_USART1_Tx, GPIO_AF_USART1); /* Connect GPIOxn to USART1_Tx */
00002c  2207              MOVS     r2,#7
00002e  2109              MOVS     r1,#9
000030  48fe              LDR      r0,|L1.1068|
000032  f7fffffe          BL       GPIO_PinAFConfig
;;;67         GPIO_PinAFConfig(GPIO_USART1_Rx, GPIO_PinSource_USART1_Rx, GPIO_AF_USART1); /* Connect GPIOxn to USART1_Rx */
000036  2207              MOVS     r2,#7
000038  210a              MOVS     r1,#0xa
00003a  48fc              LDR      r0,|L1.1068|
00003c  f7fffffe          BL       GPIO_PinAFConfig
;;;68     
;;;69         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_USART1_Tx;
000040  0270              LSLS     r0,r6,#9
000042  9004              STR      r0,[sp,#0x10]
;;;70         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
000044  2003              MOVS     r0,#3
000046  f88d0015          STRB     r0,[sp,#0x15]
;;;71         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00004a  2002              MOVS     r0,#2
00004c  f88d0014          STRB     r0,[sp,#0x14]
;;;72         GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000050  2000              MOVS     r0,#0
000052  f88d0016          STRB     r0,[sp,#0x16]
;;;73         GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
000056  2001              MOVS     r0,#1
000058  f88d0017          STRB     r0,[sp,#0x17]
;;;74         GPIO_Init(GPIO_USART1_Tx, &GPIO_InitStructure);
00005c  a904              ADD      r1,sp,#0x10
00005e  48f3              LDR      r0,|L1.1068|
000060  f7fffffe          BL       GPIO_Init
;;;75         
;;;76         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_USART1_Rx;
000064  02b0              LSLS     r0,r6,#10
000066  9004              STR      r0,[sp,#0x10]
;;;77         GPIO_Init(GPIO_USART1_Rx, &GPIO_InitStructure);
000068  a904              ADD      r1,sp,#0x10
00006a  48f0              LDR      r0,|L1.1068|
00006c  f7fffffe          BL       GPIO_Init
000070  e0f6              B        |L1.608|
                  |L1.114|
;;;78       }
;;;79     
;;;80       else if(USART_x == USART_2)
000072  2e02              CMP      r6,#2
000074  d12e              BNE      |L1.212|
;;;81       {
;;;82         RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_USART2_Tx, ENABLE);  /* Enable USART2_Tx GPIO clock */
000076  2101              MOVS     r1,#1
000078  4608              MOV      r0,r1
00007a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;83         RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_USART2_Rx, ENABLE);  /* Enable USART2_Rx GPIO clock */
00007e  2101              MOVS     r1,#1
000080  4608              MOV      r0,r1
000082  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;84         RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);     /* Enable USART2 clock */
000086  2101              MOVS     r1,#1
000088  0448              LSLS     r0,r1,#17
00008a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;85     
;;;86         GPIO_PinAFConfig(GPIO_USART2_Tx, GPIO_PinSource_USART2_Tx, GPIO_AF_USART2);	/* Connect GPIOxn to USART2_Tx */
00008e  2207              MOVS     r2,#7
000090  2102              MOVS     r1,#2
000092  48e6              LDR      r0,|L1.1068|
000094  f7fffffe          BL       GPIO_PinAFConfig
;;;87         GPIO_PinAFConfig(GPIO_USART2_Rx, GPIO_PinSource_USART2_Rx, GPIO_AF_USART2);	/* Connect GPIOxn to USART2_Rx */
000098  2207              MOVS     r2,#7
00009a  2103              MOVS     r1,#3
00009c  48e3              LDR      r0,|L1.1068|
00009e  f7fffffe          BL       GPIO_PinAFConfig
;;;88     
;;;89         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_USART2_Tx;
0000a2  2004              MOVS     r0,#4
0000a4  9004              STR      r0,[sp,#0x10]
;;;90         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
0000a6  2003              MOVS     r0,#3
0000a8  f88d0015          STRB     r0,[sp,#0x15]
;;;91         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
0000ac  2002              MOVS     r0,#2
0000ae  f88d0014          STRB     r0,[sp,#0x14]
;;;92         GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
0000b2  2000              MOVS     r0,#0
0000b4  f88d0016          STRB     r0,[sp,#0x16]
;;;93         GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
0000b8  2001              MOVS     r0,#1
0000ba  f88d0017          STRB     r0,[sp,#0x17]
;;;94         GPIO_Init(GPIO_USART2_Tx, &GPIO_InitStructure);
0000be  a904              ADD      r1,sp,#0x10
0000c0  48da              LDR      r0,|L1.1068|
0000c2  f7fffffe          BL       GPIO_Init
;;;95         
;;;96         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_USART2_Rx;
0000c6  2008              MOVS     r0,#8
0000c8  9004              STR      r0,[sp,#0x10]
;;;97         GPIO_Init(GPIO_USART2_Rx, &GPIO_InitStructure);
0000ca  a904              ADD      r1,sp,#0x10
0000cc  48d7              LDR      r0,|L1.1068|
0000ce  f7fffffe          BL       GPIO_Init
0000d2  e0c5              B        |L1.608|
                  |L1.212|
;;;98       }
;;;99     
;;;100      else if(USART_x == USART_3)
0000d4  2e03              CMP      r6,#3
0000d6  d130              BNE      |L1.314|
;;;101      {
;;;102        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_USART3_Tx, ENABLE);  /* Enable USART3_Tx GPIO clock */
0000d8  2101              MOVS     r1,#1
0000da  2002              MOVS     r0,#2
0000dc  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;103        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_USART3_Rx, ENABLE);  /* Enable USART3_Rx GPIO clock */
0000e0  2101              MOVS     r1,#1
0000e2  2002              MOVS     r0,#2
0000e4  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;104        RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);     /* Enable USART3 clock */
0000e8  2101              MOVS     r1,#1
0000ea  0488              LSLS     r0,r1,#18
0000ec  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;105    
;;;106        GPIO_PinAFConfig(GPIO_USART3_Tx, GPIO_PinSource_USART3_Tx, GPIO_AF_USART3); /* Connect GPIOxn to USART3_Tx */
0000f0  2207              MOVS     r2,#7
0000f2  210a              MOVS     r1,#0xa
0000f4  48ce              LDR      r0,|L1.1072|
0000f6  f7fffffe          BL       GPIO_PinAFConfig
;;;107        GPIO_PinAFConfig(GPIO_USART3_Rx, GPIO_PinSource_USART3_Rx, GPIO_AF_USART3); /* Connect GPIOxn to USART3_Rx */
0000fa  2207              MOVS     r2,#7
0000fc  210b              MOVS     r1,#0xb
0000fe  48cc              LDR      r0,|L1.1072|
000100  f7fffffe          BL       GPIO_PinAFConfig
;;;108    
;;;109        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_USART3_Tx;
000104  f44f6080          MOV      r0,#0x400
000108  9004              STR      r0,[sp,#0x10]
;;;110        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
00010a  2003              MOVS     r0,#3
00010c  f88d0015          STRB     r0,[sp,#0x15]
;;;111        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000110  2002              MOVS     r0,#2
000112  f88d0014          STRB     r0,[sp,#0x14]
;;;112        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000116  2000              MOVS     r0,#0
000118  f88d0016          STRB     r0,[sp,#0x16]
;;;113        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
00011c  2001              MOVS     r0,#1
00011e  f88d0017          STRB     r0,[sp,#0x17]
;;;114        GPIO_Init(GPIO_USART3_Tx, &GPIO_InitStructure);
000122  a904              ADD      r1,sp,#0x10
000124  48c2              LDR      r0,|L1.1072|
000126  f7fffffe          BL       GPIO_Init
;;;115        
;;;116        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_USART3_Rx;
00012a  f44f6000          MOV      r0,#0x800
00012e  9004              STR      r0,[sp,#0x10]
;;;117        GPIO_Init(GPIO_USART3_Rx, &GPIO_InitStructure);
000130  a904              ADD      r1,sp,#0x10
000132  48bf              LDR      r0,|L1.1072|
000134  f7fffffe          BL       GPIO_Init
000138  e092              B        |L1.608|
                  |L1.314|
;;;118      }
;;;119    
;;;120      else if(USART_x == USART_4)
00013a  2e04              CMP      r6,#4
00013c  d12e              BNE      |L1.412|
;;;121      {
;;;122        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_USART4_Tx, ENABLE);  /* Enable USART4_Tx GPIO clock */
00013e  2101              MOVS     r1,#1
000140  2004              MOVS     r0,#4
000142  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;123        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_USART4_Rx, ENABLE);  /* Enable USART4_Rx GPIO clock */
000146  2101              MOVS     r1,#1
000148  2004              MOVS     r0,#4
00014a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;124        RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);      /* Enable USART4 clock */
00014e  2101              MOVS     r1,#1
000150  04c8              LSLS     r0,r1,#19
000152  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;125    
;;;126        GPIO_PinAFConfig(GPIO_USART4_Tx, GPIO_PinSource_USART4_Tx, GPIO_AF_UART4);  /* Connect GPIOxn to USART4_Tx */
000156  2208              MOVS     r2,#8
000158  210a              MOVS     r1,#0xa
00015a  48b6              LDR      r0,|L1.1076|
00015c  f7fffffe          BL       GPIO_PinAFConfig
;;;127        GPIO_PinAFConfig(GPIO_USART4_Rx, GPIO_PinSource_USART4_Rx, GPIO_AF_UART4);  /* Connect GPIOxn to USART4_Rx */
000160  2208              MOVS     r2,#8
000162  210b              MOVS     r1,#0xb
000164  48b3              LDR      r0,|L1.1076|
000166  f7fffffe          BL       GPIO_PinAFConfig
;;;128    
;;;129        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_USART4_Tx;
00016a  0230              LSLS     r0,r6,#8
00016c  9004              STR      r0,[sp,#0x10]
;;;130        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
00016e  2003              MOVS     r0,#3
000170  f88d0015          STRB     r0,[sp,#0x15]
;;;131        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000174  2002              MOVS     r0,#2
000176  f88d0014          STRB     r0,[sp,#0x14]
;;;132        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00017a  2000              MOVS     r0,#0
00017c  f88d0016          STRB     r0,[sp,#0x16]
;;;133        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
000180  2001              MOVS     r0,#1
000182  f88d0017          STRB     r0,[sp,#0x17]
;;;134        GPIO_Init(GPIO_USART4_Tx, &GPIO_InitStructure);
000186  a904              ADD      r1,sp,#0x10
000188  48aa              LDR      r0,|L1.1076|
00018a  f7fffffe          BL       GPIO_Init
;;;135        
;;;136        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_USART4_Rx;
00018e  0270              LSLS     r0,r6,#9
000190  9004              STR      r0,[sp,#0x10]
;;;137        GPIO_Init(GPIO_USART4_Rx, &GPIO_InitStructure);
000192  a904              ADD      r1,sp,#0x10
000194  48a7              LDR      r0,|L1.1076|
000196  f7fffffe          BL       GPIO_Init
00019a  e061              B        |L1.608|
                  |L1.412|
;;;138      }
;;;139      
;;;140      else if(USART_x == USART_5)
00019c  2e05              CMP      r6,#5
00019e  d12f              BNE      |L1.512|
;;;141      {
;;;142        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_USART5_Tx, ENABLE);  /* Enable USART5_Tx GPIO clock */
0001a0  2101              MOVS     r1,#1
0001a2  2004              MOVS     r0,#4
0001a4  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;143        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_USART5_Rx, ENABLE);  /* Enable USART5_Rx GPIO clock */
0001a8  2101              MOVS     r1,#1
0001aa  2008              MOVS     r0,#8
0001ac  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;144        RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);      /* Enable USART5 clock */
0001b0  2101              MOVS     r1,#1
0001b2  0508              LSLS     r0,r1,#20
0001b4  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;145    
;;;146        GPIO_PinAFConfig(GPIO_USART5_Tx, GPIO_PinSource_USART5_Tx, GPIO_AF_UART5);  /* Connect GPIOxn to USART5_Tx */
0001b8  2208              MOVS     r2,#8
0001ba  210c              MOVS     r1,#0xc
0001bc  489d              LDR      r0,|L1.1076|
0001be  f7fffffe          BL       GPIO_PinAFConfig
;;;147        GPIO_PinAFConfig(GPIO_USART5_Rx, GPIO_PinSource_USART5_Rx, GPIO_AF_UART5);  /* Connect GPIOxn to USART5_Rx */
0001c2  2208              MOVS     r2,#8
0001c4  2102              MOVS     r1,#2
0001c6  489c              LDR      r0,|L1.1080|
0001c8  f7fffffe          BL       GPIO_PinAFConfig
;;;148    
;;;149        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_USART5_Tx;
0001cc  f44f5080          MOV      r0,#0x1000
0001d0  9004              STR      r0,[sp,#0x10]
;;;150        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
0001d2  2003              MOVS     r0,#3
0001d4  f88d0015          STRB     r0,[sp,#0x15]
;;;151        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
0001d8  2002              MOVS     r0,#2
0001da  f88d0014          STRB     r0,[sp,#0x14]
;;;152        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
0001de  2000              MOVS     r0,#0
0001e0  f88d0016          STRB     r0,[sp,#0x16]
;;;153        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
0001e4  2001              MOVS     r0,#1
0001e6  f88d0017          STRB     r0,[sp,#0x17]
;;;154        GPIO_Init(GPIO_USART5_Tx, &GPIO_InitStructure);
0001ea  a904              ADD      r1,sp,#0x10
0001ec  4891              LDR      r0,|L1.1076|
0001ee  f7fffffe          BL       GPIO_Init
;;;155        
;;;156        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_USART5_Rx;
0001f2  2004              MOVS     r0,#4
0001f4  9004              STR      r0,[sp,#0x10]
;;;157        GPIO_Init(GPIO_USART5_Rx, &GPIO_InitStructure);
0001f6  a904              ADD      r1,sp,#0x10
0001f8  488f              LDR      r0,|L1.1080|
0001fa  f7fffffe          BL       GPIO_Init
0001fe  e02f              B        |L1.608|
                  |L1.512|
;;;158      }
;;;159      
;;;160      else if(USART_x == USART_6)
000200  2e06              CMP      r6,#6
000202  d12d              BNE      |L1.608|
;;;161      {
;;;162        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_USART6_Tx, ENABLE);  /* Enable USART6_Tx GPIO clock */
000204  2101              MOVS     r1,#1
000206  2004              MOVS     r0,#4
000208  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;163        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_USART6_Rx, ENABLE);  /* Enable USART6_Rx GPIO clock */
00020c  2101              MOVS     r1,#1
00020e  2004              MOVS     r0,#4
000210  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;164        RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);     /* Enable USART6 clock */
000214  2101              MOVS     r1,#1
000216  2020              MOVS     r0,#0x20
000218  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;165    
;;;166        GPIO_PinAFConfig(GPIO_USART6_Tx, GPIO_PinSource_USART6_Tx, GPIO_AF_USART6);  /* Connect GPIOxn to USART6_Tx */
00021c  2208              MOVS     r2,#8
00021e  2106              MOVS     r1,#6
000220  4884              LDR      r0,|L1.1076|
000222  f7fffffe          BL       GPIO_PinAFConfig
;;;167        GPIO_PinAFConfig(GPIO_USART6_Rx, GPIO_PinSource_USART6_Rx, GPIO_AF_USART6);  /* Connect GPIOxn to USART6_Rx */
000226  2208              MOVS     r2,#8
000228  2107              MOVS     r1,#7
00022a  4882              LDR      r0,|L1.1076|
00022c  f7fffffe          BL       GPIO_PinAFConfig
;;;168    
;;;169        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_USART6_Tx;
000230  2040              MOVS     r0,#0x40
000232  9004              STR      r0,[sp,#0x10]
;;;170        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
000234  2003              MOVS     r0,#3
000236  f88d0015          STRB     r0,[sp,#0x15]
;;;171        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00023a  2002              MOVS     r0,#2
00023c  f88d0014          STRB     r0,[sp,#0x14]
;;;172        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000240  2000              MOVS     r0,#0
000242  f88d0016          STRB     r0,[sp,#0x16]
;;;173        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
000246  2001              MOVS     r0,#1
000248  f88d0017          STRB     r0,[sp,#0x17]
;;;174        GPIO_Init(GPIO_USART6_Tx, &GPIO_InitStructure);
00024c  a904              ADD      r1,sp,#0x10
00024e  4879              LDR      r0,|L1.1076|
000250  f7fffffe          BL       GPIO_Init
;;;175        
;;;176        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_USART6_Rx;
000254  2080              MOVS     r0,#0x80
000256  9004              STR      r0,[sp,#0x10]
;;;177        GPIO_Init(GPIO_USART6_Rx, &GPIO_InitStructure);
000258  a904              ADD      r1,sp,#0x10
00025a  4876              LDR      r0,|L1.1076|
00025c  f7fffffe          BL       GPIO_Init
                  |L1.608|
;;;178      }
;;;179    
;;;180      USART_InitStructure.USART_BaudRate = BaudRate;
000260  9700              STR      r7,[sp,#0]
;;;181      USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000262  2000              MOVS     r0,#0
000264  f8ad0004          STRH     r0,[sp,#4]
;;;182      USART_InitStructure.USART_StopBits = USART_StopBits_1;
000268  f8ad0006          STRH     r0,[sp,#6]
;;;183      USART_InitStructure.USART_Parity = USART_Parity_No;
00026c  f8ad0008          STRH     r0,[sp,#8]
;;;184      USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000270  f8ad000c          STRH     r0,[sp,#0xc]
;;;185      USART_InitStructure.USART_Mode = USART_Mode;
000274  f8ad800a          STRH     r8,[sp,#0xa]
;;;186    
;;;187      if(USART_x == USART_1)
000278  2e01              CMP      r6,#1
00027a  d17d              BNE      |L1.888|
;;;188      {
;;;189        USART_Init(USART1, &USART_InitStructure);
00027c  4669              MOV      r1,sp
00027e  486f              LDR      r0,|L1.1084|
000280  f7fffffe          BL       USART_Init
;;;190    
;;;191        if(USART_DMAReq == USART_DMAReq_Tx)
000284  2d80              CMP      r5,#0x80
000286  d104              BNE      |L1.658|
;;;192          USART_DMACmd(USART1, USART_DMAReq_Tx, ENABLE);  /* Enabling the DMA request specified USART1 */
000288  2201              MOVS     r2,#1
00028a  2180              MOVS     r1,#0x80
00028c  486b              LDR      r0,|L1.1084|
00028e  f7fffffe          BL       USART_DMACmd
                  |L1.658|
;;;193        if(USART_DMAReq == USART_DMAReq_Rx)
000292  2d40              CMP      r5,#0x40
000294  d104              BNE      |L1.672|
;;;194          USART_DMACmd(USART1, USART_DMAReq_Rx, ENABLE);  /* Enabling the DMA request specified USART1 */
000296  2201              MOVS     r2,#1
000298  2140              MOVS     r1,#0x40
00029a  4868              LDR      r0,|L1.1084|
00029c  f7fffffe          BL       USART_DMACmd
                  |L1.672|
;;;195        if(USART_DMAReq == (USART_DMAReq_Tx|USART_DMAReq_Rx))
0002a0  2dc0              CMP      r5,#0xc0
0002a2  d109              BNE      |L1.696|
;;;196        {
;;;197          USART_DMACmd(USART1, USART_DMAReq_Tx, ENABLE);  /* Enabling the DMA request specified USART1 */
0002a4  2201              MOVS     r2,#1
0002a6  2180              MOVS     r1,#0x80
0002a8  4864              LDR      r0,|L1.1084|
0002aa  f7fffffe          BL       USART_DMACmd
;;;198          USART_DMACmd(USART1, USART_DMAReq_Rx, ENABLE);  /* Enabling the DMA request specified USART1 */
0002ae  2201              MOVS     r2,#1
0002b0  2140              MOVS     r1,#0x40
0002b2  4862              LDR      r0,|L1.1084|
0002b4  f7fffffe          BL       USART_DMACmd
                  |L1.696|
;;;199        }
;;;200    
;;;201        if( (USART_IT & USART_IT_PE) == USART_IT_PE )
0002b8  f0040028          AND      r0,r4,#0x28
0002bc  2828              CMP      r0,#0x28
0002be  d104              BNE      |L1.714|
;;;202        {
;;;203          USART_ITConfig(USART1, USART_IT_PE, ENABLE); /* Enabling interrupts specified USART1 */
0002c0  2201              MOVS     r2,#1
0002c2  2128              MOVS     r1,#0x28
0002c4  485d              LDR      r0,|L1.1084|
0002c6  f7fffffe          BL       USART_ITConfig
                  |L1.714|
;;;204        }
;;;205        if( (USART_IT & USART_IT_TXE) == USART_IT_TXE )
0002ca  f2407027          MOV      r0,#0x727
0002ce  4020              ANDS     r0,r0,r4
0002d0  f5a061e0          SUB      r1,r0,#0x700
0002d4  3927              SUBS     r1,r1,#0x27
0002d6  d105              BNE      |L1.740|
;;;206        {
;;;207          USART_ITConfig(USART1, USART_IT_TXE, ENABLE); /* Enabling interrupts specified USART1 */
0002d8  2201              MOVS     r2,#1
0002da  f2407127          MOV      r1,#0x727
0002de  4857              LDR      r0,|L1.1084|
0002e0  f7fffffe          BL       USART_ITConfig
                  |L1.740|
;;;208        }
;;;209        if( (USART_IT & USART_IT_TC) == USART_IT_TC )
0002e4  f2406026          MOV      r0,#0x626
0002e8  4020              ANDS     r0,r0,r4
0002ea  f5a061c0          SUB      r1,r0,#0x600
0002ee  3926              SUBS     r1,r1,#0x26
0002f0  d105              BNE      |L1.766|
;;;210        {
;;;211          USART_ITConfig(USART1, USART_IT_TC, ENABLE); /* Enabling interrupts specified USART1 */
0002f2  2201              MOVS     r2,#1
0002f4  f2406126          MOV      r1,#0x626
0002f8  4850              LDR      r0,|L1.1084|
0002fa  f7fffffe          BL       USART_ITConfig
                  |L1.766|
;;;212        }
;;;213        if( (USART_IT & USART_IT_RXNE) == USART_IT_RXNE )
0002fe  f2405025          MOV      r0,#0x525
000302  4020              ANDS     r0,r0,r4
000304  f5a061a0          SUB      r1,r0,#0x500
000308  3925              SUBS     r1,r1,#0x25
00030a  d105              BNE      |L1.792|
;;;214        {
;;;215          USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); /* Enabling interrupts specified USART1 */
00030c  2201              MOVS     r2,#1
00030e  f2405125          MOV      r1,#0x525
000312  484a              LDR      r0,|L1.1084|
000314  f7fffffe          BL       USART_ITConfig
                  |L1.792|
;;;216        }
;;;217        if( (USART_IT & USART_IT_ORE_RX) == USART_IT_ORE_RX )
000318  f2403025          MOV      r0,#0x325
00031c  4020              ANDS     r0,r0,r4
00031e  f5a07140          SUB      r1,r0,#0x300
000322  3925              SUBS     r1,r1,#0x25
000324  d105              BNE      |L1.818|
;;;218        {
;;;219          USART_ITConfig(USART1, USART_IT_ORE_RX, ENABLE); /* Enabling interrupts specified USART1 */
000326  2201              MOVS     r2,#1
000328  f2403125          MOV      r1,#0x325
00032c  4843              LDR      r0,|L1.1084|
00032e  f7fffffe          BL       USART_ITConfig
                  |L1.818|
;;;220        }
;;;221        if( (USART_IT & USART_IT_IDLE) == USART_IT_IDLE )
000332  f2404024          MOV      r0,#0x424
000336  4020              ANDS     r0,r0,r4
000338  f5a06180          SUB      r1,r0,#0x400
00033c  3924              SUBS     r1,r1,#0x24
00033e  d105              BNE      |L1.844|
;;;222        {
;;;223          USART_ITConfig(USART1, USART_IT_IDLE, ENABLE); /* Enabling interrupts specified USART1 */
000340  2201              MOVS     r2,#1
000342  f2404124          MOV      r1,#0x424
000346  483d              LDR      r0,|L1.1084|
000348  f7fffffe          BL       USART_ITConfig
                  |L1.844|
;;;224        }
;;;225        if( (USART_IT & USART_IT_LBD) == USART_IT_LBD )
00034c  f6400046          MOV      r0,#0x846
000350  4020              ANDS     r0,r0,r4
000352  f5a06100          SUB      r1,r0,#0x800
000356  3946              SUBS     r1,r1,#0x46
000358  d105              BNE      |L1.870|
;;;226        {
;;;227          USART_ITConfig(USART1, USART_IT_LBD, ENABLE); /* Enabling interrupts specified USART1 */
00035a  2201              MOVS     r2,#1
00035c  f6400146          MOV      r1,#0x846
000360  4836              LDR      r0,|L1.1084|
000362  f7fffffe          BL       USART_ITConfig
                  |L1.870|
;;;228        }
;;;229        if( (USART_IT & USART_IT_CTS) == USART_IT_CTS )
000366  f640106a          MOV      r0,#0x96a
00036a  4020              ANDS     r0,r0,r4
00036c  f5a06110          SUB      r1,r0,#0x900
000370  396a              SUBS     r1,r1,#0x6a
000372  d107              BNE      |L1.900|
;;;230        {
;;;231          USART_ITConfig(USART1, USART_IT_CTS, ENABLE); /* Enabling interrupts specified USART1 */
000374  2201              MOVS     r2,#1
000376  e000              B        |L1.890|
                  |L1.888|
000378  e033              B        |L1.994|
                  |L1.890|
00037a  f640116a          MOV      r1,#0x96a
00037e  482f              LDR      r0,|L1.1084|
000380  f7fffffe          BL       USART_ITConfig
                  |L1.900|
;;;232        }
;;;233        if( (USART_IT & USART_IT_ERR) == USART_IT_ERR )
000384  f0040060          AND      r0,r4,#0x60
000388  2860              CMP      r0,#0x60
00038a  d104              BNE      |L1.918|
;;;234        {
;;;235          USART_ITConfig(USART1, USART_IT_ERR, ENABLE); /* Enabling interrupts specified USART1 */
00038c  2201              MOVS     r2,#1
00038e  2160              MOVS     r1,#0x60
000390  482a              LDR      r0,|L1.1084|
000392  f7fffffe          BL       USART_ITConfig
                  |L1.918|
;;;236        }
;;;237        if( (USART_IT & USART_IT_ORE_ER) == USART_IT_ORE_ER )
000396  f4047058          AND      r0,r4,#0x360
00039a  f5b07f58          CMP      r0,#0x360
00039e  d105              BNE      |L1.940|
;;;238        {
;;;239          USART_ITConfig(USART1, USART_IT_ORE_ER, ENABLE); /* Enabling interrupts specified USART1 */
0003a0  2201              MOVS     r2,#1
0003a2  f44f7158          MOV      r1,#0x360
0003a6  4825              LDR      r0,|L1.1084|
0003a8  f7fffffe          BL       USART_ITConfig
                  |L1.940|
;;;240        }
;;;241        if( (USART_IT & USART_IT_NE) == USART_IT_NE )
0003ac  f4047018          AND      r0,r4,#0x260
0003b0  f5b07f18          CMP      r0,#0x260
0003b4  d105              BNE      |L1.962|
;;;242        {
;;;243          USART_ITConfig(USART1, USART_IT_NE, ENABLE); /* Enabling interrupts specified USART1 */
0003b6  2201              MOVS     r2,#1
0003b8  f44f7118          MOV      r1,#0x260
0003bc  481f              LDR      r0,|L1.1084|
0003be  f7fffffe          BL       USART_ITConfig
                  |L1.962|
;;;244        }
;;;245        if( (USART_IT & USART_IT_FE) == USART_IT_FE )
0003c2  f40470b0          AND      r0,r4,#0x160
0003c6  f5b07fb0          CMP      r0,#0x160
0003ca  d105              BNE      |L1.984|
;;;246        {
;;;247          USART_ITConfig(USART1, USART_IT_FE, ENABLE); /* Enabling interrupts specified USART1 */
0003cc  2201              MOVS     r2,#1
0003ce  f44f71b0          MOV      r1,#0x160
0003d2  481a              LDR      r0,|L1.1084|
0003d4  f7fffffe          BL       USART_ITConfig
                  |L1.984|
;;;248        }
;;;249    
;;;250        USART_Cmd(USART1, ENABLE);
0003d8  2101              MOVS     r1,#1
0003da  4818              LDR      r0,|L1.1084|
0003dc  f7fffffe          BL       USART_Cmd
0003e0  e39b              B        |L1.2842|
                  |L1.994|
;;;251      }
;;;252    
;;;253      else if(USART_x == USART_2)
0003e2  2e02              CMP      r6,#2
0003e4  d17d              BNE      |L1.1250|
;;;254      {
;;;255        USART_Init(USART2, &USART_InitStructure);
0003e6  4669              MOV      r1,sp
0003e8  4815              LDR      r0,|L1.1088|
0003ea  f7fffffe          BL       USART_Init
;;;256    
;;;257        if(USART_DMAReq == USART_DMAReq_Tx)
0003ee  2d80              CMP      r5,#0x80
0003f0  d104              BNE      |L1.1020|
;;;258          USART_DMACmd(USART2, USART_DMAReq_Tx, ENABLE);  /* Enabling the DMA request specified USART2 */
0003f2  2201              MOVS     r2,#1
0003f4  2180              MOVS     r1,#0x80
0003f6  4812              LDR      r0,|L1.1088|
0003f8  f7fffffe          BL       USART_DMACmd
                  |L1.1020|
;;;259        if(USART_DMAReq == USART_DMAReq_Rx)
0003fc  2d40              CMP      r5,#0x40
0003fe  d104              BNE      |L1.1034|
;;;260          USART_DMACmd(USART2, USART_DMAReq_Rx, ENABLE);  /* Enabling the DMA request specified USART2 */
000400  2201              MOVS     r2,#1
000402  2140              MOVS     r1,#0x40
000404  480e              LDR      r0,|L1.1088|
000406  f7fffffe          BL       USART_DMACmd
                  |L1.1034|
;;;261        if(USART_DMAReq == (USART_DMAReq_Tx|USART_DMAReq_Rx))
00040a  2dc0              CMP      r5,#0xc0
00040c  d109              BNE      |L1.1058|
;;;262        {
;;;263          USART_DMACmd(USART2, USART_DMAReq_Tx, ENABLE);  /* Enabling the DMA request specified USART2 */
00040e  2201              MOVS     r2,#1
000410  2180              MOVS     r1,#0x80
000412  480b              LDR      r0,|L1.1088|
000414  f7fffffe          BL       USART_DMACmd
;;;264          USART_DMACmd(USART2, USART_DMAReq_Rx, ENABLE);  /* Enabling the DMA request specified USART2 */
000418  2201              MOVS     r2,#1
00041a  2140              MOVS     r1,#0x40
00041c  4808              LDR      r0,|L1.1088|
00041e  f7fffffe          BL       USART_DMACmd
                  |L1.1058|
;;;265        }
;;;266    
;;;267        if( (USART_IT & USART_IT_PE) == USART_IT_PE )
000422  f0040028          AND      r0,r4,#0x28
000426  2828              CMP      r0,#0x28
000428  d111              BNE      |L1.1102|
;;;268        {
;;;269          USART_ITConfig(USART2, USART_IT_PE, ENABLE); /* Enabling interrupts specified USART2 */
00042a  e00b              B        |L1.1092|
                  |L1.1068|
                          DCD      0x40020000
                  |L1.1072|
                          DCD      0x40020400
                  |L1.1076|
                          DCD      0x40020800
                  |L1.1080|
                          DCD      0x40020c00
                  |L1.1084|
                          DCD      0x40011000
                  |L1.1088|
                          DCD      0x40004400
                  |L1.1092|
000444  2201              MOVS     r2,#1
000446  2128              MOVS     r1,#0x28
000448  48fc              LDR      r0,|L1.2108|
00044a  f7fffffe          BL       USART_ITConfig
                  |L1.1102|
;;;270        }
;;;271        if( (USART_IT & USART_IT_TXE) == USART_IT_TXE )
00044e  f2407027          MOV      r0,#0x727
000452  4020              ANDS     r0,r0,r4
000454  f5a061e0          SUB      r1,r0,#0x700
000458  3927              SUBS     r1,r1,#0x27
00045a  d105              BNE      |L1.1128|
;;;272        {
;;;273          USART_ITConfig(USART2, USART_IT_TXE, ENABLE); /* Enabling interrupts specified USART2 */
00045c  2201              MOVS     r2,#1
00045e  f2407127          MOV      r1,#0x727
000462  48f6              LDR      r0,|L1.2108|
000464  f7fffffe          BL       USART_ITConfig
                  |L1.1128|
;;;274        }
;;;275        if( (USART_IT & USART_IT_TC) == USART_IT_TC )
000468  f2406026          MOV      r0,#0x626
00046c  4020              ANDS     r0,r0,r4
00046e  f5a061c0          SUB      r1,r0,#0x600
000472  3926              SUBS     r1,r1,#0x26
000474  d105              BNE      |L1.1154|
;;;276        {
;;;277          USART_ITConfig(USART2, USART_IT_TC, ENABLE); /* Enabling interrupts specified USART2 */
000476  2201              MOVS     r2,#1
000478  f2406126          MOV      r1,#0x626
00047c  48ef              LDR      r0,|L1.2108|
00047e  f7fffffe          BL       USART_ITConfig
                  |L1.1154|
;;;278        }
;;;279        if( (USART_IT & USART_IT_RXNE) == USART_IT_RXNE )
000482  f2405025          MOV      r0,#0x525
000486  4020              ANDS     r0,r0,r4
000488  f5a061a0          SUB      r1,r0,#0x500
00048c  3925              SUBS     r1,r1,#0x25
00048e  d105              BNE      |L1.1180|
;;;280        {
;;;281          USART_ITConfig(USART2, USART_IT_RXNE, ENABLE); /* Enabling interrupts specified USART2 */
000490  2201              MOVS     r2,#1
000492  f2405125          MOV      r1,#0x525
000496  48e9              LDR      r0,|L1.2108|
000498  f7fffffe          BL       USART_ITConfig
                  |L1.1180|
;;;282        }
;;;283        if( (USART_IT & USART_IT_ORE_RX) == USART_IT_ORE_RX )
00049c  f2403025          MOV      r0,#0x325
0004a0  4020              ANDS     r0,r0,r4
0004a2  f5a07140          SUB      r1,r0,#0x300
0004a6  3925              SUBS     r1,r1,#0x25
0004a8  d105              BNE      |L1.1206|
;;;284        {
;;;285          USART_ITConfig(USART2, USART_IT_ORE_RX, ENABLE); /* Enabling interrupts specified USART2 */
0004aa  2201              MOVS     r2,#1
0004ac  f2403125          MOV      r1,#0x325
0004b0  48e2              LDR      r0,|L1.2108|
0004b2  f7fffffe          BL       USART_ITConfig
                  |L1.1206|
;;;286        }
;;;287        if( (USART_IT & USART_IT_IDLE) == USART_IT_IDLE )
0004b6  f2404024          MOV      r0,#0x424
0004ba  4020              ANDS     r0,r0,r4
0004bc  f5a06180          SUB      r1,r0,#0x400
0004c0  3924              SUBS     r1,r1,#0x24
0004c2  d105              BNE      |L1.1232|
;;;288        {
;;;289          USART_ITConfig(USART2, USART_IT_IDLE, ENABLE); /* Enabling interrupts specified USART2 */
0004c4  2201              MOVS     r2,#1
0004c6  f2404124          MOV      r1,#0x424
0004ca  48dc              LDR      r0,|L1.2108|
0004cc  f7fffffe          BL       USART_ITConfig
                  |L1.1232|
;;;290        }
;;;291        if( (USART_IT & USART_IT_LBD) == USART_IT_LBD )
0004d0  f6400046          MOV      r0,#0x846
0004d4  4020              ANDS     r0,r0,r4
0004d6  f5a06100          SUB      r1,r0,#0x800
0004da  3946              SUBS     r1,r1,#0x46
0004dc  d107              BNE      |L1.1262|
;;;292        {
;;;293          USART_ITConfig(USART2, USART_IT_LBD, ENABLE); /* Enabling interrupts specified USART2 */
0004de  2201              MOVS     r2,#1
0004e0  e000              B        |L1.1252|
                  |L1.1250|
0004e2  e040              B        |L1.1382|
                  |L1.1252|
0004e4  f6400146          MOV      r1,#0x846
0004e8  48d4              LDR      r0,|L1.2108|
0004ea  f7fffffe          BL       USART_ITConfig
                  |L1.1262|
;;;294        }
;;;295        if( (USART_IT & USART_IT_CTS) == USART_IT_CTS )
0004ee  f640106a          MOV      r0,#0x96a
0004f2  4020              ANDS     r0,r0,r4
0004f4  f5a06110          SUB      r1,r0,#0x900
0004f8  396a              SUBS     r1,r1,#0x6a
0004fa  d105              BNE      |L1.1288|
;;;296        {
;;;297          USART_ITConfig(USART2, USART_IT_CTS, ENABLE); /* Enabling interrupts specified USART2 */
0004fc  2201              MOVS     r2,#1
0004fe  f640116a          MOV      r1,#0x96a
000502  48ce              LDR      r0,|L1.2108|
000504  f7fffffe          BL       USART_ITConfig
                  |L1.1288|
;;;298        }
;;;299        if( (USART_IT & USART_IT_ERR) == USART_IT_ERR )
000508  f0040060          AND      r0,r4,#0x60
00050c  2860              CMP      r0,#0x60
00050e  d104              BNE      |L1.1306|
;;;300        {
;;;301          USART_ITConfig(USART2, USART_IT_ERR, ENABLE); /* Enabling interrupts specified USART2 */
000510  2201              MOVS     r2,#1
000512  2160              MOVS     r1,#0x60
000514  48c9              LDR      r0,|L1.2108|
000516  f7fffffe          BL       USART_ITConfig
                  |L1.1306|
;;;302        }
;;;303        if( (USART_IT & USART_IT_ORE_ER) == USART_IT_ORE_ER )
00051a  f4047058          AND      r0,r4,#0x360
00051e  f5b07f58          CMP      r0,#0x360
000522  d105              BNE      |L1.1328|
;;;304        {
;;;305          USART_ITConfig(USART2, USART_IT_ORE_ER, ENABLE); /* Enabling interrupts specified USART2 */
000524  2201              MOVS     r2,#1
000526  f44f7158          MOV      r1,#0x360
00052a  48c4              LDR      r0,|L1.2108|
00052c  f7fffffe          BL       USART_ITConfig
                  |L1.1328|
;;;306        }
;;;307        if( (USART_IT & USART_IT_NE) == USART_IT_NE )
000530  f4047018          AND      r0,r4,#0x260
000534  f5b07f18          CMP      r0,#0x260
000538  d105              BNE      |L1.1350|
;;;308        {
;;;309          USART_ITConfig(USART2, USART_IT_NE, ENABLE); /* Enabling interrupts specified USART2 */
00053a  2201              MOVS     r2,#1
00053c  f44f7118          MOV      r1,#0x260
000540  48be              LDR      r0,|L1.2108|
000542  f7fffffe          BL       USART_ITConfig
                  |L1.1350|
;;;310        }
;;;311        if( (USART_IT & USART_IT_FE) == USART_IT_FE )
000546  f40470b0          AND      r0,r4,#0x160
00054a  f5b07fb0          CMP      r0,#0x160
00054e  d105              BNE      |L1.1372|
;;;312        {
;;;313          USART_ITConfig(USART2, USART_IT_FE, ENABLE); /* Enabling interrupts specified USART2 */
000550  2201              MOVS     r2,#1
000552  f44f71b0          MOV      r1,#0x160
000556  48b9              LDR      r0,|L1.2108|
000558  f7fffffe          BL       USART_ITConfig
                  |L1.1372|
;;;314        }
;;;315    
;;;316        USART_Cmd(USART2, ENABLE);
00055c  2101              MOVS     r1,#1
00055e  48b7              LDR      r0,|L1.2108|
000560  f7fffffe          BL       USART_Cmd
000564  e2d9              B        |L1.2842|
                  |L1.1382|
;;;317      }
;;;318    
;;;319      else if(USART_x == USART_3)
000566  2e03              CMP      r6,#3
000568  d17d              BNE      |L1.1638|
;;;320      {
;;;321        USART_Init(USART3, &USART_InitStructure);
00056a  4669              MOV      r1,sp
00056c  48b4              LDR      r0,|L1.2112|
00056e  f7fffffe          BL       USART_Init
;;;322    
;;;323        if(USART_DMAReq == USART_DMAReq_Tx)
000572  2d80              CMP      r5,#0x80
000574  d104              BNE      |L1.1408|
;;;324          USART_DMACmd(USART3, USART_DMAReq_Tx, ENABLE);  /* Enabling the DMA request specified USART3 */
000576  2201              MOVS     r2,#1
000578  2180              MOVS     r1,#0x80
00057a  48b1              LDR      r0,|L1.2112|
00057c  f7fffffe          BL       USART_DMACmd
                  |L1.1408|
;;;325        if(USART_DMAReq == USART_DMAReq_Rx)
000580  2d40              CMP      r5,#0x40
000582  d104              BNE      |L1.1422|
;;;326          USART_DMACmd(USART3, USART_DMAReq_Rx, ENABLE);  /* Enabling the DMA request specified USART3 */
000584  2201              MOVS     r2,#1
000586  2140              MOVS     r1,#0x40
000588  48ad              LDR      r0,|L1.2112|
00058a  f7fffffe          BL       USART_DMACmd
                  |L1.1422|
;;;327        if(USART_DMAReq == (USART_DMAReq_Tx|USART_DMAReq_Rx))
00058e  2dc0              CMP      r5,#0xc0
000590  d109              BNE      |L1.1446|
;;;328        {
;;;329          USART_DMACmd(USART3, USART_DMAReq_Tx, ENABLE);  /* Enabling the DMA request specified USART3 */
000592  2201              MOVS     r2,#1
000594  2180              MOVS     r1,#0x80
000596  48aa              LDR      r0,|L1.2112|
000598  f7fffffe          BL       USART_DMACmd
;;;330          USART_DMACmd(USART3, USART_DMAReq_Rx, ENABLE);  /* Enabling the DMA request specified USART3 */
00059c  2201              MOVS     r2,#1
00059e  2140              MOVS     r1,#0x40
0005a0  48a7              LDR      r0,|L1.2112|
0005a2  f7fffffe          BL       USART_DMACmd
                  |L1.1446|
;;;331        }
;;;332    
;;;333        if( (USART_IT & USART_IT_PE) == USART_IT_PE )
0005a6  f0040028          AND      r0,r4,#0x28
0005aa  2828              CMP      r0,#0x28
0005ac  d104              BNE      |L1.1464|
;;;334        {
;;;335          USART_ITConfig(USART3, USART_IT_PE, ENABLE); /* Enabling interrupts specified USART3 */
0005ae  2201              MOVS     r2,#1
0005b0  2128              MOVS     r1,#0x28
0005b2  48a3              LDR      r0,|L1.2112|
0005b4  f7fffffe          BL       USART_ITConfig
                  |L1.1464|
;;;336        }
;;;337        if( (USART_IT & USART_IT_TXE) == USART_IT_TXE )
0005b8  f2407027          MOV      r0,#0x727
0005bc  4020              ANDS     r0,r0,r4
0005be  f5a061e0          SUB      r1,r0,#0x700
0005c2  3927              SUBS     r1,r1,#0x27
0005c4  d105              BNE      |L1.1490|
;;;338        {
;;;339          USART_ITConfig(USART3, USART_IT_TXE, ENABLE); /* Enabling interrupts specified USART3 */
0005c6  2201              MOVS     r2,#1
0005c8  f2407127          MOV      r1,#0x727
0005cc  489c              LDR      r0,|L1.2112|
0005ce  f7fffffe          BL       USART_ITConfig
                  |L1.1490|
;;;340        }
;;;341        if( (USART_IT & USART_IT_TC) == USART_IT_TC )
0005d2  f2406026          MOV      r0,#0x626
0005d6  4020              ANDS     r0,r0,r4
0005d8  f5a061c0          SUB      r1,r0,#0x600
0005dc  3926              SUBS     r1,r1,#0x26
0005de  d105              BNE      |L1.1516|
;;;342        {
;;;343          USART_ITConfig(USART3, USART_IT_TC, ENABLE); /* Enabling interrupts specified USART3 */
0005e0  2201              MOVS     r2,#1
0005e2  f2406126          MOV      r1,#0x626
0005e6  4896              LDR      r0,|L1.2112|
0005e8  f7fffffe          BL       USART_ITConfig
                  |L1.1516|
;;;344        }
;;;345        if( (USART_IT & USART_IT_RXNE) == USART_IT_RXNE )
0005ec  f2405025          MOV      r0,#0x525
0005f0  4020              ANDS     r0,r0,r4
0005f2  f5a061a0          SUB      r1,r0,#0x500
0005f6  3925              SUBS     r1,r1,#0x25
0005f8  d105              BNE      |L1.1542|
;;;346        {
;;;347          USART_ITConfig(USART3, USART_IT_RXNE, ENABLE); /* Enabling interrupts specified USART3 */
0005fa  2201              MOVS     r2,#1
0005fc  f2405125          MOV      r1,#0x525
000600  488f              LDR      r0,|L1.2112|
000602  f7fffffe          BL       USART_ITConfig
                  |L1.1542|
;;;348        }
;;;349        if( (USART_IT & USART_IT_ORE_RX) == USART_IT_ORE_RX )
000606  f2403025          MOV      r0,#0x325
00060a  4020              ANDS     r0,r0,r4
00060c  f5a07140          SUB      r1,r0,#0x300
000610  3925              SUBS     r1,r1,#0x25
000612  d105              BNE      |L1.1568|
;;;350        {
;;;351          USART_ITConfig(USART3, USART_IT_ORE_RX, ENABLE); /* Enabling interrupts specified USART3 */
000614  2201              MOVS     r2,#1
000616  f2403125          MOV      r1,#0x325
00061a  4889              LDR      r0,|L1.2112|
00061c  f7fffffe          BL       USART_ITConfig
                  |L1.1568|
;;;352        }
;;;353        if( (USART_IT & USART_IT_IDLE) == USART_IT_IDLE )
000620  f2404024          MOV      r0,#0x424
000624  4020              ANDS     r0,r0,r4
000626  f5a06180          SUB      r1,r0,#0x400
00062a  3924              SUBS     r1,r1,#0x24
00062c  d105              BNE      |L1.1594|
;;;354        {
;;;355          USART_ITConfig(USART3, USART_IT_IDLE, ENABLE); /* Enabling interrupts specified USART3 */
00062e  2201              MOVS     r2,#1
000630  f2404124          MOV      r1,#0x424
000634  4882              LDR      r0,|L1.2112|
000636  f7fffffe          BL       USART_ITConfig
                  |L1.1594|
;;;356        }
;;;357        if( (USART_IT & USART_IT_LBD) == USART_IT_LBD )
00063a  f6400046          MOV      r0,#0x846
00063e  4020              ANDS     r0,r0,r4
000640  f5a06100          SUB      r1,r0,#0x800
000644  3946              SUBS     r1,r1,#0x46
000646  d105              BNE      |L1.1620|
;;;358        {
;;;359          USART_ITConfig(USART3, USART_IT_LBD, ENABLE); /* Enabling interrupts specified USART3 */
000648  2201              MOVS     r2,#1
00064a  f6400146          MOV      r1,#0x846
00064e  487c              LDR      r0,|L1.2112|
000650  f7fffffe          BL       USART_ITConfig
                  |L1.1620|
;;;360        }
;;;361        if( (USART_IT & USART_IT_CTS) == USART_IT_CTS )
000654  f640106a          MOV      r0,#0x96a
000658  4020              ANDS     r0,r0,r4
00065a  f5a06110          SUB      r1,r0,#0x900
00065e  396a              SUBS     r1,r1,#0x6a
000660  d107              BNE      |L1.1650|
;;;362        {
;;;363          USART_ITConfig(USART3, USART_IT_CTS, ENABLE); /* Enabling interrupts specified USART3 */
000662  2201              MOVS     r2,#1
000664  e000              B        |L1.1640|
                  |L1.1638|
000666  e033              B        |L1.1744|
                  |L1.1640|
000668  f640116a          MOV      r1,#0x96a
00066c  4874              LDR      r0,|L1.2112|
00066e  f7fffffe          BL       USART_ITConfig
                  |L1.1650|
;;;364        }
;;;365        if( (USART_IT & USART_IT_ERR) == USART_IT_ERR )
000672  f0040060          AND      r0,r4,#0x60
000676  2860              CMP      r0,#0x60
000678  d104              BNE      |L1.1668|
;;;366        {
;;;367          USART_ITConfig(USART3, USART_IT_ERR, ENABLE); /* Enabling interrupts specified USART3 */
00067a  2201              MOVS     r2,#1
00067c  2160              MOVS     r1,#0x60
00067e  4870              LDR      r0,|L1.2112|
000680  f7fffffe          BL       USART_ITConfig
                  |L1.1668|
;;;368        }
;;;369        if( (USART_IT & USART_IT_ORE_ER) == USART_IT_ORE_ER )
000684  f4047058          AND      r0,r4,#0x360
000688  f5b07f58          CMP      r0,#0x360
00068c  d105              BNE      |L1.1690|
;;;370        {
;;;371          USART_ITConfig(USART3, USART_IT_ORE_ER, ENABLE); /* Enabling interrupts specified USART3 */
00068e  2201              MOVS     r2,#1
000690  f44f7158          MOV      r1,#0x360
000694  486a              LDR      r0,|L1.2112|
000696  f7fffffe          BL       USART_ITConfig
                  |L1.1690|
;;;372        }
;;;373        if( (USART_IT & USART_IT_NE) == USART_IT_NE )
00069a  f4047018          AND      r0,r4,#0x260
00069e  f5b07f18          CMP      r0,#0x260
0006a2  d105              BNE      |L1.1712|
;;;374        {
;;;375          USART_ITConfig(USART3, USART_IT_NE, ENABLE); /* Enabling interrupts specified USART3 */
0006a4  2201              MOVS     r2,#1
0006a6  f44f7118          MOV      r1,#0x260
0006aa  4865              LDR      r0,|L1.2112|
0006ac  f7fffffe          BL       USART_ITConfig
                  |L1.1712|
;;;376        }
;;;377        if( (USART_IT & USART_IT_FE) == USART_IT_FE )
0006b0  f40470b0          AND      r0,r4,#0x160
0006b4  f5b07fb0          CMP      r0,#0x160
0006b8  d105              BNE      |L1.1734|
;;;378        {
;;;379          USART_ITConfig(USART3, USART_IT_FE, ENABLE); /* Enabling interrupts specified USART3 */
0006ba  2201              MOVS     r2,#1
0006bc  f44f71b0          MOV      r1,#0x160
0006c0  485f              LDR      r0,|L1.2112|
0006c2  f7fffffe          BL       USART_ITConfig
                  |L1.1734|
;;;380        }
;;;381    
;;;382        USART_Cmd(USART3, ENABLE);
0006c6  2101              MOVS     r1,#1
0006c8  485d              LDR      r0,|L1.2112|
0006ca  f7fffffe          BL       USART_Cmd
0006ce  e224              B        |L1.2842|
                  |L1.1744|
;;;383      }
;;;384    
;;;385      else if(USART_x == USART_4)
0006d0  2e04              CMP      r6,#4
0006d2  d17d              BNE      |L1.2000|
;;;386      {
;;;387        USART_Init(UART4, &USART_InitStructure);
0006d4  4669              MOV      r1,sp
0006d6  485b              LDR      r0,|L1.2116|
0006d8  f7fffffe          BL       USART_Init
;;;388    
;;;389        if(USART_DMAReq == USART_DMAReq_Tx)
0006dc  2d80              CMP      r5,#0x80
0006de  d104              BNE      |L1.1770|
;;;390          USART_DMACmd(UART4, USART_DMAReq_Tx, ENABLE); /* Enabling the DMA request specified USART4 */
0006e0  2201              MOVS     r2,#1
0006e2  2180              MOVS     r1,#0x80
0006e4  4857              LDR      r0,|L1.2116|
0006e6  f7fffffe          BL       USART_DMACmd
                  |L1.1770|
;;;391        if(USART_DMAReq == USART_DMAReq_Rx)
0006ea  2d40              CMP      r5,#0x40
0006ec  d104              BNE      |L1.1784|
;;;392          USART_DMACmd(UART4, USART_DMAReq_Rx, ENABLE); /* Enabling the DMA request specified USART4 */
0006ee  2201              MOVS     r2,#1
0006f0  2140              MOVS     r1,#0x40
0006f2  4854              LDR      r0,|L1.2116|
0006f4  f7fffffe          BL       USART_DMACmd
                  |L1.1784|
;;;393        if(USART_DMAReq == (USART_DMAReq_Tx|USART_DMAReq_Rx))
0006f8  2dc0              CMP      r5,#0xc0
0006fa  d109              BNE      |L1.1808|
;;;394        {
;;;395          USART_DMACmd(UART4, USART_DMAReq_Tx, ENABLE); /* Enabling the DMA request specified USART4 */
0006fc  2201              MOVS     r2,#1
0006fe  2180              MOVS     r1,#0x80
000700  4850              LDR      r0,|L1.2116|
000702  f7fffffe          BL       USART_DMACmd
;;;396          USART_DMACmd(UART4, USART_DMAReq_Rx, ENABLE); /* Enabling the DMA request specified USART4 */
000706  2201              MOVS     r2,#1
000708  2140              MOVS     r1,#0x40
00070a  484e              LDR      r0,|L1.2116|
00070c  f7fffffe          BL       USART_DMACmd
                  |L1.1808|
;;;397        }
;;;398    
;;;399        if( (USART_IT & USART_IT_PE) == USART_IT_PE )
000710  f0040028          AND      r0,r4,#0x28
000714  2828              CMP      r0,#0x28
000716  d104              BNE      |L1.1826|
;;;400        {
;;;401          USART_ITConfig(UART4, USART_IT_PE, ENABLE); /* Enabling interrupts specified USART4 */
000718  2201              MOVS     r2,#1
00071a  2128              MOVS     r1,#0x28
00071c  4849              LDR      r0,|L1.2116|
00071e  f7fffffe          BL       USART_ITConfig
                  |L1.1826|
;;;402        }
;;;403        if( (USART_IT & USART_IT_TXE) == USART_IT_TXE )
000722  f2407027          MOV      r0,#0x727
000726  4020              ANDS     r0,r0,r4
000728  f5a061e0          SUB      r1,r0,#0x700
00072c  3927              SUBS     r1,r1,#0x27
00072e  d105              BNE      |L1.1852|
;;;404        {
;;;405          USART_ITConfig(UART4, USART_IT_TXE, ENABLE); /* Enabling interrupts specified USART4 */
000730  2201              MOVS     r2,#1
000732  f2407127          MOV      r1,#0x727
000736  4843              LDR      r0,|L1.2116|
000738  f7fffffe          BL       USART_ITConfig
                  |L1.1852|
;;;406        }
;;;407        if( (USART_IT & USART_IT_TC) == USART_IT_TC )
00073c  f2406026          MOV      r0,#0x626
000740  4020              ANDS     r0,r0,r4
000742  f5a061c0          SUB      r1,r0,#0x600
000746  3926              SUBS     r1,r1,#0x26
000748  d105              BNE      |L1.1878|
;;;408        {
;;;409          USART_ITConfig(UART4, USART_IT_TC, ENABLE); /* Enabling interrupts specified USART4 */
00074a  2201              MOVS     r2,#1
00074c  f2406126          MOV      r1,#0x626
000750  483c              LDR      r0,|L1.2116|
000752  f7fffffe          BL       USART_ITConfig
                  |L1.1878|
;;;410        }
;;;411        if( (USART_IT & USART_IT_RXNE) == USART_IT_RXNE )
000756  f2405025          MOV      r0,#0x525
00075a  4020              ANDS     r0,r0,r4
00075c  f5a061a0          SUB      r1,r0,#0x500
000760  3925              SUBS     r1,r1,#0x25
000762  d105              BNE      |L1.1904|
;;;412        {
;;;413          USART_ITConfig(UART4, USART_IT_RXNE, ENABLE); /* Enabling interrupts specified USART4 */
000764  2201              MOVS     r2,#1
000766  f2405125          MOV      r1,#0x525
00076a  4836              LDR      r0,|L1.2116|
00076c  f7fffffe          BL       USART_ITConfig
                  |L1.1904|
;;;414        }
;;;415        if( (USART_IT & USART_IT_ORE_RX) == USART_IT_ORE_RX )
000770  f2403025          MOV      r0,#0x325
000774  4020              ANDS     r0,r0,r4
000776  f5a07140          SUB      r1,r0,#0x300
00077a  3925              SUBS     r1,r1,#0x25
00077c  d105              BNE      |L1.1930|
;;;416        {
;;;417          USART_ITConfig(UART4, USART_IT_ORE_RX, ENABLE); /* Enabling interrupts specified USART4 */
00077e  2201              MOVS     r2,#1
000780  f2403125          MOV      r1,#0x325
000784  482f              LDR      r0,|L1.2116|
000786  f7fffffe          BL       USART_ITConfig
                  |L1.1930|
;;;418        }
;;;419        if( (USART_IT & USART_IT_IDLE) == USART_IT_IDLE )
00078a  f2404024          MOV      r0,#0x424
00078e  4020              ANDS     r0,r0,r4
000790  f5a06180          SUB      r1,r0,#0x400
000794  3924              SUBS     r1,r1,#0x24
000796  d105              BNE      |L1.1956|
;;;420        {
;;;421          USART_ITConfig(UART4, USART_IT_IDLE, ENABLE); /* Enabling interrupts specified USART4 */
000798  2201              MOVS     r2,#1
00079a  f2404124          MOV      r1,#0x424
00079e  4829              LDR      r0,|L1.2116|
0007a0  f7fffffe          BL       USART_ITConfig
                  |L1.1956|
;;;422        }
;;;423        if( (USART_IT & USART_IT_LBD) == USART_IT_LBD )
0007a4  f6400046          MOV      r0,#0x846
0007a8  4020              ANDS     r0,r0,r4
0007aa  f5a06100          SUB      r1,r0,#0x800
0007ae  3946              SUBS     r1,r1,#0x46
0007b0  d105              BNE      |L1.1982|
;;;424        {
;;;425          USART_ITConfig(UART4, USART_IT_LBD, ENABLE); /* Enabling interrupts specified USART4 */
0007b2  2201              MOVS     r2,#1
0007b4  f6400146          MOV      r1,#0x846
0007b8  4822              LDR      r0,|L1.2116|
0007ba  f7fffffe          BL       USART_ITConfig
                  |L1.1982|
;;;426        }
;;;427        if( (USART_IT & USART_IT_CTS) == USART_IT_CTS )
0007be  f640106a          MOV      r0,#0x96a
0007c2  4020              ANDS     r0,r0,r4
0007c4  f5a06110          SUB      r1,r0,#0x900
0007c8  396a              SUBS     r1,r1,#0x6a
0007ca  d107              BNE      |L1.2012|
;;;428        {
;;;429          USART_ITConfig(UART4, USART_IT_CTS, ENABLE); /* Enabling interrupts specified USART4 */
0007cc  2201              MOVS     r2,#1
0007ce  e000              B        |L1.2002|
                  |L1.2000|
0007d0  e03a              B        |L1.2120|
                  |L1.2002|
0007d2  f640116a          MOV      r1,#0x96a
0007d6  481b              LDR      r0,|L1.2116|
0007d8  f7fffffe          BL       USART_ITConfig
                  |L1.2012|
;;;430        }
;;;431        if( (USART_IT & USART_IT_ERR) == USART_IT_ERR )
0007dc  f0040060          AND      r0,r4,#0x60
0007e0  2860              CMP      r0,#0x60
0007e2  d104              BNE      |L1.2030|
;;;432        {
;;;433          USART_ITConfig(UART4, USART_IT_ERR, ENABLE); /* Enabling interrupts specified USART4 */
0007e4  2201              MOVS     r2,#1
0007e6  2160              MOVS     r1,#0x60
0007e8  4816              LDR      r0,|L1.2116|
0007ea  f7fffffe          BL       USART_ITConfig
                  |L1.2030|
;;;434        }
;;;435        if( (USART_IT & USART_IT_ORE_ER) == USART_IT_ORE_ER )
0007ee  f4047058          AND      r0,r4,#0x360
0007f2  f5b07f58          CMP      r0,#0x360
0007f6  d105              BNE      |L1.2052|
;;;436        {
;;;437          USART_ITConfig(UART4, USART_IT_ORE_ER, ENABLE); /* Enabling interrupts specified USART4 */
0007f8  2201              MOVS     r2,#1
0007fa  f44f7158          MOV      r1,#0x360
0007fe  4811              LDR      r0,|L1.2116|
000800  f7fffffe          BL       USART_ITConfig
                  |L1.2052|
;;;438        }
;;;439        if( (USART_IT & USART_IT_NE) == USART_IT_NE )
000804  f4047018          AND      r0,r4,#0x260
000808  f5b07f18          CMP      r0,#0x260
00080c  d105              BNE      |L1.2074|
;;;440        {
;;;441          USART_ITConfig(UART4, USART_IT_NE, ENABLE); /* Enabling interrupts specified USART4 */
00080e  2201              MOVS     r2,#1
000810  f44f7118          MOV      r1,#0x260
000814  480b              LDR      r0,|L1.2116|
000816  f7fffffe          BL       USART_ITConfig
                  |L1.2074|
;;;442        }
;;;443        if( (USART_IT & USART_IT_FE) == USART_IT_FE )
00081a  f40470b0          AND      r0,r4,#0x160
00081e  f5b07fb0          CMP      r0,#0x160
000822  d105              BNE      |L1.2096|
;;;444        {
;;;445          USART_ITConfig(UART4, USART_IT_FE, ENABLE); /* Enabling interrupts specified USART4 */
000824  2201              MOVS     r2,#1
000826  f44f71b0          MOV      r1,#0x160
00082a  4806              LDR      r0,|L1.2116|
00082c  f7fffffe          BL       USART_ITConfig
                  |L1.2096|
;;;446        }
;;;447    
;;;448        USART_Cmd(UART4, ENABLE);
000830  2101              MOVS     r1,#1
000832  4804              LDR      r0,|L1.2116|
000834  f7fffffe          BL       USART_Cmd
000838  e16f              B        |L1.2842|
00083a  0000              DCW      0x0000
                  |L1.2108|
                          DCD      0x40004400
                  |L1.2112|
                          DCD      0x40004800
                  |L1.2116|
                          DCD      0x40004c00
                  |L1.2120|
;;;449      }
;;;450      
;;;451      else if(USART_x == USART_5)
000848  2e05              CMP      r6,#5
00084a  d17d              BNE      |L1.2376|
;;;452      {
;;;453        USART_Init(UART5, &USART_InitStructure);
00084c  4669              MOV      r1,sp
00084e  48b4              LDR      r0,|L1.2848|
000850  f7fffffe          BL       USART_Init
;;;454    
;;;455        if(USART_DMAReq == USART_DMAReq_Tx)
000854  2d80              CMP      r5,#0x80
000856  d104              BNE      |L1.2146|
;;;456          USART_DMACmd(UART5, USART_DMAReq_Tx, ENABLE); /* Enabling the DMA request specified USART5 */
000858  2201              MOVS     r2,#1
00085a  2180              MOVS     r1,#0x80
00085c  48b0              LDR      r0,|L1.2848|
00085e  f7fffffe          BL       USART_DMACmd
                  |L1.2146|
;;;457        if(USART_DMAReq == USART_DMAReq_Rx)
000862  2d40              CMP      r5,#0x40
000864  d104              BNE      |L1.2160|
;;;458          USART_DMACmd(UART5, USART_DMAReq_Rx, ENABLE); /* Enabling the DMA request specified USART5 */
000866  2201              MOVS     r2,#1
000868  2140              MOVS     r1,#0x40
00086a  48ad              LDR      r0,|L1.2848|
00086c  f7fffffe          BL       USART_DMACmd
                  |L1.2160|
;;;459        if(USART_DMAReq == (USART_DMAReq_Tx|USART_DMAReq_Rx))
000870  2dc0              CMP      r5,#0xc0
000872  d109              BNE      |L1.2184|
;;;460        {
;;;461          USART_DMACmd(UART5, USART_DMAReq_Tx, ENABLE); /* Enabling the DMA request specified USART5 */
000874  2201              MOVS     r2,#1
000876  2180              MOVS     r1,#0x80
000878  48a9              LDR      r0,|L1.2848|
00087a  f7fffffe          BL       USART_DMACmd
;;;462          USART_DMACmd(UART5, USART_DMAReq_Rx, ENABLE); /* Enabling the DMA request specified USART5 */
00087e  2201              MOVS     r2,#1
000880  2140              MOVS     r1,#0x40
000882  48a7              LDR      r0,|L1.2848|
000884  f7fffffe          BL       USART_DMACmd
                  |L1.2184|
;;;463        }
;;;464    
;;;465        if( (USART_IT & USART_IT_PE) == USART_IT_PE )
000888  f0040028          AND      r0,r4,#0x28
00088c  2828              CMP      r0,#0x28
00088e  d104              BNE      |L1.2202|
;;;466        {
;;;467          USART_ITConfig(UART5, USART_IT_PE, ENABLE); /* Enabling interrupts specified USART5 */
000890  2201              MOVS     r2,#1
000892  2128              MOVS     r1,#0x28
000894  48a2              LDR      r0,|L1.2848|
000896  f7fffffe          BL       USART_ITConfig
                  |L1.2202|
;;;468        }
;;;469        if( (USART_IT & USART_IT_TXE) == USART_IT_TXE )
00089a  f2407027          MOV      r0,#0x727
00089e  4020              ANDS     r0,r0,r4
0008a0  f5a061e0          SUB      r1,r0,#0x700
0008a4  3927              SUBS     r1,r1,#0x27
0008a6  d105              BNE      |L1.2228|
;;;470        {
;;;471          USART_ITConfig(UART5, USART_IT_TXE, ENABLE); /* Enabling interrupts specified USART5 */
0008a8  2201              MOVS     r2,#1
0008aa  f2407127          MOV      r1,#0x727
0008ae  489c              LDR      r0,|L1.2848|
0008b0  f7fffffe          BL       USART_ITConfig
                  |L1.2228|
;;;472        }
;;;473        if( (USART_IT & USART_IT_TC) == USART_IT_TC )
0008b4  f2406026          MOV      r0,#0x626
0008b8  4020              ANDS     r0,r0,r4
0008ba  f5a061c0          SUB      r1,r0,#0x600
0008be  3926              SUBS     r1,r1,#0x26
0008c0  d105              BNE      |L1.2254|
;;;474        {
;;;475          USART_ITConfig(UART5, USART_IT_TC, ENABLE); /* Enabling interrupts specified USART5 */
0008c2  2201              MOVS     r2,#1
0008c4  f2406126          MOV      r1,#0x626
0008c8  4895              LDR      r0,|L1.2848|
0008ca  f7fffffe          BL       USART_ITConfig
                  |L1.2254|
;;;476        }
;;;477        if( (USART_IT & USART_IT_RXNE) == USART_IT_RXNE )
0008ce  f2405025          MOV      r0,#0x525
0008d2  4020              ANDS     r0,r0,r4
0008d4  f5a061a0          SUB      r1,r0,#0x500
0008d8  3925              SUBS     r1,r1,#0x25
0008da  d105              BNE      |L1.2280|
;;;478        {
;;;479          USART_ITConfig(UART5, USART_IT_RXNE, ENABLE); /* Enabling interrupts specified USART5 */
0008dc  2201              MOVS     r2,#1
0008de  f2405125          MOV      r1,#0x525
0008e2  488f              LDR      r0,|L1.2848|
0008e4  f7fffffe          BL       USART_ITConfig
                  |L1.2280|
;;;480        }
;;;481        if( (USART_IT & USART_IT_ORE_RX) == USART_IT_ORE_RX )
0008e8  f2403025          MOV      r0,#0x325
0008ec  4020              ANDS     r0,r0,r4
0008ee  f5a07140          SUB      r1,r0,#0x300
0008f2  3925              SUBS     r1,r1,#0x25
0008f4  d105              BNE      |L1.2306|
;;;482        {
;;;483          USART_ITConfig(UART5, USART_IT_ORE_RX, ENABLE); /* Enabling interrupts specified USART5 */
0008f6  2201              MOVS     r2,#1
0008f8  f2403125          MOV      r1,#0x325
0008fc  4888              LDR      r0,|L1.2848|
0008fe  f7fffffe          BL       USART_ITConfig
                  |L1.2306|
;;;484        }
;;;485        if( (USART_IT & USART_IT_IDLE) == USART_IT_IDLE )
000902  f2404024          MOV      r0,#0x424
000906  4020              ANDS     r0,r0,r4
000908  f5a06180          SUB      r1,r0,#0x400
00090c  3924              SUBS     r1,r1,#0x24
00090e  d105              BNE      |L1.2332|
;;;486        {
;;;487          USART_ITConfig(UART5, USART_IT_IDLE, ENABLE); /* Enabling interrupts specified USART5 */
000910  2201              MOVS     r2,#1
000912  f2404124          MOV      r1,#0x424
000916  4882              LDR      r0,|L1.2848|
000918  f7fffffe          BL       USART_ITConfig
                  |L1.2332|
;;;488        }
;;;489        if( (USART_IT & USART_IT_LBD) == USART_IT_LBD )
00091c  f6400046          MOV      r0,#0x846
000920  4020              ANDS     r0,r0,r4
000922  f5a06100          SUB      r1,r0,#0x800
000926  3946              SUBS     r1,r1,#0x46
000928  d105              BNE      |L1.2358|
;;;490        {
;;;491          USART_ITConfig(UART5, USART_IT_LBD, ENABLE); /* Enabling interrupts specified USART5 */
00092a  2201              MOVS     r2,#1
00092c  f6400146          MOV      r1,#0x846
000930  487b              LDR      r0,|L1.2848|
000932  f7fffffe          BL       USART_ITConfig
                  |L1.2358|
;;;492        }
;;;493        if( (USART_IT & USART_IT_CTS) == USART_IT_CTS )
000936  f640106a          MOV      r0,#0x96a
00093a  4020              ANDS     r0,r0,r4
00093c  f5a06110          SUB      r1,r0,#0x900
000940  396a              SUBS     r1,r1,#0x6a
000942  d107              BNE      |L1.2388|
;;;494        {
;;;495          USART_ITConfig(UART5, USART_IT_CTS, ENABLE); /* Enabling interrupts specified USART5 */
000944  2201              MOVS     r2,#1
000946  e000              B        |L1.2378|
                  |L1.2376|
000948  e033              B        |L1.2482|
                  |L1.2378|
00094a  f640116a          MOV      r1,#0x96a
00094e  4874              LDR      r0,|L1.2848|
000950  f7fffffe          BL       USART_ITConfig
                  |L1.2388|
;;;496        }
;;;497        if( (USART_IT & USART_IT_ERR) == USART_IT_ERR )
000954  f0040060          AND      r0,r4,#0x60
000958  2860              CMP      r0,#0x60
00095a  d104              BNE      |L1.2406|
;;;498        {
;;;499          USART_ITConfig(UART5, USART_IT_ERR, ENABLE); /* Enabling interrupts specified USART5 */
00095c  2201              MOVS     r2,#1
00095e  2160              MOVS     r1,#0x60
000960  486f              LDR      r0,|L1.2848|
000962  f7fffffe          BL       USART_ITConfig
                  |L1.2406|
;;;500        }
;;;501        if( (USART_IT & USART_IT_ORE_ER) == USART_IT_ORE_ER )
000966  f4047058          AND      r0,r4,#0x360
00096a  f5b07f58          CMP      r0,#0x360
00096e  d105              BNE      |L1.2428|
;;;502        {
;;;503          USART_ITConfig(UART5, USART_IT_ORE_ER, ENABLE); /* Enabling interrupts specified USART5 */
000970  2201              MOVS     r2,#1
000972  f44f7158          MOV      r1,#0x360
000976  486a              LDR      r0,|L1.2848|
000978  f7fffffe          BL       USART_ITConfig
                  |L1.2428|
;;;504        }
;;;505        if( (USART_IT & USART_IT_NE) == USART_IT_NE )
00097c  f4047018          AND      r0,r4,#0x260
000980  f5b07f18          CMP      r0,#0x260
000984  d105              BNE      |L1.2450|
;;;506        {
;;;507          USART_ITConfig(UART5, USART_IT_NE, ENABLE); /* Enabling interrupts specified USART5 */
000986  2201              MOVS     r2,#1
000988  f44f7118          MOV      r1,#0x260
00098c  4864              LDR      r0,|L1.2848|
00098e  f7fffffe          BL       USART_ITConfig
                  |L1.2450|
;;;508        }
;;;509        if( (USART_IT & USART_IT_FE) == USART_IT_FE )
000992  f40470b0          AND      r0,r4,#0x160
000996  f5b07fb0          CMP      r0,#0x160
00099a  d105              BNE      |L1.2472|
;;;510        {
;;;511          USART_ITConfig(UART5, USART_IT_FE, ENABLE); /* Enabling interrupts specified USART5 */
00099c  2201              MOVS     r2,#1
00099e  f44f71b0          MOV      r1,#0x160
0009a2  485f              LDR      r0,|L1.2848|
0009a4  f7fffffe          BL       USART_ITConfig
                  |L1.2472|
;;;512        }
;;;513    
;;;514        USART_Cmd(UART5, ENABLE);
0009a8  2101              MOVS     r1,#1
0009aa  485d              LDR      r0,|L1.2848|
0009ac  f7fffffe          BL       USART_Cmd
0009b0  e0b3              B        |L1.2842|
                  |L1.2482|
;;;515      }
;;;516      
;;;517      else if(USART_x == USART_6)
0009b2  2e06              CMP      r6,#6
0009b4  d17d              BNE      |L1.2738|
;;;518      {
;;;519        USART_Init(USART6, &USART_InitStructure);
0009b6  4669              MOV      r1,sp
0009b8  485a              LDR      r0,|L1.2852|
0009ba  f7fffffe          BL       USART_Init
;;;520    
;;;521        if(USART_DMAReq == USART_DMAReq_Tx)
0009be  2d80              CMP      r5,#0x80
0009c0  d104              BNE      |L1.2508|
;;;522          USART_DMACmd(USART6, USART_DMAReq_Tx, ENABLE);  /* Enabling the DMA request specified USART6 */
0009c2  2201              MOVS     r2,#1
0009c4  2180              MOVS     r1,#0x80
0009c6  4857              LDR      r0,|L1.2852|
0009c8  f7fffffe          BL       USART_DMACmd
                  |L1.2508|
;;;523        if(USART_DMAReq == USART_DMAReq_Rx)
0009cc  2d40              CMP      r5,#0x40
0009ce  d104              BNE      |L1.2522|
;;;524          USART_DMACmd(USART6, USART_DMAReq_Rx, ENABLE);  /* Enabling the DMA request specified USART6 */
0009d0  2201              MOVS     r2,#1
0009d2  2140              MOVS     r1,#0x40
0009d4  4853              LDR      r0,|L1.2852|
0009d6  f7fffffe          BL       USART_DMACmd
                  |L1.2522|
;;;525        if(USART_DMAReq == (USART_DMAReq_Tx|USART_DMAReq_Rx))
0009da  2dc0              CMP      r5,#0xc0
0009dc  d109              BNE      |L1.2546|
;;;526        {
;;;527          USART_DMACmd(USART6, USART_DMAReq_Tx, ENABLE);  /* Enabling the DMA request specified USART6 */
0009de  2201              MOVS     r2,#1
0009e0  2180              MOVS     r1,#0x80
0009e2  4850              LDR      r0,|L1.2852|
0009e4  f7fffffe          BL       USART_DMACmd
;;;528          USART_DMACmd(USART6, USART_DMAReq_Rx, ENABLE);  /* Enabling the DMA request specified USART6 */
0009e8  2201              MOVS     r2,#1
0009ea  2140              MOVS     r1,#0x40
0009ec  484d              LDR      r0,|L1.2852|
0009ee  f7fffffe          BL       USART_DMACmd
                  |L1.2546|
;;;529        }
;;;530    
;;;531        if( (USART_IT & USART_IT_PE) == USART_IT_PE )
0009f2  f0040028          AND      r0,r4,#0x28
0009f6  2828              CMP      r0,#0x28
0009f8  d104              BNE      |L1.2564|
;;;532        {
;;;533          USART_ITConfig(USART6, USART_IT_PE, ENABLE); /* Enabling interrupts specified USART6 */
0009fa  2201              MOVS     r2,#1
0009fc  2128              MOVS     r1,#0x28
0009fe  4849              LDR      r0,|L1.2852|
000a00  f7fffffe          BL       USART_ITConfig
                  |L1.2564|
;;;534        }
;;;535        if( (USART_IT & USART_IT_TXE) == USART_IT_TXE )
000a04  f2407027          MOV      r0,#0x727
000a08  4020              ANDS     r0,r0,r4
000a0a  f5a061e0          SUB      r1,r0,#0x700
000a0e  3927              SUBS     r1,r1,#0x27
000a10  d105              BNE      |L1.2590|
;;;536        {
;;;537          USART_ITConfig(USART6, USART_IT_TXE, ENABLE); /* Enabling interrupts specified USART6 */
000a12  2201              MOVS     r2,#1
000a14  f2407127          MOV      r1,#0x727
000a18  4842              LDR      r0,|L1.2852|
000a1a  f7fffffe          BL       USART_ITConfig
                  |L1.2590|
;;;538        }
;;;539        if( (USART_IT & USART_IT_TC) == USART_IT_TC )
000a1e  f2406026          MOV      r0,#0x626
000a22  4020              ANDS     r0,r0,r4
000a24  f5a061c0          SUB      r1,r0,#0x600
000a28  3926              SUBS     r1,r1,#0x26
000a2a  d105              BNE      |L1.2616|
;;;540        {
;;;541          USART_ITConfig(USART6, USART_IT_TC, ENABLE); /* Enabling interrupts specified USART6 */
000a2c  2201              MOVS     r2,#1
000a2e  f2406126          MOV      r1,#0x626
000a32  483c              LDR      r0,|L1.2852|
000a34  f7fffffe          BL       USART_ITConfig
                  |L1.2616|
;;;542        }
;;;543        if( (USART_IT & USART_IT_RXNE) == USART_IT_RXNE )
000a38  f2405025          MOV      r0,#0x525
000a3c  4020              ANDS     r0,r0,r4
000a3e  f5a061a0          SUB      r1,r0,#0x500
000a42  3925              SUBS     r1,r1,#0x25
000a44  d105              BNE      |L1.2642|
;;;544        {
;;;545          USART_ITConfig(USART6, USART_IT_RXNE, ENABLE); /* Enabling interrupts specified USART6 */
000a46  2201              MOVS     r2,#1
000a48  f2405125          MOV      r1,#0x525
000a4c  4835              LDR      r0,|L1.2852|
000a4e  f7fffffe          BL       USART_ITConfig
                  |L1.2642|
;;;546        }
;;;547        if( (USART_IT & USART_IT_ORE_RX) == USART_IT_ORE_RX )
000a52  f2403025          MOV      r0,#0x325
000a56  4020              ANDS     r0,r0,r4
000a58  f5a07140          SUB      r1,r0,#0x300
000a5c  3925              SUBS     r1,r1,#0x25
000a5e  d105              BNE      |L1.2668|
;;;548        {
;;;549          USART_ITConfig(USART6, USART_IT_ORE_RX, ENABLE); /* Enabling interrupts specified USART6 */
000a60  2201              MOVS     r2,#1
000a62  f2403125          MOV      r1,#0x325
000a66  482f              LDR      r0,|L1.2852|
000a68  f7fffffe          BL       USART_ITConfig
                  |L1.2668|
;;;550        }
;;;551        if( (USART_IT & USART_IT_IDLE) == USART_IT_IDLE )
000a6c  f2404024          MOV      r0,#0x424
000a70  4020              ANDS     r0,r0,r4
000a72  f5a06180          SUB      r1,r0,#0x400
000a76  3924              SUBS     r1,r1,#0x24
000a78  d105              BNE      |L1.2694|
;;;552        {
;;;553          USART_ITConfig(USART6, USART_IT_IDLE, ENABLE); /* Enabling interrupts specified USART6 */
000a7a  2201              MOVS     r2,#1
000a7c  f2404124          MOV      r1,#0x424
000a80  4828              LDR      r0,|L1.2852|
000a82  f7fffffe          BL       USART_ITConfig
                  |L1.2694|
;;;554        }
;;;555        if( (USART_IT & USART_IT_LBD) == USART_IT_LBD )
000a86  f6400046          MOV      r0,#0x846
000a8a  4020              ANDS     r0,r0,r4
000a8c  f5a06100          SUB      r1,r0,#0x800
000a90  3946              SUBS     r1,r1,#0x46
000a92  d105              BNE      |L1.2720|
;;;556        {
;;;557          USART_ITConfig(USART6, USART_IT_LBD, ENABLE); /* Enabling interrupts specified USART6 */
000a94  2201              MOVS     r2,#1
000a96  f6400146          MOV      r1,#0x846
000a9a  4822              LDR      r0,|L1.2852|
000a9c  f7fffffe          BL       USART_ITConfig
                  |L1.2720|
;;;558        }
;;;559        if( (USART_IT & USART_IT_CTS) == USART_IT_CTS )
000aa0  f640106a          MOV      r0,#0x96a
000aa4  4020              ANDS     r0,r0,r4
000aa6  f5a06110          SUB      r1,r0,#0x900
000aaa  396a              SUBS     r1,r1,#0x6a
000aac  d107              BNE      |L1.2750|
;;;560        {
;;;561          USART_ITConfig(USART6, USART_IT_CTS, ENABLE); /* Enabling interrupts specified USART6 */
000aae  2201              MOVS     r2,#1
000ab0  e000              B        |L1.2740|
                  |L1.2738|
000ab2  e032              B        |L1.2842|
                  |L1.2740|
000ab4  f640116a          MOV      r1,#0x96a
000ab8  481a              LDR      r0,|L1.2852|
000aba  f7fffffe          BL       USART_ITConfig
                  |L1.2750|
;;;562        }
;;;563        if( (USART_IT & USART_IT_ERR) == USART_IT_ERR )
000abe  f0040060          AND      r0,r4,#0x60
000ac2  2860              CMP      r0,#0x60
000ac4  d104              BNE      |L1.2768|
;;;564        {
;;;565          USART_ITConfig(USART6, USART_IT_ERR, ENABLE); /* Enabling interrupts specified USART6 */
000ac6  2201              MOVS     r2,#1
000ac8  2160              MOVS     r1,#0x60
000aca  4816              LDR      r0,|L1.2852|
000acc  f7fffffe          BL       USART_ITConfig
                  |L1.2768|
;;;566        }
;;;567        if( (USART_IT & USART_IT_ORE_ER) == USART_IT_ORE_ER )
000ad0  f4047058          AND      r0,r4,#0x360
000ad4  f5b07f58          CMP      r0,#0x360
000ad8  d105              BNE      |L1.2790|
;;;568        {
;;;569          USART_ITConfig(USART6, USART_IT_ORE_ER, ENABLE); /* Enabling interrupts specified USART6 */
000ada  2201              MOVS     r2,#1
000adc  f44f7158          MOV      r1,#0x360
000ae0  4810              LDR      r0,|L1.2852|
000ae2  f7fffffe          BL       USART_ITConfig
                  |L1.2790|
;;;570        }
;;;571        if( (USART_IT & USART_IT_NE) == USART_IT_NE )
000ae6  f4047018          AND      r0,r4,#0x260
000aea  f5b07f18          CMP      r0,#0x260
000aee  d105              BNE      |L1.2812|
;;;572        {
;;;573          USART_ITConfig(USART6, USART_IT_NE, ENABLE); /* Enabling interrupts specified USART6 */
000af0  2201              MOVS     r2,#1
000af2  f44f7118          MOV      r1,#0x260
000af6  480b              LDR      r0,|L1.2852|
000af8  f7fffffe          BL       USART_ITConfig
                  |L1.2812|
;;;574        }
;;;575        if( (USART_IT & USART_IT_FE) == USART_IT_FE )
000afc  f40470b0          AND      r0,r4,#0x160
000b00  f5b07fb0          CMP      r0,#0x160
000b04  d105              BNE      |L1.2834|
;;;576        {
;;;577          USART_ITConfig(USART6, USART_IT_FE, ENABLE); /* Enabling interrupts specified USART6 */
000b06  2201              MOVS     r2,#1
000b08  f44f71b0          MOV      r1,#0x160
000b0c  4805              LDR      r0,|L1.2852|
000b0e  f7fffffe          BL       USART_ITConfig
                  |L1.2834|
;;;578        }
;;;579    
;;;580        USART_Cmd(USART6, ENABLE);
000b12  2101              MOVS     r1,#1
000b14  4803              LDR      r0,|L1.2852|
000b16  f7fffffe          BL       USART_Cmd
                  |L1.2842|
;;;581      }
;;;582    }
000b1a  b006              ADD      sp,sp,#0x18
000b1c  e8bd81f0          POP      {r4-r8,pc}
;;;583    
                          ENDP

                  |L1.2848|
                          DCD      0x40005000
                  |L1.2852|
                          DCD      0x40011400

                          AREA ||i.USART_DMA_RX||, CODE, READONLY, ALIGN=2

                  USART_DMA_RX PROC
;;;905    *****************************************************************/
;;;906    void USART_DMA_RX(uint8_t USART_x, uint16_t DMA_BufferSize)
000000  b570              PUSH     {r4-r6,lr}
;;;907    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;908      if(USART_x == USART_1)
000006  2c01              CMP      r4,#1
000008  d117              BNE      |L2.58|
;;;909      {
;;;910        DMA_ClearFlag(DMA2_Stream2, DMA_FLAG_TCIF2);  /* Clear Pending DMA channel x flag (DMA2 DMA2_Stream2 transfer completion flag) */
00000a  f04f5181          MOV      r1,#0x10200000
00000e  4854              LDR      r0,|L2.352|
000010  f7fffffe          BL       DMA_ClearFlag
;;;911        DMA_Cmd(DMA2_Stream2, DISABLE);
000014  2100              MOVS     r1,#0
000016  4852              LDR      r0,|L2.352|
000018  f7fffffe          BL       DMA_Cmd
;;;912        while(DMA_GetCmdStatus(DMA2_Stream2) != DISABLE);
00001c  bf00              NOP      
                  |L2.30|
00001e  4850              LDR      r0,|L2.352|
000020  f7fffffe          BL       DMA_GetCmdStatus
000024  2800              CMP      r0,#0
000026  d1fa              BNE      |L2.30|
;;;913        DMA_SetCurrDataCounter(DMA2_Stream2, DMA_BufferSize);
000028  4629              MOV      r1,r5
00002a  484d              LDR      r0,|L2.352|
00002c  f7fffffe          BL       DMA_SetCurrDataCounter
;;;914        DMA_Cmd(DMA2_Stream2, ENABLE);
000030  2101              MOVS     r1,#1
000032  484b              LDR      r0,|L2.352|
000034  f7fffffe          BL       DMA_Cmd
000038  e090              B        |L2.348|
                  |L2.58|
;;;915      }
;;;916    
;;;917      else if(USART_x == USART_2)
00003a  2c02              CMP      r4,#2
00003c  d116              BNE      |L2.108|
;;;918      {
;;;919        DMA_ClearFlag(DMA1_Stream5, DMA_FLAG_TCIF5);  /* Clear Pending DMA channel x flag (DMA1 DMA1_Stream5 transfer completion flag) */
00003e  4949              LDR      r1,|L2.356|
000040  4849              LDR      r0,|L2.360|
000042  f7fffffe          BL       DMA_ClearFlag
;;;920        DMA_Cmd(DMA1_Stream5, DISABLE);
000046  2100              MOVS     r1,#0
000048  4847              LDR      r0,|L2.360|
00004a  f7fffffe          BL       DMA_Cmd
;;;921        while(DMA_GetCmdStatus(DMA1_Stream5) != DISABLE);
00004e  bf00              NOP      
                  |L2.80|
000050  4845              LDR      r0,|L2.360|
000052  f7fffffe          BL       DMA_GetCmdStatus
000056  2800              CMP      r0,#0
000058  d1fa              BNE      |L2.80|
;;;922        DMA_SetCurrDataCounter(DMA1_Stream5, DMA_BufferSize);
00005a  4629              MOV      r1,r5
00005c  4842              LDR      r0,|L2.360|
00005e  f7fffffe          BL       DMA_SetCurrDataCounter
;;;923        DMA_Cmd(DMA1_Stream5, ENABLE);
000062  2101              MOVS     r1,#1
000064  4840              LDR      r0,|L2.360|
000066  f7fffffe          BL       DMA_Cmd
00006a  e077              B        |L2.348|
                  |L2.108|
;;;924      }
;;;925    
;;;926      else if(USART_x == USART_3)
00006c  2c03              CMP      r4,#3
00006e  d11b              BNE      |L2.168|
;;;927      {
;;;928        DMA_ClearFlag(DMA1_Stream1, DMA_FLAG_TCIF1);  /* Clear Pending DMA channel x flag (DMA1 DMA1_Stream1 transfer completion flag) */
000070  493e              LDR      r1,|L2.364|
000072  483d              LDR      r0,|L2.360|
000074  3860              SUBS     r0,r0,#0x60
000076  f7fffffe          BL       DMA_ClearFlag
;;;929        DMA_Cmd(DMA1_Stream1, DISABLE);
00007a  2100              MOVS     r1,#0
00007c  483a              LDR      r0,|L2.360|
00007e  3860              SUBS     r0,r0,#0x60
000080  f7fffffe          BL       DMA_Cmd
;;;930        while(DMA_GetCmdStatus(DMA1_Stream1) != DISABLE);
000084  bf00              NOP      
                  |L2.134|
000086  4838              LDR      r0,|L2.360|
000088  3860              SUBS     r0,r0,#0x60
00008a  f7fffffe          BL       DMA_GetCmdStatus
00008e  2800              CMP      r0,#0
000090  d1f9              BNE      |L2.134|
;;;931        DMA_SetCurrDataCounter(DMA1_Stream1, DMA_BufferSize);
000092  4629              MOV      r1,r5
000094  4834              LDR      r0,|L2.360|
000096  3860              SUBS     r0,r0,#0x60
000098  f7fffffe          BL       DMA_SetCurrDataCounter
;;;932        DMA_Cmd(DMA1_Stream1, ENABLE);
00009c  2101              MOVS     r1,#1
00009e  4832              LDR      r0,|L2.360|
0000a0  3860              SUBS     r0,r0,#0x60
0000a2  f7fffffe          BL       DMA_Cmd
0000a6  e059              B        |L2.348|
                  |L2.168|
;;;933      }
;;;934    
;;;935      else if(USART_x == USART_4)
0000a8  2c04              CMP      r4,#4
0000aa  d11c              BNE      |L2.230|
;;;936      {
;;;937        DMA_ClearFlag(DMA1_Stream2, DMA_FLAG_TCIF2);  /* Clear Pending DMA channel x flag (DMA1 DMA1_Stream2 transfer completion flag) */
0000ac  f04f5181          MOV      r1,#0x10200000
0000b0  482d              LDR      r0,|L2.360|
0000b2  3848              SUBS     r0,r0,#0x48
0000b4  f7fffffe          BL       DMA_ClearFlag
;;;938        DMA_Cmd(DMA1_Stream2, DISABLE);
0000b8  2100              MOVS     r1,#0
0000ba  482b              LDR      r0,|L2.360|
0000bc  3848              SUBS     r0,r0,#0x48
0000be  f7fffffe          BL       DMA_Cmd
;;;939        while(DMA_GetCmdStatus(DMA1_Stream2) != DISABLE);
0000c2  bf00              NOP      
                  |L2.196|
0000c4  4828              LDR      r0,|L2.360|
0000c6  3848              SUBS     r0,r0,#0x48
0000c8  f7fffffe          BL       DMA_GetCmdStatus
0000cc  2800              CMP      r0,#0
0000ce  d1f9              BNE      |L2.196|
;;;940        DMA_SetCurrDataCounter(DMA1_Stream2, DMA_BufferSize);
0000d0  4629              MOV      r1,r5
0000d2  4825              LDR      r0,|L2.360|
0000d4  3848              SUBS     r0,r0,#0x48
0000d6  f7fffffe          BL       DMA_SetCurrDataCounter
;;;941        DMA_Cmd(DMA1_Stream2, ENABLE);
0000da  2101              MOVS     r1,#1
0000dc  4822              LDR      r0,|L2.360|
0000de  3848              SUBS     r0,r0,#0x48
0000e0  f7fffffe          BL       DMA_Cmd
0000e4  e03a              B        |L2.348|
                  |L2.230|
;;;942      }
;;;943      
;;;944      else if(USART_x == USART_5)
0000e6  2c05              CMP      r4,#5
0000e8  d11b              BNE      |L2.290|
;;;945      {
;;;946        DMA_ClearFlag(DMA1_Stream0, DMA_FLAG_TCIF0);  /* Clear Pending DMA channel x flag (DMA1 DMA1_Stream0 transfer completion flag) */
0000ea  4921              LDR      r1,|L2.368|
0000ec  481e              LDR      r0,|L2.360|
0000ee  3878              SUBS     r0,r0,#0x78
0000f0  f7fffffe          BL       DMA_ClearFlag
;;;947        DMA_Cmd(DMA1_Stream0, DISABLE);
0000f4  2100              MOVS     r1,#0
0000f6  481c              LDR      r0,|L2.360|
0000f8  3878              SUBS     r0,r0,#0x78
0000fa  f7fffffe          BL       DMA_Cmd
;;;948        while(DMA_GetCmdStatus(DMA1_Stream0) != DISABLE);
0000fe  bf00              NOP      
                  |L2.256|
000100  4819              LDR      r0,|L2.360|
000102  3878              SUBS     r0,r0,#0x78
000104  f7fffffe          BL       DMA_GetCmdStatus
000108  2800              CMP      r0,#0
00010a  d1f9              BNE      |L2.256|
;;;949        DMA_SetCurrDataCounter(DMA1_Stream0, DMA_BufferSize);
00010c  4629              MOV      r1,r5
00010e  4816              LDR      r0,|L2.360|
000110  3878              SUBS     r0,r0,#0x78
000112  f7fffffe          BL       DMA_SetCurrDataCounter
;;;950        DMA_Cmd(DMA1_Stream0, ENABLE);
000116  2101              MOVS     r1,#1
000118  4813              LDR      r0,|L2.360|
00011a  3878              SUBS     r0,r0,#0x78
00011c  f7fffffe          BL       DMA_Cmd
000120  e01c              B        |L2.348|
                  |L2.290|
;;;951      }
;;;952      
;;;953      else if(USART_x == USART_6)
000122  2c06              CMP      r4,#6
000124  d11a              BNE      |L2.348|
;;;954      {
;;;955        DMA_ClearFlag(DMA2_Stream1, DMA_FLAG_TCIF1);  /* Clear Pending DMA channel x flag (DMA2 DMA2_Stream1 transfer completion flag) */
000126  4911              LDR      r1,|L2.364|
000128  480d              LDR      r0,|L2.352|
00012a  3818              SUBS     r0,r0,#0x18
00012c  f7fffffe          BL       DMA_ClearFlag
;;;956        DMA_Cmd(DMA2_Stream1, DISABLE);
000130  2100              MOVS     r1,#0
000132  480b              LDR      r0,|L2.352|
000134  3818              SUBS     r0,r0,#0x18
000136  f7fffffe          BL       DMA_Cmd
;;;957        while(DMA_GetCmdStatus(DMA2_Stream1) != DISABLE);
00013a  bf00              NOP      
                  |L2.316|
00013c  4808              LDR      r0,|L2.352|
00013e  3818              SUBS     r0,r0,#0x18
000140  f7fffffe          BL       DMA_GetCmdStatus
000144  2800              CMP      r0,#0
000146  d1f9              BNE      |L2.316|
;;;958        DMA_SetCurrDataCounter(DMA2_Stream1, DMA_BufferSize);
000148  4629              MOV      r1,r5
00014a  4805              LDR      r0,|L2.352|
00014c  3818              SUBS     r0,r0,#0x18
00014e  f7fffffe          BL       DMA_SetCurrDataCounter
;;;959        DMA_Cmd(DMA2_Stream1, ENABLE);
000152  2101              MOVS     r1,#1
000154  4802              LDR      r0,|L2.352|
000156  3818              SUBS     r0,r0,#0x18
000158  f7fffffe          BL       DMA_Cmd
                  |L2.348|
;;;960      }
;;;961    }
00015c  bd70              POP      {r4-r6,pc}
;;;962    
                          ENDP

00015e  0000              DCW      0x0000
                  |L2.352|
                          DCD      0x40026440
                  |L2.356|
                          DCD      0x20000800
                  |L2.360|
                          DCD      0x40026088
                  |L2.364|
                          DCD      0x10000800
                  |L2.368|
                          DCD      0x10000020

                          AREA ||i.USART_DMA_RX_Configuration||, CODE, READONLY, ALIGN=2

                  USART_DMA_RX_Configuration PROC
;;;718    *****************************************************************/
;;;719    void USART_DMA_RX_Configuration(uint8_t USART_x, uint32_t DMA_Memory0BaseAddr, uint16_t DMA_BufferSize)
000000  b570              PUSH     {r4-r6,lr}
;;;720    {
000002  b090              SUB      sp,sp,#0x40
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;721      DMA_InitTypeDef DMA_InitStructure;
;;;722    
;;;723      if(USART_x == USART_2 || USART_x == USART_3 || USART_x == USART_4 || USART_x == USART_5)
00000a  2c02              CMP      r4,#2
00000c  d005              BEQ      |L3.26|
00000e  2c03              CMP      r4,#3
000010  d003              BEQ      |L3.26|
000012  2c04              CMP      r4,#4
000014  d001              BEQ      |L3.26|
000016  2c05              CMP      r4,#5
000018  d104              BNE      |L3.36|
                  |L3.26|
;;;724        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);  /* Enable DMA1 clock */
00001a  2101              MOVS     r1,#1
00001c  0548              LSLS     r0,r1,#21
00001e  f7fffffe          BL       RCC_AHB1PeriphClockCmd
000022  e003              B        |L3.44|
                  |L3.36|
;;;725      else
;;;726        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);  /* Enable DMA2 clock */
000024  2101              MOVS     r1,#1
000026  0588              LSLS     r0,r1,#22
000028  f7fffffe          BL       RCC_AHB1PeriphClockCmd
                  |L3.44|
;;;727    
;;;728      if(USART_x == USART_1)
00002c  2c01              CMP      r4,#1
00002e  d10e              BNE      |L3.78|
;;;729      {
;;;730        DMA_DeInit(DMA2_Stream2);
000030  4866              LDR      r0,|L3.460|
000032  f7fffffe          BL       DMA_DeInit
;;;731        while(DMA_GetCmdStatus(DMA2_Stream2) != DISABLE);
000036  bf00              NOP      
                  |L3.56|
000038  4864              LDR      r0,|L3.460|
00003a  f7fffffe          BL       DMA_GetCmdStatus
00003e  2800              CMP      r0,#0
000040  d1fa              BNE      |L3.56|
;;;732    
;;;733        DMA_InitStructure.DMA_Channel = DMA_Channel_4;                    /* Channel selection */
000042  f04f6000          MOV      r0,#0x8000000
000046  9001              STR      r0,[sp,#4]
;;;734        DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&USART1->DR; /* Set the DMA source: peripheral data register address */
000048  4861              LDR      r0,|L3.464|
00004a  9002              STR      r0,[sp,#8]
00004c  e05b              B        |L3.262|
                  |L3.78|
;;;735      }
;;;736    
;;;737      else if(USART_x == USART_2)
00004e  2c02              CMP      r4,#2
000050  d10e              BNE      |L3.112|
;;;738      {
;;;739        DMA_DeInit(DMA1_Stream5);
000052  4860              LDR      r0,|L3.468|
000054  f7fffffe          BL       DMA_DeInit
;;;740        while(DMA_GetCmdStatus(DMA1_Stream5) != DISABLE);
000058  bf00              NOP      
                  |L3.90|
00005a  485e              LDR      r0,|L3.468|
00005c  f7fffffe          BL       DMA_GetCmdStatus
000060  2800              CMP      r0,#0
000062  d1fa              BNE      |L3.90|
;;;741    
;;;742        DMA_InitStructure.DMA_Channel = DMA_Channel_4;                    /* Channel selection */
000064  f04f6000          MOV      r0,#0x8000000
000068  9001              STR      r0,[sp,#4]
;;;743        DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&USART2->DR; /* Set the DMA source: peripheral data register address */
00006a  485b              LDR      r0,|L3.472|
00006c  9002              STR      r0,[sp,#8]
00006e  e04a              B        |L3.262|
                  |L3.112|
;;;744      }
;;;745    
;;;746      else if(USART_x == USART_3)
000070  2c03              CMP      r4,#3
000072  d110              BNE      |L3.150|
;;;747      {
;;;748        DMA_DeInit(DMA1_Stream1);
000074  4857              LDR      r0,|L3.468|
000076  3860              SUBS     r0,r0,#0x60
000078  f7fffffe          BL       DMA_DeInit
;;;749        while(DMA_GetCmdStatus(DMA1_Stream1) != DISABLE);
00007c  bf00              NOP      
                  |L3.126|
00007e  4855              LDR      r0,|L3.468|
000080  3860              SUBS     r0,r0,#0x60
000082  f7fffffe          BL       DMA_GetCmdStatus
000086  2800              CMP      r0,#0
000088  d1f9              BNE      |L3.126|
;;;750    
;;;751        DMA_InitStructure.DMA_Channel = DMA_Channel_4;                    /* Channel selection */
00008a  f04f6000          MOV      r0,#0x8000000
00008e  9001              STR      r0,[sp,#4]
;;;752        DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&USART3->DR; /* Set the DMA source: peripheral data register address */
000090  4852              LDR      r0,|L3.476|
000092  9002              STR      r0,[sp,#8]
000094  e037              B        |L3.262|
                  |L3.150|
;;;753      }
;;;754    
;;;755      else if(USART_x == USART_4)
000096  2c04              CMP      r4,#4
000098  d110              BNE      |L3.188|
;;;756      {
;;;757        DMA_DeInit(DMA1_Stream2);
00009a  484e              LDR      r0,|L3.468|
00009c  3848              SUBS     r0,r0,#0x48
00009e  f7fffffe          BL       DMA_DeInit
;;;758        while(DMA_GetCmdStatus(DMA1_Stream2) != DISABLE);
0000a2  bf00              NOP      
                  |L3.164|
0000a4  484b              LDR      r0,|L3.468|
0000a6  3848              SUBS     r0,r0,#0x48
0000a8  f7fffffe          BL       DMA_GetCmdStatus
0000ac  2800              CMP      r0,#0
0000ae  d1f9              BNE      |L3.164|
;;;759    
;;;760        DMA_InitStructure.DMA_Channel = DMA_Channel_4;                    /* Channel selection */
0000b0  f04f6000          MOV      r0,#0x8000000
0000b4  9001              STR      r0,[sp,#4]
;;;761        DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&UART4->DR;  /* Set the DMA source: peripheral data register address */
0000b6  484a              LDR      r0,|L3.480|
0000b8  9002              STR      r0,[sp,#8]
0000ba  e024              B        |L3.262|
                  |L3.188|
;;;762      }
;;;763      
;;;764      else if(USART_x == USART_5)
0000bc  2c05              CMP      r4,#5
0000be  d110              BNE      |L3.226|
;;;765      {
;;;766        DMA_DeInit(DMA1_Stream0);
0000c0  4844              LDR      r0,|L3.468|
0000c2  3878              SUBS     r0,r0,#0x78
0000c4  f7fffffe          BL       DMA_DeInit
;;;767        while(DMA_GetCmdStatus(DMA1_Stream0) != DISABLE);
0000c8  bf00              NOP      
                  |L3.202|
0000ca  4842              LDR      r0,|L3.468|
0000cc  3878              SUBS     r0,r0,#0x78
0000ce  f7fffffe          BL       DMA_GetCmdStatus
0000d2  2800              CMP      r0,#0
0000d4  d1f9              BNE      |L3.202|
;;;768    
;;;769        DMA_InitStructure.DMA_Channel = DMA_Channel_4;                    /* Channel selection */
0000d6  f04f6000          MOV      r0,#0x8000000
0000da  9001              STR      r0,[sp,#4]
;;;770        DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&UART5->DR;  /* Set the DMA source: peripheral data register address */
0000dc  4841              LDR      r0,|L3.484|
0000de  9002              STR      r0,[sp,#8]
0000e0  e011              B        |L3.262|
                  |L3.226|
;;;771      }
;;;772      
;;;773      else if(USART_x == USART_6)
0000e2  2c06              CMP      r4,#6
0000e4  d10f              BNE      |L3.262|
;;;774      {
;;;775        DMA_DeInit(DMA2_Stream1);
0000e6  4839              LDR      r0,|L3.460|
0000e8  3818              SUBS     r0,r0,#0x18
0000ea  f7fffffe          BL       DMA_DeInit
;;;776        while(DMA_GetCmdStatus(DMA2_Stream1) != DISABLE);
0000ee  bf00              NOP      
                  |L3.240|
0000f0  4836              LDR      r0,|L3.460|
0000f2  3818              SUBS     r0,r0,#0x18
0000f4  f7fffffe          BL       DMA_GetCmdStatus
0000f8  2800              CMP      r0,#0
0000fa  d1f9              BNE      |L3.240|
;;;777    
;;;778        DMA_InitStructure.DMA_Channel = DMA_Channel_5;                    /* Channel selection */
0000fc  f04f6020          MOV      r0,#0xa000000
000100  9001              STR      r0,[sp,#4]
;;;779        DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&USART6->DR; /* Set the DMA source: peripheral data register address */
000102  4839              LDR      r0,|L3.488|
000104  9002              STR      r0,[sp,#8]
                  |L3.262|
;;;780      }
;;;781    
;;;782      DMA_InitStructure.DMA_Memory0BaseAddr = DMA_Memory0BaseAddr;            /* Memory address */
000106  9503              STR      r5,[sp,#0xc]
;;;783      DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;                 /* Data Peripheral to Memory */
000108  2000              MOVS     r0,#0
00010a  9004              STR      r0,[sp,#0x10]
;;;784      DMA_InitStructure.DMA_BufferSize = DMA_BufferSize;                      /* Specifies the DMA channel DMA buffer size */
00010c  9605              STR      r6,[sp,#0x14]
;;;785      DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;        /* Peripheral address does not increase */
00010e  9006              STR      r0,[sp,#0x18]
;;;786      DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;                 /* Memory address increment */
000110  f44f6080          MOV      r0,#0x400
000114  9007              STR      r0,[sp,#0x1c]
;;;787      DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte; /* Peripheral data width of 8 bit */
000116  2000              MOVS     r0,#0
000118  9008              STR      r0,[sp,#0x20]
;;;788      DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;         /* Memory data width of 8 bit */
00011a  9009              STR      r0,[sp,#0x24]
;;;789      DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;                         /* Use Circular mode */
00011c  f44f7080          MOV      r0,#0x100
000120  900a              STR      r0,[sp,#0x28]
;;;790      DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;                   /* Medium priority */
000122  0200              LSLS     r0,r0,#8
000124  900b              STR      r0,[sp,#0x2c]
;;;791      DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
000126  2000              MOVS     r0,#0
000128  900c              STR      r0,[sp,#0x30]
;;;792      DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
00012a  2003              MOVS     r0,#3
00012c  900d              STR      r0,[sp,#0x34]
;;;793      DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;             /* A single transmission burst memory */
00012e  2000              MOVS     r0,#0
000130  900e              STR      r0,[sp,#0x38]
;;;794      DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;     /* Peripherals single transmission burst */
000132  900f              STR      r0,[sp,#0x3c]
;;;795    
;;;796      if(USART_x == USART_1)
000134  2c01              CMP      r4,#1
000136  d108              BNE      |L3.330|
;;;797      {
;;;798        DMA_Init(DMA2_Stream2, &DMA_InitStructure);
000138  a901              ADD      r1,sp,#4
00013a  4824              LDR      r0,|L3.460|
00013c  f7fffffe          BL       DMA_Init
;;;799        DMA_Cmd(DMA2_Stream2, ENABLE);
000140  2101              MOVS     r1,#1
000142  4822              LDR      r0,|L3.460|
000144  f7fffffe          BL       DMA_Cmd
000148  e03d              B        |L3.454|
                  |L3.330|
;;;800      }
;;;801    
;;;802      else if(USART_x == USART_2)
00014a  2c02              CMP      r4,#2
00014c  d108              BNE      |L3.352|
;;;803      {
;;;804        DMA_Init(DMA1_Stream5, &DMA_InitStructure);
00014e  a901              ADD      r1,sp,#4
000150  4820              LDR      r0,|L3.468|
000152  f7fffffe          BL       DMA_Init
;;;805        DMA_Cmd(DMA1_Stream5, ENABLE);
000156  2101              MOVS     r1,#1
000158  481e              LDR      r0,|L3.468|
00015a  f7fffffe          BL       DMA_Cmd
00015e  e032              B        |L3.454|
                  |L3.352|
;;;806      }
;;;807    
;;;808      else if(USART_x == USART_3)
000160  2c03              CMP      r4,#3
000162  d10a              BNE      |L3.378|
;;;809      {
;;;810        DMA_Init(DMA1_Stream1, &DMA_InitStructure);
000164  a901              ADD      r1,sp,#4
000166  481b              LDR      r0,|L3.468|
000168  3860              SUBS     r0,r0,#0x60
00016a  f7fffffe          BL       DMA_Init
;;;811        DMA_Cmd(DMA1_Stream1, ENABLE);
00016e  2101              MOVS     r1,#1
000170  4818              LDR      r0,|L3.468|
000172  3860              SUBS     r0,r0,#0x60
000174  f7fffffe          BL       DMA_Cmd
000178  e025              B        |L3.454|
                  |L3.378|
;;;812      }
;;;813    
;;;814      else if(USART_x == USART_4)
00017a  2c04              CMP      r4,#4
00017c  d10a              BNE      |L3.404|
;;;815      {
;;;816        DMA_Init(DMA1_Stream2, &DMA_InitStructure);
00017e  a901              ADD      r1,sp,#4
000180  4814              LDR      r0,|L3.468|
000182  3848              SUBS     r0,r0,#0x48
000184  f7fffffe          BL       DMA_Init
;;;817        DMA_Cmd(DMA1_Stream2, ENABLE);
000188  2101              MOVS     r1,#1
00018a  4812              LDR      r0,|L3.468|
00018c  3848              SUBS     r0,r0,#0x48
00018e  f7fffffe          BL       DMA_Cmd
000192  e018              B        |L3.454|
                  |L3.404|
;;;818      }
;;;819      
;;;820      else if(USART_x == USART_5)
000194  2c05              CMP      r4,#5
000196  d10a              BNE      |L3.430|
;;;821      {
;;;822        DMA_Init(DMA1_Stream0, &DMA_InitStructure);
000198  a901              ADD      r1,sp,#4
00019a  480e              LDR      r0,|L3.468|
00019c  3878              SUBS     r0,r0,#0x78
00019e  f7fffffe          BL       DMA_Init
;;;823        DMA_Cmd(DMA1_Stream0, ENABLE);
0001a2  2101              MOVS     r1,#1
0001a4  480b              LDR      r0,|L3.468|
0001a6  3878              SUBS     r0,r0,#0x78
0001a8  f7fffffe          BL       DMA_Cmd
0001ac  e00b              B        |L3.454|
                  |L3.430|
;;;824      }
;;;825      
;;;826      else if(USART_x == USART_6)
0001ae  2c06              CMP      r4,#6
0001b0  d109              BNE      |L3.454|
;;;827      {
;;;828        DMA_Init(DMA2_Stream1, &DMA_InitStructure);
0001b2  a901              ADD      r1,sp,#4
0001b4  4805              LDR      r0,|L3.460|
0001b6  3818              SUBS     r0,r0,#0x18
0001b8  f7fffffe          BL       DMA_Init
;;;829        DMA_Cmd(DMA2_Stream1, ENABLE);
0001bc  2101              MOVS     r1,#1
0001be  4803              LDR      r0,|L3.460|
0001c0  3818              SUBS     r0,r0,#0x18
0001c2  f7fffffe          BL       DMA_Cmd
                  |L3.454|
;;;830      }
;;;831    }
0001c6  b010              ADD      sp,sp,#0x40
0001c8  bd70              POP      {r4-r6,pc}
;;;832    
                          ENDP

0001ca  0000              DCW      0x0000
                  |L3.460|
                          DCD      0x40026440
                  |L3.464|
                          DCD      0x40011004
                  |L3.468|
                          DCD      0x40026088
                  |L3.472|
                          DCD      0x40004404
                  |L3.476|
                          DCD      0x40004804
                  |L3.480|
                          DCD      0x40004c04
                  |L3.484|
                          DCD      0x40005004
                  |L3.488|
                          DCD      0x40011404

                          AREA ||i.USART_DMA_TX||, CODE, READONLY, ALIGN=2

                  USART_DMA_TX PROC
;;;840    *****************************************************************/
;;;841    void USART_DMA_TX(uint8_t USART_x, uint16_t DMA_BufferSize)
000000  b570              PUSH     {r4-r6,lr}
;;;842    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;843      if(USART_x == USART_1)
000006  2c01              CMP      r4,#1
000008  d117              BNE      |L4.58|
;;;844      {
;;;845        DMA_ClearFlag(DMA2_Stream7, DMA_FLAG_TCIF7);  /* Clear Pending DMA channel x flag (DMA2 Stream7 transfer completion flag) */
00000a  f04f5120          MOV      r1,#0x28000000
00000e  4853              LDR      r0,|L4.348|
000010  f7fffffe          BL       DMA_ClearFlag
;;;846        DMA_Cmd(DMA2_Stream7, DISABLE);
000014  2100              MOVS     r1,#0
000016  4851              LDR      r0,|L4.348|
000018  f7fffffe          BL       DMA_Cmd
;;;847        while(DMA_GetCmdStatus(DMA2_Stream7) != DISABLE);
00001c  bf00              NOP      
                  |L4.30|
00001e  484f              LDR      r0,|L4.348|
000020  f7fffffe          BL       DMA_GetCmdStatus
000024  2800              CMP      r0,#0
000026  d1fa              BNE      |L4.30|
;;;848        DMA_SetCurrDataCounter(DMA2_Stream7, DMA_BufferSize);
000028  4629              MOV      r1,r5
00002a  484c              LDR      r0,|L4.348|
00002c  f7fffffe          BL       DMA_SetCurrDataCounter
;;;849        DMA_Cmd(DMA2_Stream7, ENABLE);
000030  2101              MOVS     r1,#1
000032  484a              LDR      r0,|L4.348|
000034  f7fffffe          BL       DMA_Cmd
000038  e08f              B        |L4.346|
                  |L4.58|
;;;850      }
;;;851    
;;;852      else if(USART_x == USART_2)
00003a  2c02              CMP      r4,#2
00003c  d116              BNE      |L4.108|
;;;853      {
;;;854        DMA_ClearFlag(DMA1_Stream6, DMA_FLAG_TCIF6);  /* Clear Pending DMA channel x flag (DMA1 DMA1_Stream6 transfer completion flag) */
00003e  4948              LDR      r1,|L4.352|
000040  4848              LDR      r0,|L4.356|
000042  f7fffffe          BL       DMA_ClearFlag
;;;855        DMA_Cmd(DMA1_Stream6, DISABLE);
000046  2100              MOVS     r1,#0
000048  4846              LDR      r0,|L4.356|
00004a  f7fffffe          BL       DMA_Cmd
;;;856        while(DMA_GetCmdStatus(DMA1_Stream6) != DISABLE);
00004e  bf00              NOP      
                  |L4.80|
000050  4844              LDR      r0,|L4.356|
000052  f7fffffe          BL       DMA_GetCmdStatus
000056  2800              CMP      r0,#0
000058  d1fa              BNE      |L4.80|
;;;857        DMA_SetCurrDataCounter(DMA1_Stream6, DMA_BufferSize);
00005a  4629              MOV      r1,r5
00005c  4841              LDR      r0,|L4.356|
00005e  f7fffffe          BL       DMA_SetCurrDataCounter
;;;858        DMA_Cmd(DMA1_Stream6, ENABLE);
000062  2101              MOVS     r1,#1
000064  483f              LDR      r0,|L4.356|
000066  f7fffffe          BL       DMA_Cmd
00006a  e076              B        |L4.346|
                  |L4.108|
;;;859      }
;;;860    
;;;861      else if(USART_x == USART_3)
00006c  2c03              CMP      r4,#3
00006e  d11b              BNE      |L4.168|
;;;862      {
;;;863        DMA_ClearFlag(DMA1_Stream3, DMA_FLAG_TCIF3);  /* Clear Pending DMA channel x flag (DMA1 DMA1_Stream3 transfer completion flag) */
000070  06e1              LSLS     r1,r4,#27
000072  483c              LDR      r0,|L4.356|
000074  3848              SUBS     r0,r0,#0x48
000076  f7fffffe          BL       DMA_ClearFlag
;;;864        DMA_Cmd(DMA1_Stream3, DISABLE);
00007a  2100              MOVS     r1,#0
00007c  4839              LDR      r0,|L4.356|
00007e  3848              SUBS     r0,r0,#0x48
000080  f7fffffe          BL       DMA_Cmd
;;;865        while(DMA_GetCmdStatus(DMA1_Stream3) != DISABLE);
000084  bf00              NOP      
                  |L4.134|
000086  4837              LDR      r0,|L4.356|
000088  3848              SUBS     r0,r0,#0x48
00008a  f7fffffe          BL       DMA_GetCmdStatus
00008e  2800              CMP      r0,#0
000090  d1f9              BNE      |L4.134|
;;;866        DMA_SetCurrDataCounter(DMA1_Stream3, DMA_BufferSize);
000092  4629              MOV      r1,r5
000094  4833              LDR      r0,|L4.356|
000096  3848              SUBS     r0,r0,#0x48
000098  f7fffffe          BL       DMA_SetCurrDataCounter
;;;867        DMA_Cmd(DMA1_Stream3, ENABLE);
00009c  2101              MOVS     r1,#1
00009e  4831              LDR      r0,|L4.356|
0000a0  3848              SUBS     r0,r0,#0x48
0000a2  f7fffffe          BL       DMA_Cmd
0000a6  e058              B        |L4.346|
                  |L4.168|
;;;868      }
;;;869    
;;;870      else if(USART_x == USART_4)
0000a8  2c04              CMP      r4,#4
0000aa  d11b              BNE      |L4.228|
;;;871      {
;;;872        DMA_ClearFlag(DMA1_Stream4, DMA_FLAG_TCIF4);  /* Clear Pending DMA channel x flag (DMA1 DMA1_Stream4 transfer completion flag) */
0000ac  492e              LDR      r1,|L4.360|
0000ae  482d              LDR      r0,|L4.356|
0000b0  3830              SUBS     r0,r0,#0x30
0000b2  f7fffffe          BL       DMA_ClearFlag
;;;873        DMA_Cmd(DMA1_Stream4, DISABLE);
0000b6  2100              MOVS     r1,#0
0000b8  482a              LDR      r0,|L4.356|
0000ba  3830              SUBS     r0,r0,#0x30
0000bc  f7fffffe          BL       DMA_Cmd
;;;874        while(DMA_GetCmdStatus(DMA1_Stream4) != DISABLE);
0000c0  bf00              NOP      
                  |L4.194|
0000c2  4828              LDR      r0,|L4.356|
0000c4  3830              SUBS     r0,r0,#0x30
0000c6  f7fffffe          BL       DMA_GetCmdStatus
0000ca  2800              CMP      r0,#0
0000cc  d1f9              BNE      |L4.194|
;;;875        DMA_SetCurrDataCounter(DMA1_Stream4, DMA_BufferSize);
0000ce  4629              MOV      r1,r5
0000d0  4824              LDR      r0,|L4.356|
0000d2  3830              SUBS     r0,r0,#0x30
0000d4  f7fffffe          BL       DMA_SetCurrDataCounter
;;;876        DMA_Cmd(DMA1_Stream4, ENABLE);
0000d8  2101              MOVS     r1,#1
0000da  4822              LDR      r0,|L4.356|
0000dc  3830              SUBS     r0,r0,#0x30
0000de  f7fffffe          BL       DMA_Cmd
0000e2  e03a              B        |L4.346|
                  |L4.228|
;;;877      }
;;;878      
;;;879      else if(USART_x == USART_5)
0000e4  2c05              CMP      r4,#5
0000e6  d11b              BNE      |L4.288|
;;;880      {
;;;881        DMA_ClearFlag(DMA1_Stream7, DMA_FLAG_TCIF7);  /* Clear Pending DMA channel x flag (DMA1 DMA1_Stream7 transfer completion flag) */
0000e8  06e1              LSLS     r1,r4,#27
0000ea  481e              LDR      r0,|L4.356|
0000ec  3018              ADDS     r0,r0,#0x18
0000ee  f7fffffe          BL       DMA_ClearFlag
;;;882        DMA_Cmd(DMA1_Stream7, DISABLE);
0000f2  2100              MOVS     r1,#0
0000f4  481b              LDR      r0,|L4.356|
0000f6  3018              ADDS     r0,r0,#0x18
0000f8  f7fffffe          BL       DMA_Cmd
;;;883        while(DMA_GetCmdStatus(DMA1_Stream7) != DISABLE);
0000fc  bf00              NOP      
                  |L4.254|
0000fe  4819              LDR      r0,|L4.356|
000100  3018              ADDS     r0,r0,#0x18
000102  f7fffffe          BL       DMA_GetCmdStatus
000106  2800              CMP      r0,#0
000108  d1f9              BNE      |L4.254|
;;;884        DMA_SetCurrDataCounter(DMA1_Stream7, DMA_BufferSize);
00010a  4629              MOV      r1,r5
00010c  4815              LDR      r0,|L4.356|
00010e  3018              ADDS     r0,r0,#0x18
000110  f7fffffe          BL       DMA_SetCurrDataCounter
;;;885        DMA_Cmd(DMA1_Stream7, ENABLE);
000114  2101              MOVS     r1,#1
000116  4813              LDR      r0,|L4.356|
000118  3018              ADDS     r0,r0,#0x18
00011a  f7fffffe          BL       DMA_Cmd
00011e  e01c              B        |L4.346|
                  |L4.288|
;;;886      }
;;;887      
;;;888      else if(USART_x == USART_6)
000120  2c06              CMP      r4,#6
000122  d11a              BNE      |L4.346|
;;;889      {
;;;890        DMA_ClearFlag(DMA2_Stream6, DMA_FLAG_TCIF6);  /* Clear Pending DMA channel x flag (DMA2 DMA2_Stream6 transfer completion flag) */
000124  490e              LDR      r1,|L4.352|
000126  480d              LDR      r0,|L4.348|
000128  3818              SUBS     r0,r0,#0x18
00012a  f7fffffe          BL       DMA_ClearFlag
;;;891        DMA_Cmd(DMA2_Stream6, DISABLE);
00012e  2100              MOVS     r1,#0
000130  480a              LDR      r0,|L4.348|
000132  3818              SUBS     r0,r0,#0x18
000134  f7fffffe          BL       DMA_Cmd
;;;892        while(DMA_GetCmdStatus(DMA2_Stream6) != DISABLE);
000138  bf00              NOP      
                  |L4.314|
00013a  4808              LDR      r0,|L4.348|
00013c  3818              SUBS     r0,r0,#0x18
00013e  f7fffffe          BL       DMA_GetCmdStatus
000142  2800              CMP      r0,#0
000144  d1f9              BNE      |L4.314|
;;;893        DMA_SetCurrDataCounter(DMA2_Stream6, DMA_BufferSize);
000146  4629              MOV      r1,r5
000148  4804              LDR      r0,|L4.348|
00014a  3818              SUBS     r0,r0,#0x18
00014c  f7fffffe          BL       DMA_SetCurrDataCounter
;;;894        DMA_Cmd(DMA2_Stream6, ENABLE);
000150  2101              MOVS     r1,#1
000152  4802              LDR      r0,|L4.348|
000154  3818              SUBS     r0,r0,#0x18
000156  f7fffffe          BL       DMA_Cmd
                  |L4.346|
;;;895      }
;;;896    }
00015a  bd70              POP      {r4-r6,pc}
;;;897    
                          ENDP

                  |L4.348|
                          DCD      0x400264b8
                  |L4.352|
                          DCD      0x20200000
                  |L4.356|
                          DCD      0x400260a0
                  |L4.360|
                          DCD      0x20000020

                          AREA ||i.USART_DMA_TX_Configuration||, CODE, READONLY, ALIGN=2

                  USART_DMA_TX_Configuration PROC
;;;592    *****************************************************************/
;;;593    void USART_DMA_TX_Configuration(uint8_t USART_x, uint32_t DMA_Memory0BaseAddr, uint16_t DMA_BufferSize)
000000  b570              PUSH     {r4-r6,lr}
;;;594    {
000002  b090              SUB      sp,sp,#0x40
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;595      DMA_InitTypeDef DMA_InitStructure;
;;;596    
;;;597      if(USART_x == USART_2 || USART_x == USART_3 || USART_x == USART_4 || USART_x == USART_5)
00000a  2c02              CMP      r4,#2
00000c  d005              BEQ      |L5.26|
00000e  2c03              CMP      r4,#3
000010  d003              BEQ      |L5.26|
000012  2c04              CMP      r4,#4
000014  d001              BEQ      |L5.26|
000016  2c05              CMP      r4,#5
000018  d104              BNE      |L5.36|
                  |L5.26|
;;;598        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);  /* Enable DMA1 clock */
00001a  2101              MOVS     r1,#1
00001c  0548              LSLS     r0,r1,#21
00001e  f7fffffe          BL       RCC_AHB1PeriphClockCmd
000022  e003              B        |L5.44|
                  |L5.36|
;;;599      else
;;;600        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);  /* Enable DMA2 clock */
000024  2101              MOVS     r1,#1
000026  0588              LSLS     r0,r1,#22
000028  f7fffffe          BL       RCC_AHB1PeriphClockCmd
                  |L5.44|
;;;601    
;;;602      if(USART_x == USART_1)
00002c  2c01              CMP      r4,#1
00002e  d10e              BNE      |L5.78|
;;;603      {
;;;604        DMA_DeInit(DMA2_Stream7);
000030  4868              LDR      r0,|L5.468|
000032  f7fffffe          BL       DMA_DeInit
;;;605        while(DMA_GetCmdStatus(DMA2_Stream7) != DISABLE);
000036  bf00              NOP      
                  |L5.56|
000038  4866              LDR      r0,|L5.468|
00003a  f7fffffe          BL       DMA_GetCmdStatus
00003e  2800              CMP      r0,#0
000040  d1fa              BNE      |L5.56|
;;;606    
;;;607        DMA_InitStructure.DMA_Channel = DMA_Channel_4;                    /* Channel selection */
000042  f04f6000          MOV      r0,#0x8000000
000046  9001              STR      r0,[sp,#4]
;;;608        DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&USART1->DR; /* Set the DMA source: peripheral data register address */
000048  4863              LDR      r0,|L5.472|
00004a  9002              STR      r0,[sp,#8]
00004c  e05b              B        |L5.262|
                  |L5.78|
;;;609      }
;;;610    
;;;611      else if(USART_x == USART_2)
00004e  2c02              CMP      r4,#2
000050  d10e              BNE      |L5.112|
;;;612      {
;;;613        DMA_DeInit(DMA1_Stream6);
000052  4862              LDR      r0,|L5.476|
000054  f7fffffe          BL       DMA_DeInit
;;;614        while(DMA_GetCmdStatus(DMA1_Stream6) != DISABLE);
000058  bf00              NOP      
                  |L5.90|
00005a  4860              LDR      r0,|L5.476|
00005c  f7fffffe          BL       DMA_GetCmdStatus
000060  2800              CMP      r0,#0
000062  d1fa              BNE      |L5.90|
;;;615    
;;;616        DMA_InitStructure.DMA_Channel = DMA_Channel_4;                    /* Channel selection */
000064  f04f6000          MOV      r0,#0x8000000
000068  9001              STR      r0,[sp,#4]
;;;617        DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&USART2->DR; /* Set the DMA source: peripheral data register address */
00006a  485d              LDR      r0,|L5.480|
00006c  9002              STR      r0,[sp,#8]
00006e  e04a              B        |L5.262|
                  |L5.112|
;;;618      }
;;;619    
;;;620      else if(USART_x == USART_3)
000070  2c03              CMP      r4,#3
000072  d110              BNE      |L5.150|
;;;621      {
;;;622        DMA_DeInit(DMA1_Stream3);
000074  4859              LDR      r0,|L5.476|
000076  3848              SUBS     r0,r0,#0x48
000078  f7fffffe          BL       DMA_DeInit
;;;623        while(DMA_GetCmdStatus(DMA1_Stream3) != DISABLE);
00007c  bf00              NOP      
                  |L5.126|
00007e  4857              LDR      r0,|L5.476|
000080  3848              SUBS     r0,r0,#0x48
000082  f7fffffe          BL       DMA_GetCmdStatus
000086  2800              CMP      r0,#0
000088  d1f9              BNE      |L5.126|
;;;624    
;;;625        DMA_InitStructure.DMA_Channel = DMA_Channel_4;                    /* Channel selection */
00008a  f04f6000          MOV      r0,#0x8000000
00008e  9001              STR      r0,[sp,#4]
;;;626        DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&USART3->DR; /* Set the DMA source: peripheral data register address */
000090  4854              LDR      r0,|L5.484|
000092  9002              STR      r0,[sp,#8]
000094  e037              B        |L5.262|
                  |L5.150|
;;;627      }
;;;628    
;;;629      else if(USART_x == USART_4)
000096  2c04              CMP      r4,#4
000098  d110              BNE      |L5.188|
;;;630      {
;;;631        DMA_DeInit(DMA1_Stream4);
00009a  4850              LDR      r0,|L5.476|
00009c  3830              SUBS     r0,r0,#0x30
00009e  f7fffffe          BL       DMA_DeInit
;;;632        while(DMA_GetCmdStatus(DMA1_Stream4) != DISABLE);
0000a2  bf00              NOP      
                  |L5.164|
0000a4  484d              LDR      r0,|L5.476|
0000a6  3830              SUBS     r0,r0,#0x30
0000a8  f7fffffe          BL       DMA_GetCmdStatus
0000ac  2800              CMP      r0,#0
0000ae  d1f9              BNE      |L5.164|
;;;633    
;;;634        DMA_InitStructure.DMA_Channel = DMA_Channel_4;                    /* Channel selection */
0000b0  f04f6000          MOV      r0,#0x8000000
0000b4  9001              STR      r0,[sp,#4]
;;;635        DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&UART4->DR;  /* Set the DMA source: peripheral data register address */
0000b6  484c              LDR      r0,|L5.488|
0000b8  9002              STR      r0,[sp,#8]
0000ba  e024              B        |L5.262|
                  |L5.188|
;;;636      }
;;;637    
;;;638      else if(USART_x == USART_5)
0000bc  2c05              CMP      r4,#5
0000be  d110              BNE      |L5.226|
;;;639      {
;;;640        DMA_DeInit(DMA1_Stream7);
0000c0  4846              LDR      r0,|L5.476|
0000c2  3018              ADDS     r0,r0,#0x18
0000c4  f7fffffe          BL       DMA_DeInit
;;;641        while(DMA_GetCmdStatus(DMA1_Stream7) != DISABLE);
0000c8  bf00              NOP      
                  |L5.202|
0000ca  4844              LDR      r0,|L5.476|
0000cc  3018              ADDS     r0,r0,#0x18
0000ce  f7fffffe          BL       DMA_GetCmdStatus
0000d2  2800              CMP      r0,#0
0000d4  d1f9              BNE      |L5.202|
;;;642    
;;;643        DMA_InitStructure.DMA_Channel = DMA_Channel_4;                    /* Channel selection */
0000d6  f04f6000          MOV      r0,#0x8000000
0000da  9001              STR      r0,[sp,#4]
;;;644        DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&UART5->DR;  /* Set the DMA source: peripheral data register address */
0000dc  4843              LDR      r0,|L5.492|
0000de  9002              STR      r0,[sp,#8]
0000e0  e011              B        |L5.262|
                  |L5.226|
;;;645      }
;;;646    
;;;647      else if(USART_x == USART_6)
0000e2  2c06              CMP      r4,#6
0000e4  d10f              BNE      |L5.262|
;;;648      {
;;;649        DMA_DeInit(DMA2_Stream6);
0000e6  483b              LDR      r0,|L5.468|
0000e8  3818              SUBS     r0,r0,#0x18
0000ea  f7fffffe          BL       DMA_DeInit
;;;650        while(DMA_GetCmdStatus(DMA2_Stream6) != DISABLE);
0000ee  bf00              NOP      
                  |L5.240|
0000f0  4838              LDR      r0,|L5.468|
0000f2  3818              SUBS     r0,r0,#0x18
0000f4  f7fffffe          BL       DMA_GetCmdStatus
0000f8  2800              CMP      r0,#0
0000fa  d1f9              BNE      |L5.240|
;;;651    
;;;652        DMA_InitStructure.DMA_Channel = DMA_Channel_5;                    /* Channel selection */
0000fc  f04f6020          MOV      r0,#0xa000000
000100  9001              STR      r0,[sp,#4]
;;;653        DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&USART6->DR; /* Set the DMA source: peripheral data register address */
000102  483b              LDR      r0,|L5.496|
000104  9002              STR      r0,[sp,#8]
                  |L5.262|
;;;654      }
;;;655    
;;;656      DMA_InitStructure.DMA_Memory0BaseAddr = DMA_Memory0BaseAddr;            /* Memory address */
000106  9503              STR      r5,[sp,#0xc]
;;;657      DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;                 /* Data Memory to Peripheral */
000108  2040              MOVS     r0,#0x40
00010a  9004              STR      r0,[sp,#0x10]
;;;658      DMA_InitStructure.DMA_BufferSize = DMA_BufferSize;                      /* Specifies the DMA channel DMA buffer size */
00010c  9605              STR      r6,[sp,#0x14]
;;;659      DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;        /* Peripheral address does not increase */
00010e  2000              MOVS     r0,#0
000110  9006              STR      r0,[sp,#0x18]
;;;660      DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;                 /* Memory address increment */
000112  f44f6080          MOV      r0,#0x400
000116  9007              STR      r0,[sp,#0x1c]
;;;661      DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte; /* Peripheral data width of 8 bit */
000118  2000              MOVS     r0,#0
00011a  9008              STR      r0,[sp,#0x20]
;;;662      DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;         /* Memory data width of 8 bit */
00011c  9009              STR      r0,[sp,#0x24]
;;;663      DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;                           /* Use Normal mode */
00011e  900a              STR      r0,[sp,#0x28]
;;;664      DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;                   /* Medium priority */
000120  f44f3080          MOV      r0,#0x10000
000124  900b              STR      r0,[sp,#0x2c]
;;;665      DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
000126  2000              MOVS     r0,#0
000128  900c              STR      r0,[sp,#0x30]
;;;666      DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
00012a  2003              MOVS     r0,#3
00012c  900d              STR      r0,[sp,#0x34]
;;;667      DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;             /* A single transmission burst memory */
00012e  2000              MOVS     r0,#0
000130  900e              STR      r0,[sp,#0x38]
;;;668      DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;     /* Peripherals single transmission burst */
000132  900f              STR      r0,[sp,#0x3c]
;;;669    
;;;670      if(USART_x == USART_1)
000134  2c01              CMP      r4,#1
000136  d108              BNE      |L5.330|
;;;671      {
;;;672        DMA_Init(DMA2_Stream7, &DMA_InitStructure);
000138  a901              ADD      r1,sp,#4
00013a  4826              LDR      r0,|L5.468|
00013c  f7fffffe          BL       DMA_Init
;;;673        DMA_Cmd(DMA2_Stream7, DISABLE);
000140  2100              MOVS     r1,#0
000142  4824              LDR      r0,|L5.468|
000144  f7fffffe          BL       DMA_Cmd
000148  e03d              B        |L5.454|
                  |L5.330|
;;;674      }
;;;675    
;;;676      else if(USART_x == USART_2)
00014a  2c02              CMP      r4,#2
00014c  d108              BNE      |L5.352|
;;;677      {
;;;678        DMA_Init(DMA1_Stream6, &DMA_InitStructure);
00014e  a901              ADD      r1,sp,#4
000150  4822              LDR      r0,|L5.476|
000152  f7fffffe          BL       DMA_Init
;;;679        DMA_Cmd(DMA1_Stream6, DISABLE);
000156  2100              MOVS     r1,#0
000158  4820              LDR      r0,|L5.476|
00015a  f7fffffe          BL       DMA_Cmd
00015e  e032              B        |L5.454|
                  |L5.352|
;;;680      }
;;;681    
;;;682      else if(USART_x == USART_3)
000160  2c03              CMP      r4,#3
000162  d10a              BNE      |L5.378|
;;;683      {
;;;684        DMA_Init(DMA1_Stream3, &DMA_InitStructure);
000164  a901              ADD      r1,sp,#4
000166  481d              LDR      r0,|L5.476|
000168  3848              SUBS     r0,r0,#0x48
00016a  f7fffffe          BL       DMA_Init
;;;685        DMA_Cmd(DMA1_Stream3, DISABLE);
00016e  2100              MOVS     r1,#0
000170  481a              LDR      r0,|L5.476|
000172  3848              SUBS     r0,r0,#0x48
000174  f7fffffe          BL       DMA_Cmd
000178  e025              B        |L5.454|
                  |L5.378|
;;;686      }
;;;687    
;;;688      else if(USART_x == USART_4)
00017a  2c04              CMP      r4,#4
00017c  d10a              BNE      |L5.404|
;;;689      {
;;;690        DMA_Init(DMA1_Stream4, &DMA_InitStructure);
00017e  a901              ADD      r1,sp,#4
000180  4816              LDR      r0,|L5.476|
000182  3830              SUBS     r0,r0,#0x30
000184  f7fffffe          BL       DMA_Init
;;;691        DMA_Cmd(DMA1_Stream4, DISABLE);
000188  2100              MOVS     r1,#0
00018a  4814              LDR      r0,|L5.476|
00018c  3830              SUBS     r0,r0,#0x30
00018e  f7fffffe          BL       DMA_Cmd
000192  e018              B        |L5.454|
                  |L5.404|
;;;692      }
;;;693    
;;;694      else if(USART_x == USART_5)
000194  2c05              CMP      r4,#5
000196  d10a              BNE      |L5.430|
;;;695      {
;;;696        DMA_Init(DMA1_Stream7, &DMA_InitStructure);
000198  a901              ADD      r1,sp,#4
00019a  4810              LDR      r0,|L5.476|
00019c  3018              ADDS     r0,r0,#0x18
00019e  f7fffffe          BL       DMA_Init
;;;697        DMA_Cmd(DMA1_Stream7, DISABLE);
0001a2  2100              MOVS     r1,#0
0001a4  480d              LDR      r0,|L5.476|
0001a6  3018              ADDS     r0,r0,#0x18
0001a8  f7fffffe          BL       DMA_Cmd
0001ac  e00b              B        |L5.454|
                  |L5.430|
;;;698      }
;;;699    
;;;700      else if(USART_x == USART_6)
0001ae  2c06              CMP      r4,#6
0001b0  d109              BNE      |L5.454|
;;;701      {
;;;702        DMA_Init(DMA2_Stream6, &DMA_InitStructure);
0001b2  a901              ADD      r1,sp,#4
0001b4  4807              LDR      r0,|L5.468|
0001b6  3818              SUBS     r0,r0,#0x18
0001b8  f7fffffe          BL       DMA_Init
;;;703        DMA_Cmd(DMA2_Stream6, DISABLE);
0001bc  2100              MOVS     r1,#0
0001be  4805              LDR      r0,|L5.468|
0001c0  3818              SUBS     r0,r0,#0x18
0001c2  f7fffffe          BL       DMA_Cmd
                  |L5.454|
;;;704      }
;;;705      
;;;706      /* Starting a byte of data to make a DMA transmission completion flag */
;;;707      USART_DMA_TX(USART_x, 1);
0001c6  2101              MOVS     r1,#1
0001c8  4620              MOV      r0,r4
0001ca  f7fffffe          BL       USART_DMA_TX
;;;708    }
0001ce  b010              ADD      sp,sp,#0x40
0001d0  bd70              POP      {r4-r6,pc}
;;;709    
                          ENDP

0001d2  0000              DCW      0x0000
                  |L5.468|
                          DCD      0x400264b8
                  |L5.472|
                          DCD      0x40011004
                  |L5.476|
                          DCD      0x400260a0
                  |L5.480|
                          DCD      0x40004404
                  |L5.484|
                          DCD      0x40004804
                  |L5.488|
                          DCD      0x40004c04
                  |L5.492|
                          DCD      0x40005004
                  |L5.496|
                          DCD      0x40011404

                          AREA ||i.USART_GetReceiveDataNumber||, CODE, READONLY, ALIGN=2

                  USART_GetReceiveDataNumber PROC
;;;1077   *****************************************************************/
;;;1078   uint16_t USART_GetReceiveDataNumber(uint8_t USART_x)
000000  b570              PUSH     {r4-r6,lr}
;;;1079   {
000002  4604              MOV      r4,r0
;;;1080     uint16_t number = 0;
000004  2500              MOVS     r5,#0
;;;1081     
;;;1082     if(USART_x == USART_1)
000006  2c01              CMP      r4,#1
000008  d106              BNE      |L6.24|
;;;1083     {
;;;1084       number = USART1_BufferSize_Rx - DMA_GetCurrDataCounter(DMA2_Stream2);
00000a  481c              LDR      r0,|L6.124|
00000c  f7fffffe          BL       DMA_GetCurrDataCounter
000010  f5c06080          RSB      r0,r0,#0x400
000014  b285              UXTH     r5,r0
000016  e02f              B        |L6.120|
                  |L6.24|
;;;1085     }
;;;1086     else if(USART_x == USART_2)
000018  2c02              CMP      r4,#2
00001a  d106              BNE      |L6.42|
;;;1087     {
;;;1088       number = USART2_BufferSize_Rx - DMA_GetCurrDataCounter(DMA1_Stream5);
00001c  4818              LDR      r0,|L6.128|
00001e  f7fffffe          BL       DMA_GetCurrDataCounter
000022  f1c00001          RSB      r0,r0,#1
000026  b285              UXTH     r5,r0
000028  e026              B        |L6.120|
                  |L6.42|
;;;1089     }
;;;1090     else if(USART_x == USART_3)
00002a  2c03              CMP      r4,#3
00002c  d107              BNE      |L6.62|
;;;1091     {
;;;1092       number = USART3_BufferSize_Rx - DMA_GetCurrDataCounter(DMA1_Stream1);
00002e  4814              LDR      r0,|L6.128|
000030  3860              SUBS     r0,r0,#0x60
000032  f7fffffe          BL       DMA_GetCurrDataCounter
000036  f1c00001          RSB      r0,r0,#1
00003a  b285              UXTH     r5,r0
00003c  e01c              B        |L6.120|
                  |L6.62|
;;;1093     }
;;;1094     else if(USART_x == USART_4)
00003e  2c04              CMP      r4,#4
000040  d107              BNE      |L6.82|
;;;1095     {
;;;1096       number = USART4_BufferSize_Rx - DMA_GetCurrDataCounter(DMA1_Stream2);
000042  480f              LDR      r0,|L6.128|
000044  3848              SUBS     r0,r0,#0x48
000046  f7fffffe          BL       DMA_GetCurrDataCounter
00004a  f1c00001          RSB      r0,r0,#1
00004e  b285              UXTH     r5,r0
000050  e012              B        |L6.120|
                  |L6.82|
;;;1097     }
;;;1098     else if(USART_x == USART_5)
000052  2c05              CMP      r4,#5
000054  d107              BNE      |L6.102|
;;;1099     {
;;;1100       number = USART5_BufferSize_Rx - DMA_GetCurrDataCounter(DMA1_Stream0);
000056  480a              LDR      r0,|L6.128|
000058  3878              SUBS     r0,r0,#0x78
00005a  f7fffffe          BL       DMA_GetCurrDataCounter
00005e  f1c00001          RSB      r0,r0,#1
000062  b285              UXTH     r5,r0
000064  e008              B        |L6.120|
                  |L6.102|
;;;1101     }
;;;1102     else if(USART_x == USART_6)
000066  2c06              CMP      r4,#6
000068  d106              BNE      |L6.120|
;;;1103     {
;;;1104       number = USART6_BufferSize_Rx - DMA_GetCurrDataCounter(DMA2_Stream1);
00006a  4804              LDR      r0,|L6.124|
00006c  3818              SUBS     r0,r0,#0x18
00006e  f7fffffe          BL       DMA_GetCurrDataCounter
000072  f1c00001          RSB      r0,r0,#1
000076  b285              UXTH     r5,r0
                  |L6.120|
;;;1105     }
;;;1106     
;;;1107     return number;
000078  4628              MOV      r0,r5
;;;1108   }
00007a  bd70              POP      {r4-r6,pc}
;;;1109   
                          ENDP

                  |L6.124|
                          DCD      0x40026440
                  |L6.128|
                          DCD      0x40026088

                          AREA ||i.USART_IN||, CODE, READONLY, ALIGN=2

                  USART_IN PROC
;;;1025   *****************************************************************/
;;;1026   void USART_IN(uint8_t USART_x)
000000  b510              PUSH     {r4,lr}
;;;1027   {
000002  4604              MOV      r4,r0
;;;1028     if(USART_x == USART_1)
000004  2c01              CMP      r4,#1
000006  d108              BNE      |L7.26|
;;;1029     {
;;;1030       memset(USART1_Buffer_Rx, 0, USART1_BufferSize_Rx);  /* Empty memory */
000008  0281              LSLS     r1,r0,#10
00000a  481d              LDR      r0,|L7.128|
00000c  f7fffffe          BL       __aeabi_memclr
;;;1031       
;;;1032       USART_DMA_RX(USART_1, USART1_BufferSize_Rx);
000010  02a1              LSLS     r1,r4,#10
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       USART_DMA_RX
000018  e030              B        |L7.124|
                  |L7.26|
;;;1033     }
;;;1034     
;;;1035     else if(USART_x == USART_2)
00001a  2c02              CMP      r4,#2
00001c  d107              BNE      |L7.46|
;;;1036     {
;;;1037       memset(USART2_Buffer_Rx, 0, USART2_BufferSize_Rx);  /* Empty memory */
00001e  4819              LDR      r0,|L7.132|
000020  2100              MOVS     r1,#0
000022  7001              STRB     r1,[r0,#0]
;;;1038       
;;;1039       USART_DMA_RX(USART_2, USART2_BufferSize_Rx);
000024  2101              MOVS     r1,#1
000026  2002              MOVS     r0,#2
000028  f7fffffe          BL       USART_DMA_RX
00002c  e026              B        |L7.124|
                  |L7.46|
;;;1040     }
;;;1041     
;;;1042     else if(USART_x == USART_3)
00002e  2c03              CMP      r4,#3
000030  d107              BNE      |L7.66|
;;;1043     {
;;;1044       memset(USART3_Buffer_Rx, 0, USART3_BufferSize_Rx);  /* Empty memory */
000032  4815              LDR      r0,|L7.136|
000034  2100              MOVS     r1,#0
000036  7001              STRB     r1,[r0,#0]
;;;1045       
;;;1046       USART_DMA_RX(USART_3, USART3_BufferSize_Rx);
000038  2101              MOVS     r1,#1
00003a  2003              MOVS     r0,#3
00003c  f7fffffe          BL       USART_DMA_RX
000040  e01c              B        |L7.124|
                  |L7.66|
;;;1047     }
;;;1048     
;;;1049     else if(USART_x == USART_4)
000042  2c04              CMP      r4,#4
000044  d107              BNE      |L7.86|
;;;1050     {
;;;1051       memset(USART4_Buffer_Rx, 0, USART4_BufferSize_Rx);  /* Empty memory */
000046  4811              LDR      r0,|L7.140|
000048  2100              MOVS     r1,#0
00004a  7001              STRB     r1,[r0,#0]
;;;1052       
;;;1053       USART_DMA_RX(USART_4, USART4_BufferSize_Rx);
00004c  2101              MOVS     r1,#1
00004e  2004              MOVS     r0,#4
000050  f7fffffe          BL       USART_DMA_RX
000054  e012              B        |L7.124|
                  |L7.86|
;;;1054     }
;;;1055     
;;;1056     else if(USART_x == USART_5)
000056  2c05              CMP      r4,#5
000058  d107              BNE      |L7.106|
;;;1057     {
;;;1058       memset(USART5_Buffer_Rx, 0, USART5_BufferSize_Rx);  /* Empty memory */
00005a  480d              LDR      r0,|L7.144|
00005c  2100              MOVS     r1,#0
00005e  7001              STRB     r1,[r0,#0]
;;;1059       
;;;1060       USART_DMA_RX(USART_5, USART5_BufferSize_Rx);
000060  2101              MOVS     r1,#1
000062  2005              MOVS     r0,#5
000064  f7fffffe          BL       USART_DMA_RX
000068  e008              B        |L7.124|
                  |L7.106|
;;;1061     }
;;;1062     
;;;1063     else if(USART_x == USART_6)
00006a  2c06              CMP      r4,#6
00006c  d106              BNE      |L7.124|
;;;1064     {
;;;1065       memset(USART6_Buffer_Rx, 0, USART6_BufferSize_Rx);  /* Empty memory */
00006e  4809              LDR      r0,|L7.148|
000070  2100              MOVS     r1,#0
000072  7001              STRB     r1,[r0,#0]
;;;1066       
;;;1067       USART_DMA_RX(USART_6, USART6_BufferSize_Rx);
000074  2101              MOVS     r1,#1
000076  2006              MOVS     r0,#6
000078  f7fffffe          BL       USART_DMA_RX
                  |L7.124|
;;;1068     }
;;;1069   }
00007c  bd10              POP      {r4,pc}
;;;1070   
                          ENDP

00007e  0000              DCW      0x0000
                  |L7.128|
                          DCD      USART1_Buffer_Rx
                  |L7.132|
                          DCD      USART2_Buffer_Rx
                  |L7.136|
                          DCD      USART3_Buffer_Rx
                  |L7.140|
                          DCD      USART4_Buffer_Rx
                  |L7.144|
                          DCD      USART5_Buffer_Rx
                  |L7.148|
                          DCD      USART6_Buffer_Rx

                          AREA ||i.USART_OUT||, CODE, READONLY, ALIGN=2

                  USART_OUT PROC
;;;971    *****************************************************************/
;;;972    void USART_OUT(uint8_t USART_x, uint8_t* Buffer, uint16_t BufferSize)
000000  b570              PUSH     {r4-r6,lr}
;;;973    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;974      if(USART_x == USART_1)
000008  2c01              CMP      r4,#1
00000a  d10d              BNE      |L8.40|
;;;975      {
;;;976        while(DMA_GetFlagStatus(DMA2_Stream7, DMA_FLAG_TCIF7)==0);
00000c  bf00              NOP      
                  |L8.14|
00000e  f04f5120          MOV      r1,#0x28000000
000012  4830              LDR      r0,|L8.212|
000014  f7fffffe          BL       DMA_GetFlagStatus
000018  2800              CMP      r0,#0
00001a  d0f8              BEQ      |L8.14|
;;;977    
;;;978        memcpy(USART1_Buffer_Tx, Buffer, BufferSize); /* Copy memory */
00001c  462a              MOV      r2,r5
00001e  4631              MOV      r1,r6
000020  482d              LDR      r0,|L8.216|
000022  f7fffffe          BL       __aeabi_memcpy
000026  e04f              B        |L8.200|
                  |L8.40|
;;;979      }
;;;980      
;;;981      else if(USART_x == USART_2)
000028  2c02              CMP      r4,#2
00002a  d10c              BNE      |L8.70|
;;;982      {
;;;983        while(DMA_GetFlagStatus(DMA1_Stream6, DMA_FLAG_TCIF6)==0);
00002c  bf00              NOP      
                  |L8.46|
00002e  492b              LDR      r1,|L8.220|
000030  482b              LDR      r0,|L8.224|
000032  f7fffffe          BL       DMA_GetFlagStatus
000036  2800              CMP      r0,#0
000038  d0f9              BEQ      |L8.46|
;;;984    
;;;985        memcpy(USART2_Buffer_Tx, Buffer, BufferSize); /* Copy memory */
00003a  462a              MOV      r2,r5
00003c  4631              MOV      r1,r6
00003e  4829              LDR      r0,|L8.228|
000040  f7fffffe          BL       __aeabi_memcpy
000044  e040              B        |L8.200|
                  |L8.70|
;;;986      }
;;;987      
;;;988      else if(USART_x == USART_3)
000046  2c03              CMP      r4,#3
000048  d10e              BNE      |L8.104|
;;;989      {
;;;990        while(DMA_GetFlagStatus(DMA1_Stream3, DMA_FLAG_TCIF3)==0);
00004a  bf00              NOP      
                  |L8.76|
00004c  f04f51c0          MOV      r1,#0x18000000
000050  4823              LDR      r0,|L8.224|
000052  3848              SUBS     r0,r0,#0x48
000054  f7fffffe          BL       DMA_GetFlagStatus
000058  2800              CMP      r0,#0
00005a  d0f7              BEQ      |L8.76|
;;;991    
;;;992        memcpy(USART3_Buffer_Tx, Buffer, BufferSize); /* Copy memory */
00005c  462a              MOV      r2,r5
00005e  4631              MOV      r1,r6
000060  4821              LDR      r0,|L8.232|
000062  f7fffffe          BL       __aeabi_memcpy
000066  e02f              B        |L8.200|
                  |L8.104|
;;;993      }
;;;994      
;;;995      else if(USART_x == USART_4)
000068  2c04              CMP      r4,#4
00006a  d10d              BNE      |L8.136|
;;;996      {
;;;997        while(DMA_GetFlagStatus(DMA1_Stream4, DMA_FLAG_TCIF4)==0);
00006c  bf00              NOP      
                  |L8.110|
00006e  491f              LDR      r1,|L8.236|
000070  481b              LDR      r0,|L8.224|
000072  3830              SUBS     r0,r0,#0x30
000074  f7fffffe          BL       DMA_GetFlagStatus
000078  2800              CMP      r0,#0
00007a  d0f8              BEQ      |L8.110|
;;;998    
;;;999        memcpy(USART4_Buffer_Tx, Buffer, BufferSize); /* Copy memory */
00007c  462a              MOV      r2,r5
00007e  4631              MOV      r1,r6
000080  481b              LDR      r0,|L8.240|
000082  f7fffffe          BL       __aeabi_memcpy
000086  e01f              B        |L8.200|
                  |L8.136|
;;;1000     }
;;;1001     
;;;1002     else if(USART_x == USART_5)
000088  2c05              CMP      r4,#5
00008a  d10e              BNE      |L8.170|
;;;1003     {
;;;1004       while(DMA_GetFlagStatus(DMA1_Stream7, DMA_FLAG_TCIF7)==0);
00008c  bf00              NOP      
                  |L8.142|
00008e  f04f5120          MOV      r1,#0x28000000
000092  4813              LDR      r0,|L8.224|
000094  3018              ADDS     r0,r0,#0x18
000096  f7fffffe          BL       DMA_GetFlagStatus
00009a  2800              CMP      r0,#0
00009c  d0f7              BEQ      |L8.142|
;;;1005   
;;;1006       memcpy(USART5_Buffer_Tx, Buffer, BufferSize); /* Copy memory */
00009e  462a              MOV      r2,r5
0000a0  4631              MOV      r1,r6
0000a2  4814              LDR      r0,|L8.244|
0000a4  f7fffffe          BL       __aeabi_memcpy
0000a8  e00e              B        |L8.200|
                  |L8.170|
;;;1007     }
;;;1008     
;;;1009     else if(USART_x == USART_6)
0000aa  2c06              CMP      r4,#6
0000ac  d10c              BNE      |L8.200|
;;;1010     {
;;;1011       while(DMA_GetFlagStatus(DMA2_Stream6, DMA_FLAG_TCIF6)==0);
0000ae  bf00              NOP      
                  |L8.176|
0000b0  490a              LDR      r1,|L8.220|
0000b2  4808              LDR      r0,|L8.212|
0000b4  3818              SUBS     r0,r0,#0x18
0000b6  f7fffffe          BL       DMA_GetFlagStatus
0000ba  2800              CMP      r0,#0
0000bc  d0f8              BEQ      |L8.176|
;;;1012   
;;;1013       memcpy(USART6_Buffer_Tx, Buffer, BufferSize); /* Copy memory */
0000be  462a              MOV      r2,r5
0000c0  4631              MOV      r1,r6
0000c2  480d              LDR      r0,|L8.248|
0000c4  f7fffffe          BL       __aeabi_memcpy
                  |L8.200|
;;;1014     }
;;;1015     
;;;1016     USART_DMA_TX(USART_x, BufferSize);
0000c8  4629              MOV      r1,r5
0000ca  4620              MOV      r0,r4
0000cc  f7fffffe          BL       USART_DMA_TX
;;;1017   }
0000d0  bd70              POP      {r4-r6,pc}
;;;1018   
                          ENDP

0000d2  0000              DCW      0x0000
                  |L8.212|
                          DCD      0x400264b8
                  |L8.216|
                          DCD      USART1_Buffer_Tx
                  |L8.220|
                          DCD      0x20200000
                  |L8.224|
                          DCD      0x400260a0
                  |L8.228|
                          DCD      USART2_Buffer_Tx
                  |L8.232|
                          DCD      USART3_Buffer_Tx
                  |L8.236|
                          DCD      0x20000020
                  |L8.240|
                          DCD      USART4_Buffer_Tx
                  |L8.244|
                          DCD      USART5_Buffer_Tx
                  |L8.248|
                          DCD      USART6_Buffer_Tx

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  USART1_Buffer_Tx
                          %        1024
                  USART1_Buffer_Rx
                          %        1024

                          AREA ||.data||, DATA, ALIGN=0

                  USART2_Buffer_Tx
000000  00                DCB      0x00
                  USART2_Buffer_Rx
000001  00                DCB      0x00
                  USART3_Buffer_Tx
000002  00                DCB      0x00
                  USART3_Buffer_Rx
000003  00                DCB      0x00
                  USART4_Buffer_Tx
000004  00                DCB      0x00
                  USART4_Buffer_Rx
000005  00                DCB      0x00
                  USART5_Buffer_Tx
000006  00                DCB      0x00
                  USART5_Buffer_Rx
000007  00                DCB      0x00
                  USART6_Buffer_Tx
000008  00                DCB      0x00
                  USART6_Buffer_Rx
000009  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\USART.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_USART_c_3deb77c7____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_USART_c_3deb77c7____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_USART_c_3deb77c7____REVSH|
#line 144
|__asm___7_USART_c_3deb77c7____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_USART_c_3deb77c7____RRX|
#line 300
|__asm___7_USART_c_3deb77c7____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
