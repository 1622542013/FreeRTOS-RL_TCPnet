; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\net_debug.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\net_debug.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp\inc -I..\..\User\bsp -I..\..\User -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM4F -I..\..\RL-ARM\Config -I..\..\RL-ARM\Driver -I..\..\RL-ARM\RL-RTX\inc -IC:\Keil4.74\ARM\RV31\INC -IC:\Keil4.74\ARM\CMSIS\Include -IC:\Keil4.74\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -D__RTX --omf_browse=.\flash\obj\net_debug.crf ..\..\RL-ARM\Config\Net_Debug.c]
                          THUMB

                          AREA ||i.__debug__||, CODE, READONLY, ALIGN=1

                  __debug__ PROC
;;;682    
;;;683    void __debug__ (U32 proc, const char *fmt, ...) {
000000  4770              BX       lr
;;;684      /* Print TCPnet Debug messages. */
;;;685      va_list args;
;;;686    
;;;687      switch (proc) {
;;;688    #if (DBG_MEM > 1)
;;;689        case MODULE_MEM:  break;
;;;690    #endif
;;;691    #if (DBG_ETH > 1)
;;;692        case MODULE_ETH:  break;
;;;693    #endif
;;;694    #if (DBG_PPP > 1)
;;;695        case MODULE_PPP:  break;
;;;696    #endif
;;;697    #if (DBG_SLIP > 1)
;;;698        case MODULE_SLIP: break;
;;;699    #endif
;;;700    #if (DBG_ARP > 1)
;;;701        case MODULE_ARP:  break;
;;;702    #endif
;;;703    #if (DBG_IP > 1)
;;;704        case MODULE_IP:   break;
;;;705    #endif
;;;706    #if (DBG_ICMP > 1)
;;;707        case MODULE_ICMP: break;
;;;708    #endif
;;;709    #if (DBG_IGMP > 1)
;;;710        case MODULE_IGMP: break;
;;;711    #endif
;;;712    #if (DBG_UDP > 1)
;;;713        case MODULE_UDP:  break;
;;;714    #endif
;;;715    #if (DBG_TCP > 1)
;;;716        case MODULE_TCP:  break;
;;;717    #endif
;;;718    #if (DBG_NBNS > 1)
;;;719        case MODULE_NBNS: break;
;;;720    #endif
;;;721    #if (DBG_DHCP > 1)
;;;722        case MODULE_DHCP: break;
;;;723    #endif
;;;724    #if (DBG_DNS > 1)
;;;725        case MODULE_DNS:  break;
;;;726    #endif
;;;727    #if (DBG_SNMP > 1)
;;;728        case MODULE_SNMP: break;
;;;729    #endif
;;;730    #if (DBG_BSD > 1)
;;;731        case MODULE_BSD:  break;
;;;732    #endif
;;;733    #if (DBG_HTTP > 1)
;;;734        case MODULE_HTTP: break;
;;;735    #endif
;;;736    #if (DBG_FTP > 1)
;;;737        case MODULE_FTP:  break;
;;;738    #endif
;;;739    #if (DBG_FTPC > 1)
;;;740        case MODULE_FTPC: break;
;;;741    #endif
;;;742    #if (DBG_TNET > 1)
;;;743        case MODULE_TNET: break;
;;;744    #endif
;;;745    #if (DBG_TFTP > 1)
;;;746        case MODULE_TFTP: break;
;;;747    #endif
;;;748    #if (DBG_TFTPC > 1)
;;;749        case MODULE_TFTPC:break;
;;;750    #endif
;;;751    #if (DBG_SMTP > 1)
;;;752        case MODULE_SMTP: break;
;;;753    #endif
;;;754    #if (DBG_SNTP > 1)
;;;755        case MODULE_SNTP: break;
;;;756    #endif
;;;757        default: return;
;;;758      }
;;;759    #if (DBG_TIME)
;;;760      printf (dbg_time());
;;;761    #endif
;;;762      printf ("%s:",dbg_proc(proc));
;;;763    
;;;764      va_start (args,fmt);
;;;765      vprintf (fmt,args);
;;;766      va_end (args);
;;;767    }
;;;768    
                          ENDP


                          AREA ||i.__error__||, CODE, READONLY, ALIGN=1

                  __error__ PROC
;;;771    
;;;772    void __error__ (U32 proc, const char *fmt, ...) {
000000  4770              BX       lr
;;;773      /* Print TCPnet Error messages. */
;;;774      va_list args;
;;;775    
;;;776      switch (proc) {
;;;777    #if (DBG_MEM > 0)
;;;778        case MODULE_MEM:  break;
;;;779    #endif
;;;780    #if (DBG_ETH > 0)
;;;781        case MODULE_ETH:  break;
;;;782    #endif
;;;783    #if (DBG_PPP > 0)
;;;784        case MODULE_PPP:  break;
;;;785    #endif
;;;786    #if (DBG_SLIP > 0)
;;;787        case MODULE_SLIP: break;
;;;788    #endif
;;;789    #if (DBG_ARP > 0)
;;;790        case MODULE_ARP:  break;
;;;791    #endif
;;;792    #if (DBG_IP > 0)
;;;793        case MODULE_IP:   break;
;;;794    #endif
;;;795    #if (DBG_ICMP > 0)
;;;796        case MODULE_ICMP: break;
;;;797    #endif
;;;798    #if (DBG_IGMP > 0)
;;;799        case MODULE_IGMP: break;
;;;800    #endif
;;;801    #if (DBG_UDP > 0)
;;;802        case MODULE_UDP:  break;
;;;803    #endif
;;;804    #if (DBG_TCP > 0)
;;;805        case MODULE_TCP:  break;
;;;806    #endif
;;;807    #if (DBG_NBNS > 0)
;;;808        case MODULE_NBNS: break;
;;;809    #endif
;;;810    #if (DBG_DHCP > 0)
;;;811        case MODULE_DHCP: break;
;;;812    #endif
;;;813    #if (DBG_DNS > 0)
;;;814        case MODULE_DNS:  break;
;;;815    #endif
;;;816    #if (DBG_SNMP > 0)
;;;817        case MODULE_SNMP: break;
;;;818    #endif
;;;819    #if (DBG_BSD > 0)
;;;820        case MODULE_BSD:  break;
;;;821    #endif
;;;822    #if (DBG_HTTP > 0)
;;;823        case MODULE_HTTP: break;
;;;824    #endif
;;;825    #if (DBG_FTP > 0)
;;;826        case MODULE_FTP:  break;
;;;827    #endif
;;;828    #if (DBG_FTPC > 0)
;;;829        case MODULE_FTPC: break;
;;;830    #endif
;;;831    #if (DBG_TNET > 0)
;;;832        case MODULE_TNET: break;
;;;833    #endif
;;;834    #if (DBG_TFTP > 0)
;;;835        case MODULE_TFTP: break;
;;;836    #endif
;;;837    #if (DBG_TFTPC > 0)
;;;838        case MODULE_TFTPC:break;
;;;839    #endif
;;;840    #if (DBG_SMTP > 0)
;;;841        case MODULE_SMTP: break;
;;;842    #endif
;;;843    #if (DBG_SNTP > 0)
;;;844        case MODULE_SNTP: break;
;;;845    #endif
;;;846        default: return;
;;;847      }
;;;848    #if (DBG_TIME)
;;;849      printf (dbg_time());
;;;850    #endif
;;;851      printf ("%s-ERR:",dbg_proc(proc));
;;;852    
;;;853      va_start (args,fmt);
;;;854      vprintf (fmt,args);
;;;855      va_end (args);
;;;856    }
;;;857    
                          ENDP


                          AREA ||i.init_debug||, CODE, READONLY, ALIGN=1

                  init_debug PROC
;;;124    
;;;125    void init_debug (void) {
000000  4770              BX       lr
;;;126      /* Add your code to initialize the Debug output. This is usually the  */
;;;127      /* serial interface. The function is called at TCPnet system startup. */
;;;128      /* You may need to customize also the 'putchar()' function.           */
;;;129    
;;;130    }
;;;131    
                          ENDP

