; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\port.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\port.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp\inc -I..\..\User\bsp -I..\..\User -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM4F -I..\..\RL-ARM\Config -I..\..\RL-ARM\Driver -I..\..\RL-ARM\RL-RTX\inc -IC:\Keil4.74\ARM\RV31\INC -IC:\Keil4.74\ARM\CMSIS\Include -IC:\Keil4.74\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -D__RTX --omf_browse=.\flash\obj\port.crf ..\..\FreeRTOS\portable\RVDS\ARM_CM4F\port.c]
                          THUMB

                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=2

                  SysTick_Handler PROC
;;;514    
;;;515    void xPortSysTickHandler( void )
000000  b510              PUSH     {r4,lr}
;;;516    {
;;;517    	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
;;;518    	executes all interrupts must be unmasked.  There is therefore no need to
;;;519    	save and then restore the interrupt mask value as its value is already
;;;520    	known. */
;;;521    	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
000002  bf00              NOP      
000004  2010              MOVS     r0,#0x10
000006  f3ef8111          MRS      r1,BASEPRI
00000a  f3808811          MSR      BASEPRI,r0
00000e  f3bf8f4f          DSB      
000012  f3bf8f6f          ISB      
000016  bf00              NOP      
;;;522    	{
;;;523    		/* Increment the RTOS tick. */
;;;524    		if( xTaskIncrementTick() != pdFALSE )
000018  f7fffffe          BL       xTaskIncrementTick
00001c  b118              CBZ      r0,|L1.38|
;;;525    		{
;;;526    			/* A context switch is required.  Context switching is performed in
;;;527    			the PendSV interrupt.  Pend the PendSV interrupt. */
;;;528    			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
00001e  f04f5080          MOV      r0,#0x10000000
000022  4903              LDR      r1,|L1.48|
000024  6008              STR      r0,[r1,#0]
                  |L1.38|
;;;529    		}
;;;530    	}
;;;531    	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
000026  2000              MOVS     r0,#0
000028  f3808811          MSR      BASEPRI,r0
00002c  bf00              NOP      
;;;532    }
00002e  bd10              POP      {r4,pc}
;;;533    /*-----------------------------------------------------------*/
                          ENDP

                  |L1.48|
                          DCD      0xe000ed04

                          AREA ||i.prvTaskExitError||, CODE, READONLY, ALIGN=2

                  prvTaskExitError PROC
;;;258    
;;;259    static void prvTaskExitError( void )
000000  480e              LDR      r0,|L2.60|
;;;260    {
;;;261    	/* A function that implements a task must not exit or attempt to return to
;;;262    	its caller as there is nothing to return to.  If a task wants to exit it
;;;263    	should instead call vTaskDelete( NULL ).
;;;264    
;;;265    	Artificially force an assert() to be triggered if configASSERT() is
;;;266    	defined, then stop here so application writers can catch the error. */
;;;267    	configASSERT( uxCriticalNesting == ~0UL );
000002  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
000004  1c40              ADDS     r0,r0,#1
000006  d101              BNE      |L2.12|
000008  2001              MOVS     r0,#1
00000a  e000              B        |L2.14|
                  |L2.12|
00000c  2000              MOVS     r0,#0
                  |L2.14|
00000e  b950              CBNZ     r0,|L2.38|
000010  bf00              NOP      
000012  2010              MOVS     r0,#0x10
000014  f3808811          MSR      BASEPRI,r0
000018  f3bf8f4f          DSB      
00001c  f3bf8f6f          ISB      
000020  bf00              NOP      
000022  bf00              NOP      
                  |L2.36|
000024  e7fe              B        |L2.36|
                  |L2.38|
;;;268    	portDISABLE_INTERRUPTS();
000026  bf00              NOP      
000028  2010              MOVS     r0,#0x10
00002a  f3808811          MSR      BASEPRI,r0
00002e  f3bf8f4f          DSB      
000032  f3bf8f6f          ISB      
000036  bf00              NOP      
;;;269    	for( ;; );
000038  bf00              NOP      
                  |L2.58|
00003a  e7fe              B        |L2.58|
;;;270    }
;;;271    /*-----------------------------------------------------------*/
                          ENDP

                  |L2.60|
                          DCD      uxCriticalNesting

                          AREA ||i.pxPortInitialiseStack||, CODE, READONLY, ALIGN=2

                  pxPortInitialiseStack PROC
;;;228     */
;;;229    StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
000000  1f00              SUBS     r0,r0,#4
;;;230    {
;;;231    	/* Simulate the stack frame as it would be created by a context switch
;;;232    	interrupt. */
;;;233    
;;;234    	/* Offset added to account for the way the MCU uses the stack on entry/exit
;;;235    	of interrupts, and to ensure alignment. */
;;;236    	pxTopOfStack--;
;;;237    
;;;238    	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
000002  f04f7380          MOV      r3,#0x1000000
000006  6003              STR      r3,[r0,#0]
;;;239    	pxTopOfStack--;
000008  1f00              SUBS     r0,r0,#4
;;;240    	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
00000a  6001              STR      r1,[r0,#0]
;;;241    	pxTopOfStack--;
00000c  1f00              SUBS     r0,r0,#4
;;;242    	*pxTopOfStack = ( StackType_t ) prvTaskExitError;	/* LR */
00000e  4b05              LDR      r3,|L3.36|
000010  6003              STR      r3,[r0,#0]
;;;243    
;;;244    	/* Save code space by skipping register initialisation. */
;;;245    	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
000012  3814              SUBS     r0,r0,#0x14
;;;246    	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
000014  6002              STR      r2,[r0,#0]
;;;247    
;;;248    	/* A save method is being used that requires each task to maintain its
;;;249    	own exec return value. */
;;;250    	pxTopOfStack--;
000016  1f00              SUBS     r0,r0,#4
;;;251    	*pxTopOfStack = portINITIAL_EXEC_RETURN;
000018  f06f0302          MVN      r3,#2
00001c  6003              STR      r3,[r0,#0]
;;;252    
;;;253    	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
00001e  3820              SUBS     r0,r0,#0x20
;;;254    
;;;255    	return pxTopOfStack;
;;;256    }
000020  4770              BX       lr
;;;257    /*-----------------------------------------------------------*/
                          ENDP

000022  0000              DCW      0x0000
                  |L3.36|
                          DCD      prvTaskExitError

                          AREA ||i.vPortEndScheduler||, CODE, READONLY, ALIGN=2

                  vPortEndScheduler PROC
;;;416    
;;;417    void vPortEndScheduler( void )
000000  480a              LDR      r0,|L4.44|
;;;418    {
;;;419    	/* Not implemented in ports where there is nothing to return to.
;;;420    	Artificially force an assert. */
;;;421    	configASSERT( uxCriticalNesting == 1000UL );
000002  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
000004  f5b07f7a          CMP      r0,#0x3e8
000008  d101              BNE      |L4.14|
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L4.16|
                  |L4.14|
00000e  2000              MOVS     r0,#0
                  |L4.16|
000010  b950              CBNZ     r0,|L4.40|
000012  bf00              NOP      
000014  2010              MOVS     r0,#0x10
000016  f3808811          MSR      BASEPRI,r0
00001a  f3bf8f4f          DSB      
00001e  f3bf8f6f          ISB      
000022  bf00              NOP      
000024  bf00              NOP      
                  |L4.38|
000026  e7fe              B        |L4.38|
                  |L4.40|
;;;422    }
000028  4770              BX       lr
;;;423    /*-----------------------------------------------------------*/
                          ENDP

00002a  0000              DCW      0x0000
                  |L4.44|
                          DCD      uxCriticalNesting

                          AREA ||i.vPortEnterCritical||, CODE, READONLY, ALIGN=2

                  vPortEnterCritical PROC
;;;424    
;;;425    void vPortEnterCritical( void )
000000  bf00              NOP      
000002  2010              MOVS     r0,#0x10
000004  f3808811          MSR      BASEPRI,r0
000008  f3bf8f4f          DSB      
00000c  f3bf8f6f          ISB      
000010  bf00              NOP      
;;;426    {
;;;427    	portDISABLE_INTERRUPTS();
;;;428    	uxCriticalNesting++;
000012  480f              LDR      r0,|L5.80|
000014  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
000016  1c40              ADDS     r0,r0,#1
000018  490d              LDR      r1,|L5.80|
00001a  6008              STR      r0,[r1,#0]  ; uxCriticalNesting
;;;429    
;;;430    	/* This is not the interrupt safe version of the enter critical function so
;;;431    	assert() if it is being called from an interrupt context.  Only API
;;;432    	functions that end in "FromISR" can be used in an interrupt.  Only assert if
;;;433    	the critical nesting count is 1 to protect against recursive calls if the
;;;434    	assert function also uses a critical section. */
;;;435    	if( uxCriticalNesting == 1 )
00001c  4608              MOV      r0,r1
00001e  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
000020  2801              CMP      r0,#1
000022  d113              BNE      |L5.76|
;;;436    	{
;;;437    		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
000024  480b              LDR      r0,|L5.84|
000026  6800              LDR      r0,[r0,#0]
000028  f0100fff          TST      r0,#0xff
00002c  d101              BNE      |L5.50|
00002e  2001              MOVS     r0,#1
000030  e000              B        |L5.52|
                  |L5.50|
000032  2000              MOVS     r0,#0
                  |L5.52|
000034  b950              CBNZ     r0,|L5.76|
000036  bf00              NOP      
000038  2010              MOVS     r0,#0x10
00003a  f3808811          MSR      BASEPRI,r0
00003e  f3bf8f4f          DSB      
000042  f3bf8f6f          ISB      
000046  bf00              NOP      
000048  bf00              NOP      
                  |L5.74|
00004a  e7fe              B        |L5.74|
                  |L5.76|
;;;438    	}
;;;439    }
00004c  4770              BX       lr
;;;440    /*-----------------------------------------------------------*/
                          ENDP

00004e  0000              DCW      0x0000
                  |L5.80|
                          DCD      uxCriticalNesting
                  |L5.84|
                          DCD      0xe000ed04

                          AREA ||i.vPortExitCritical||, CODE, READONLY, ALIGN=2

                  vPortExitCritical PROC
;;;441    
;;;442    void vPortExitCritical( void )
000000  480d              LDR      r0,|L6.56|
;;;443    {
;;;444    	configASSERT( uxCriticalNesting );
000002  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
000004  b950              CBNZ     r0,|L6.28|
000006  bf00              NOP      
000008  2010              MOVS     r0,#0x10
00000a  f3808811          MSR      BASEPRI,r0
00000e  f3bf8f4f          DSB      
000012  f3bf8f6f          ISB      
000016  bf00              NOP      
000018  bf00              NOP      
                  |L6.26|
00001a  e7fe              B        |L6.26|
                  |L6.28|
;;;445    	uxCriticalNesting--;
00001c  4806              LDR      r0,|L6.56|
00001e  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
000020  1e40              SUBS     r0,r0,#1
000022  4905              LDR      r1,|L6.56|
000024  6008              STR      r0,[r1,#0]  ; uxCriticalNesting
;;;446    	if( uxCriticalNesting == 0 )
000026  4608              MOV      r0,r1
000028  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
00002a  b920              CBNZ     r0,|L6.54|
;;;447    	{
;;;448    		portENABLE_INTERRUPTS();
00002c  2000              MOVS     r0,#0
00002e  f3808811          MSR      BASEPRI,r0
000032  bf00              NOP      
000034  bf00              NOP      
                  |L6.54|
;;;449    	}
;;;450    }
000036  4770              BX       lr
;;;451    /*-----------------------------------------------------------*/
                          ENDP

                  |L6.56|
                          DCD      uxCriticalNesting

                          AREA ||i.vPortSetupTimerInterrupt||, CODE, READONLY, ALIGN=2

                  vPortSetupTimerInterrupt PROC
;;;693    
;;;694    	void vPortSetupTimerInterrupt( void )
000000  4803              LDR      r0,|L7.16|
;;;695    	{
;;;696    		/* Calculate the constants required to configure the tick interrupt. */
;;;697    		#if configUSE_TICKLESS_IDLE == 1
;;;698    		{
;;;699    			ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
;;;700    			xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
;;;701    			ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
;;;702    		}
;;;703    		#endif /* configUSE_TICKLESS_IDLE */
;;;704    
;;;705    		/* Configure SysTick to interrupt at the requested rate. */
;;;706    		portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
000002  f04f21e0          MOV      r1,#0xe000e000
000006  6148              STR      r0,[r1,#0x14]
;;;707    		portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
000008  2007              MOVS     r0,#7
00000a  6108              STR      r0,[r1,#0x10]
;;;708    	}
00000c  4770              BX       lr
;;;709    
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0x0002903f

                          AREA ||i.vPortValidateInterruptPriority||, CODE, READONLY, ALIGN=2

                  vPortValidateInterruptPriority PROC
;;;723    
;;;724    	void vPortValidateInterruptPriority( void )
000000  b570              PUSH     {r4-r6,lr}
;;;725    	{
;;;726    	uint32_t ulCurrentInterrupt;
;;;727    	uint8_t ucCurrentPriority;
;;;728    
;;;729    		/* Obtain the number of the currently executing interrupt. */
;;;730    		ulCurrentInterrupt = vPortGetIPSR();
000002  f7fffffe          BL       vPortGetIPSR
000006  4604              MOV      r4,r0
;;;731    
;;;732    		/* Is the interrupt number a user defined interrupt? */
;;;733    		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
000008  2c10              CMP      r4,#0x10
00000a  d317              BCC      |L8.60|
;;;734    		{
;;;735    			/* Look up the interrupt's priority. */
;;;736    			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
00000c  f04f20e0          MOV      r0,#0xe000e000
000010  4420              ADD      r0,r0,r4
000012  f89053f0          LDRB     r5,[r0,#0x3f0]
;;;737    
;;;738    			/* The following assertion will fail if a service routine (ISR) for
;;;739    			an interrupt that has been assigned a priority above
;;;740    			configMAX_SYSCALL_INTERRUPT_PRIORITY calls an ISR safe FreeRTOS API
;;;741    			function.  ISR safe FreeRTOS API functions must *only* be called
;;;742    			from interrupts that have been assigned a priority at or below
;;;743    			configMAX_SYSCALL_INTERRUPT_PRIORITY.
;;;744    
;;;745    			Numerically low interrupt priority numbers represent logically high
;;;746    			interrupt priorities, therefore the priority of the interrupt must
;;;747    			be set to a value equal to or numerically *higher* than
;;;748    			configMAX_SYSCALL_INTERRUPT_PRIORITY.
;;;749    
;;;750    			Interrupts that	use the FreeRTOS API must not be left at their
;;;751    			default priority of	zero as that is the highest possible priority,
;;;752    			which is guaranteed to be above configMAX_SYSCALL_INTERRUPT_PRIORITY,
;;;753    			and	therefore also guaranteed to be invalid.
;;;754    
;;;755    			FreeRTOS maintains separate thread and ISR API functions to ensure
;;;756    			interrupt entry is as fast and simple as possible.
;;;757    
;;;758    			The following links provide detailed information:
;;;759    			http://www.freertos.org/RTOS-Cortex-M3-M4.html
;;;760    			http://www.freertos.org/FAQHelp.html */
;;;761    			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
000016  4815              LDR      r0,|L8.108|
000018  7800              LDRB     r0,[r0,#0]  ; ucMaxSysCallPriority
00001a  4285              CMP      r5,r0
00001c  db01              BLT      |L8.34|
00001e  2001              MOVS     r0,#1
000020  e000              B        |L8.36|
                  |L8.34|
000022  2000              MOVS     r0,#0
                  |L8.36|
000024  b950              CBNZ     r0,|L8.60|
000026  bf00              NOP      
000028  2010              MOVS     r0,#0x10
00002a  f3808811          MSR      BASEPRI,r0
00002e  f3bf8f4f          DSB      
000032  f3bf8f6f          ISB      
000036  bf00              NOP      
000038  bf00              NOP      
                  |L8.58|
00003a  e7fe              B        |L8.58|
                  |L8.60|
;;;762    		}
;;;763    
;;;764    		/* Priority grouping:  The interrupt controller (NVIC) allows the bits
;;;765    		that define each interrupt's priority to be split between bits that
;;;766    		define the interrupt's pre-emption priority bits and bits that define
;;;767    		the interrupt's sub-priority.  For simplicity all bits must be defined
;;;768    		to be pre-emption priority bits.  The following assertion will fail if
;;;769    		this is not the case (if some bits represent a sub-priority).
;;;770    
;;;771    		If the application only uses CMSIS libraries for interrupt
;;;772    		configuration then the correct setting can be achieved on all Cortex-M
;;;773    		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
;;;774    		scheduler.  Note however that some vendor specific peripheral libraries
;;;775    		assume a non-zero priority group setting, in which cases using a value
;;;776    		of zero will result in unpredicable behaviour. */
;;;777    		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
00003c  480c              LDR      r0,|L8.112|
00003e  6800              LDR      r0,[r0,#0]
000040  f40060e0          AND      r0,r0,#0x700
000044  490b              LDR      r1,|L8.116|
000046  6809              LDR      r1,[r1,#0]  ; ulMaxPRIGROUPValue
000048  4288              CMP      r0,r1
00004a  d801              BHI      |L8.80|
00004c  2001              MOVS     r0,#1
00004e  e000              B        |L8.82|
                  |L8.80|
000050  2000              MOVS     r0,#0
                  |L8.82|
000052  b950              CBNZ     r0,|L8.106|
000054  bf00              NOP      
000056  2010              MOVS     r0,#0x10
000058  f3808811          MSR      BASEPRI,r0
00005c  f3bf8f4f          DSB      
000060  f3bf8f6f          ISB      
000064  bf00              NOP      
000066  bf00              NOP      
                  |L8.104|
000068  e7fe              B        |L8.104|
                  |L8.106|
;;;778    	}
00006a  bd70              POP      {r4-r6,pc}
;;;779    
                          ENDP

                  |L8.108|
                          DCD      ucMaxSysCallPriority
                  |L8.112|
                          DCD      0xe000ed0c
                  |L8.116|
                          DCD      ulMaxPRIGROUPValue

                          AREA ||i.xPortStartScheduler||, CODE, READONLY, ALIGN=2

                  xPortStartScheduler PROC
;;;331     */
;;;332    BaseType_t xPortStartScheduler( void )
000000  b51c              PUSH     {r2-r4,lr}
;;;333    {
;;;334    	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
;;;335    	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
;;;336    	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
;;;337    
;;;338    	/* This port can be used on all revisions of the Cortex-M7 core other than
;;;339    	the r0p1 parts.  r0p1 parts should use the port from the
;;;340    	/source/portable/GCC/ARM_CM7/r0p1 directory. */
;;;341    	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
000002  4847              LDR      r0,|L9.288|
000004  6800              LDR      r0,[r0,#0]
000006  4947              LDR      r1,|L9.292|
000008  4288              CMP      r0,r1
00000a  d001              BEQ      |L9.16|
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L9.18|
                  |L9.16|
000010  2000              MOVS     r0,#0
                  |L9.18|
000012  b950              CBNZ     r0,|L9.42|
000014  bf00              NOP      
000016  2010              MOVS     r0,#0x10
000018  f3808811          MSR      BASEPRI,r0
00001c  f3bf8f4f          DSB      
000020  f3bf8f6f          ISB      
000024  bf00              NOP      
000026  bf00              NOP      
                  |L9.40|
000028  e7fe              B        |L9.40|
                  |L9.42|
;;;342    	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
00002a  483d              LDR      r0,|L9.288|
00002c  6800              LDR      r0,[r0,#0]
00002e  493d              LDR      r1,|L9.292|
000030  1e49              SUBS     r1,r1,#1
000032  4288              CMP      r0,r1
000034  d001              BEQ      |L9.58|
000036  2001              MOVS     r0,#1
000038  e000              B        |L9.60|
                  |L9.58|
00003a  2000              MOVS     r0,#0
                  |L9.60|
00003c  b950              CBNZ     r0,|L9.84|
00003e  bf00              NOP      
000040  2010              MOVS     r0,#0x10
000042  f3808811          MSR      BASEPRI,r0
000046  f3bf8f4f          DSB      
00004a  f3bf8f6f          ISB      
00004e  bf00              NOP      
000050  bf00              NOP      
                  |L9.82|
000052  e7fe              B        |L9.82|
                  |L9.84|
;;;343    
;;;344    	#if( configASSERT_DEFINED == 1 )
;;;345    	{
;;;346    		volatile uint32_t ulOriginalPriority;
;;;347    		volatile uint8_t * const pucFirstUserPriorityRegister = ( uint8_t * ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
000054  4934              LDR      r1,|L9.296|
;;;348    		volatile uint8_t ucMaxPriorityValue;
;;;349    
;;;350    		/* Determine the maximum priority from which ISR safe FreeRTOS API
;;;351    		functions can be called.  ISR safe functions are those that end in
;;;352    		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
;;;353    		ensure interrupt entry is as fast and simple as possible.
;;;354    
;;;355    		Save the interrupt priority value that is about to be clobbered. */
;;;356    		ulOriginalPriority = *pucFirstUserPriorityRegister;
000056  4608              MOV      r0,r1
000058  7800              LDRB     r0,[r0,#0]
00005a  9001              STR      r0,[sp,#4]
;;;357    
;;;358    		/* Determine the number of priority bits available.  First write to all
;;;359    		possible bits. */
;;;360    		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
00005c  20ff              MOVS     r0,#0xff
00005e  460a              MOV      r2,r1
000060  7010              STRB     r0,[r2,#0]
;;;361    
;;;362    		/* Read the value back to see how many bits stuck. */
;;;363    		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
000062  4608              MOV      r0,r1
000064  7800              LDRB     r0,[r0,#0]
000066  9000              STR      r0,[sp,#0]
;;;364    
;;;365    		/* The kernel interrupt priority should be set to the lowest
;;;366    		priority. */
;;;367    		configASSERT( ucMaxPriorityValue == ( configKERNEL_INTERRUPT_PRIORITY & ucMaxPriorityValue ) );
000068  f89d0000          LDRB     r0,[sp,#0]
00006c  f00000f0          AND      r0,r0,#0xf0
000070  f89d2000          LDRB     r2,[sp,#0]
000074  4290              CMP      r0,r2
000076  d101              BNE      |L9.124|
000078  2001              MOVS     r0,#1
00007a  e000              B        |L9.126|
                  |L9.124|
00007c  2000              MOVS     r0,#0
                  |L9.126|
00007e  b950              CBNZ     r0,|L9.150|
000080  bf00              NOP      
000082  2010              MOVS     r0,#0x10
000084  f3808811          MSR      BASEPRI,r0
000088  f3bf8f4f          DSB      
00008c  f3bf8f6f          ISB      
000090  bf00              NOP      
000092  bf00              NOP      
                  |L9.148|
000094  e7fe              B        |L9.148|
                  |L9.150|
;;;368    
;;;369    		/* Use the same mask on the maximum system call priority. */
;;;370    		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
000096  f89d0000          LDRB     r0,[sp,#0]
00009a  f0000010          AND      r0,r0,#0x10
00009e  4a23              LDR      r2,|L9.300|
0000a0  7010              STRB     r0,[r2,#0]
;;;371    
;;;372    		/* Calculate the maximum acceptable priority group value for the number
;;;373    		of bits read back. */
;;;374    		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
0000a2  2007              MOVS     r0,#7
0000a4  4a22              LDR      r2,|L9.304|
0000a6  6010              STR      r0,[r2,#0]  ; ulMaxPRIGROUPValue
;;;375    		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
0000a8  e009              B        |L9.190|
                  |L9.170|
;;;376    		{
;;;377    			ulMaxPRIGROUPValue--;
0000aa  4821              LDR      r0,|L9.304|
0000ac  6800              LDR      r0,[r0,#0]  ; ulMaxPRIGROUPValue
0000ae  1e40              SUBS     r0,r0,#1
0000b0  4a1f              LDR      r2,|L9.304|
0000b2  6010              STR      r0,[r2,#0]  ; ulMaxPRIGROUPValue
;;;378    			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
0000b4  f89d0000          LDRB     r0,[sp,#0]
0000b8  0640              LSLS     r0,r0,#25
0000ba  0e00              LSRS     r0,r0,#24
0000bc  9000              STR      r0,[sp,#0]
                  |L9.190|
0000be  f89d0000          LDRB     r0,[sp,#0]            ;375
0000c2  f0000080          AND      r0,r0,#0x80           ;375
0000c6  2880              CMP      r0,#0x80              ;375
0000c8  d0ef              BEQ      |L9.170|
;;;379    		}
;;;380    
;;;381    		/* Shift the priority group value back to its position within the AIRCR
;;;382    		register. */
;;;383    		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
0000ca  4819              LDR      r0,|L9.304|
0000cc  6800              LDR      r0,[r0,#0]  ; ulMaxPRIGROUPValue
0000ce  0200              LSLS     r0,r0,#8
0000d0  4a17              LDR      r2,|L9.304|
0000d2  6010              STR      r0,[r2,#0]  ; ulMaxPRIGROUPValue
;;;384    		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
0000d4  4610              MOV      r0,r2
0000d6  8800              LDRH     r0,[r0,#0]  ; ulMaxPRIGROUPValue
0000d8  f40060e0          AND      r0,r0,#0x700
0000dc  6010              STR      r0,[r2,#0]  ; ulMaxPRIGROUPValue
;;;385    
;;;386    		/* Restore the clobbered interrupt priority register to its original
;;;387    		value. */
;;;388    		*pucFirstUserPriorityRegister = ulOriginalPriority;
0000de  4a12              LDR      r2,|L9.296|
0000e0  9801              LDR      r0,[sp,#4]
0000e2  7010              STRB     r0,[r2,#0]
;;;389    	}
;;;390    	#endif /* conifgASSERT_DEFINED */
;;;391    
;;;392    	/* Make PendSV and SysTick the lowest priority interrupts. */
;;;393    	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
0000e4  480e              LDR      r0,|L9.288|
0000e6  3020              ADDS     r0,r0,#0x20
0000e8  6800              LDR      r0,[r0,#0]
0000ea  f4400070          ORR      r0,r0,#0xf00000
0000ee  490c              LDR      r1,|L9.288|
0000f0  3120              ADDS     r1,r1,#0x20
0000f2  6008              STR      r0,[r1,#0]
;;;394    	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
0000f4  4608              MOV      r0,r1
0000f6  6800              LDR      r0,[r0,#0]
0000f8  f0404070          ORR      r0,r0,#0xf0000000
0000fc  6008              STR      r0,[r1,#0]
;;;395    
;;;396    	/* Start the timer that generates the tick ISR.  Interrupts are disabled
;;;397    	here already. */
;;;398    	vPortSetupTimerInterrupt();
0000fe  f7fffffe          BL       vPortSetupTimerInterrupt
;;;399    
;;;400    	/* Initialise the critical nesting count ready for the first task. */
;;;401    	uxCriticalNesting = 0;
000102  2000              MOVS     r0,#0
000104  490b              LDR      r1,|L9.308|
000106  6008              STR      r0,[r1,#0]  ; uxCriticalNesting
;;;402    
;;;403    	/* Ensure the VFP is enabled - it should be anyway. */
;;;404    	prvEnableVFP();
000108  f7fffffe          BL       __asm___6_port_c_39a90d8d__prvEnableVFP
;;;405    
;;;406    	/* Lazy save always. */
;;;407    	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
00010c  480a              LDR      r0,|L9.312|
00010e  6800              LDR      r0,[r0,#0]
000110  f0404040          ORR      r0,r0,#0xc0000000
000114  4908              LDR      r1,|L9.312|
000116  6008              STR      r0,[r1,#0]
;;;408    
;;;409    	/* Start the first task. */
;;;410    	prvStartFirstTask();
000118  f7fffffe          BL       __asm___6_port_c_39a90d8d__prvStartFirstTask
;;;411    
;;;412    	/* Should not get here! */
;;;413    	return 0;
00011c  2000              MOVS     r0,#0
;;;414    }
00011e  bd1c              POP      {r2-r4,pc}
;;;415    /*-----------------------------------------------------------*/
                          ENDP

                  |L9.288|
                          DCD      0xe000ed00
                  |L9.292|
                          DCD      0x410fc271
                  |L9.296|
                          DCD      0xe000e400
                  |L9.300|
                          DCD      ucMaxSysCallPriority
                  |L9.304|
                          DCD      ulMaxPRIGROUPValue
                  |L9.308|
                          DCD      uxCriticalNesting
                  |L9.312|
                          DCD      0xe000ef34

                          AREA ||.data||, DATA, ALIGN=2

                  uxCriticalNesting
                          DCD      0xaaaaaaaa
                  ucMaxSysCallPriority
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  ulMaxPRIGROUPValue
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\FreeRTOS\\portable\\RVDS\\ARM_CM4F\\port.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |SVC_Handler|
#line 273
|SVC_Handler| PROC
#line 274

 PRESERVE8

 
 ldr r3, =pxCurrentTCB
 ldr r1, [r3]
 ldr r0, [r1]
 
 ldmia r0!, {r4-r11, r14}
 msr psp, r0
 isb
 mov r0, #0
 msr basepri, r0
 bx r14
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_port_c_39a90d8d__prvStartFirstTask|
#line 291
|__asm___6_port_c_39a90d8d__prvStartFirstTask| PROC
#line 292

 PRESERVE8

 
 ldr r0, =0xE000ED08
 ldr r0, [r0]
 ldr r0, [r0]
 
 msr msp, r0
 
 cpsie i
 cpsie f
 dsb
 isb
 
 svc 0
 nop
 nop
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_port_c_39a90d8d__prvEnableVFP|
#line 313
|__asm___6_port_c_39a90d8d__prvEnableVFP| PROC
#line 314

 PRESERVE8

 
 ldr.w r0, =0xE000ED88
 ldr r1, [r0]

 
 orr r1, r1, #( 0xf << 20 )
 str r1, [r0]
 bx r14
 nop
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |PendSV_Handler|
#line 453
|PendSV_Handler| PROC
#line 454

 extern uxCriticalNesting
 extern pxCurrentTCB
 extern vTaskSwitchContext

 PRESERVE8

 mrs r0, psp
 isb
 
 ldr r3, =pxCurrentTCB
 ldr r2, [r3]

 
 tst r14, #0x10
 it eq
 vstmdbeq r0!, {s16-s31}

 
 stmdb r0!, {r4-r11, r14}

 
 str r0, [r2]

 stmdb sp!, {r3}
 mov r0, #( 0x01 << (8 - 4) )
 msr basepri, r0
 dsb
 isb
 bl vTaskSwitchContext
 mov r0, #0
 msr basepri, r0
 ldmia sp!, {r3}

 
 ldr r1, [r3]
 ldr r0, [r1]

 
 ldmia r0!, {r4-r11, r14}

#line 496
 
 tst r14, #0x10
 it eq
 vldmiaeq r0!, {s16-s31}

 msr psp, r0
 isb
 
#line 510

 bx r14
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |vPortGetIPSR|
#line 713
|vPortGetIPSR| PROC
#line 714

 PRESERVE8

 mrs r0, ipsr
 bx r14
	ENDP

;*** End   embedded assembler ***
