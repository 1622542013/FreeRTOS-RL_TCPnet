; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\net_config.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\net_config.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp\inc -I..\..\User\bsp -I..\..\User -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM4F -I..\..\RL-ARM\Config -I..\..\RL-ARM\Driver -I..\..\RL-ARM\RL-RTX\inc -IC:\Keil4.74\ARM\RV31\INC -IC:\Keil4.74\ARM\CMSIS\Include -IC:\Keil4.74\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -D__RTX --omf_browse=.\flash\obj\net_config.crf ..\..\RL-ARM\Config\Net_Config.c]
                          THUMB

                          AREA ||i.bsd_lock||, CODE, READONLY, ALIGN=2

                  bsd_lock PROC
                  ||__tagsym$$used||
;;;572    #if (BSD_ENABLE && __RTX)
;;;573    __used void bsd_lock (void) {
000000  4803              LDR      r0,|L1.16|
;;;574      /* Acquire mutex - Lock TCPnet functions. */
;;;575      xSemaphoreTake(bsd_mutex, portMAX_DELAY);	
000002  2300              MOVS     r3,#0
000004  1e5a              SUBS     r2,r3,#1
000006  4619              MOV      r1,r3
000008  6980              LDR      r0,[r0,#0x18]  ; bsd_mutex
00000a  f7ffbffe          B.W      xQueueGenericReceive
;;;576    }
;;;577    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      ||.data||

                          AREA ||i.bsd_resume||, CODE, READONLY, ALIGN=2

                  bsd_resume PROC
                  |symbol_number.110|
;;;562    
;;;563    __used void bsd_resume (U8 tsk_id) {
000000  4803              LDR      r0,|L2.16|
;;;564      /* Resume a task waiting for a socket event. */
;;;565      xSemaphoreGive(bsd_sem);
000002  2300              MOVS     r3,#0
000004  461a              MOV      r2,r3
000006  4619              MOV      r1,r3
000008  69c0              LDR      r0,[r0,#0x1c]  ; bsd_sem
00000a  f7ffbffe          B.W      xQueueGenericSend
;;;566    }
;;;567    #endif
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      ||.data||

                          AREA ||i.bsd_suspend||, CODE, READONLY, ALIGN=2

                  bsd_suspend PROC
                  |symbol_number.111|
;;;555    #if (BSD_ENABLE && __RTX)
;;;556    __used void bsd_suspend (U8 *tsk_id) {
000000  b570              PUSH     {r4-r6,lr}
;;;557      /* Suspend a socket owner task. */
;;;558      xSemaphoreGive(bsd_mutex);
000002  4c0b              LDR      r4,|L3.48|
000004  2300              MOVS     r3,#0
000006  461a              MOV      r2,r3
000008  4619              MOV      r1,r3
00000a  69a0              LDR      r0,[r4,#0x18]  ; bsd_mutex
00000c  f7fffffe          BL       xQueueGenericSend
;;;559      xSemaphoreTake(bsd_sem, portMAX_DELAY);
000010  2300              MOVS     r3,#0
000012  1e5d              SUBS     r5,r3,#1
000014  462a              MOV      r2,r5
000016  4619              MOV      r1,r3
000018  69e0              LDR      r0,[r4,#0x1c]  ; bsd_sem
00001a  f7fffffe          BL       xQueueGenericReceive
;;;560      xSemaphoreTake(bsd_mutex, portMAX_DELAY);	
00001e  462a              MOV      r2,r5
000020  69a0              LDR      r0,[r4,#0x18]  ; bsd_mutex
000022  e8bd4070          POP      {r4-r6,lr}
000026  2300              MOVS     r3,#0
000028  4619              MOV      r1,r3
00002a  f7ffbffe          B.W      xQueueGenericReceive
;;;561    }
;;;562    
                          ENDP

00002e  0000              DCW      0x0000
                  |L3.48|
                          DCD      ||.data||

                          AREA ||i.bsd_unlock||, CODE, READONLY, ALIGN=2

                  bsd_unlock PROC
                  |symbol_number.112|
;;;577    
;;;578    __used void bsd_unlock (void) {
000000  4803              LDR      r0,|L4.16|
;;;579      /* Release mutex - Unlock TCPnet functions. */
;;;580      xSemaphoreGive(bsd_mutex);
000002  2300              MOVS     r3,#0
000004  461a              MOV      r2,r3
000006  4619              MOV      r1,r3
000008  6980              LDR      r0,[r0,#0x18]  ; bsd_mutex
00000a  f7ffbffe          B.W      xQueueGenericSend
;;;581    }
;;;582    #endif
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      ||.data||

                          AREA ||i.igmp_is_member||, CODE, READONLY, ALIGN=1

                  igmp_is_member PROC
;;;595    /* Empty functions when IP Multicasting is not enabled. */
;;;596    BOOL igmp_is_member (U8 *ipadr)      { return (__FALSE); }
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;597    void igmp_process (OS_FRAME *frame)  { ; }
                          ENDP


                          AREA ||i.igmp_process||, CODE, READONLY, ALIGN=1

                  igmp_process PROC
;;;596    BOOL igmp_is_member (U8 *ipadr)      { return (__FALSE); }
;;;597    void igmp_process (OS_FRAME *frame)  { ; }
000000  4770              BX       lr
;;;598    #endif
                          ENDP


                          AREA ||i.init_system||, CODE, READONLY, ALIGN=2

                  init_system PROC
;;;397    
;;;398    void init_system (void) {
000000  b510              PUSH     {r4,lr}
;;;399      /* Initialize configured interfaces and applications. */
;;;400    	
;;;401    #if (ETH_ENABLE)
;;;402      eth_init_link ();
000002  f7fffffe          BL       eth_init_link
;;;403    #endif
;;;404    #if (PPP_ENABLE)
;;;405      ppp_init_link ();
;;;406    #endif
;;;407    #if (SLIP_ENABLE)
;;;408      slip_init_link ();
;;;409    #endif
;;;410      ip_init ();
000006  f7fffffe          BL       ip_init
;;;411      icmp_init ();
00000a  f7fffffe          BL       icmp_init
;;;412    #if (ETH_ENABLE && IGMP_ENABLE)
;;;413      igmp_init ();
;;;414    #endif
;;;415    #if (UDP_ENABLE)
;;;416      udp_init ();
00000e  f7fffffe          BL       udp_init
;;;417    #endif
;;;418    #if (TCP_ENABLE)
;;;419      tcp_init ();
000012  f7fffffe          BL       tcp_init
;;;420    #endif
;;;421    #if (BSD_ENABLE)
;;;422      bsd_init ();
000016  f7fffffe          BL       bsd_init
;;;423     #if (BSD_GETHOSTEN)
;;;424      bsd_init_host ();
;;;425     #endif
;;;426    #endif
;;;427    #if (HTTP_ENABLE)
;;;428      http_init ();
;;;429    #endif
;;;430    #if (TNET_ENABLE)
;;;431      tnet_init ();
;;;432    #endif
;;;433    #if (TFTP_ENABLE)
;;;434      tftp_init ();
;;;435    #endif
;;;436    #if (TFTPC_ENABLE)
;;;437      tftpc_init ();
;;;438    #endif
;;;439    #if (FTP_ENABLE)
;;;440      ftp_init ();
;;;441    #endif
;;;442    #if (FTPC_ENABLE)
;;;443      ftpc_init ();
;;;444    #endif
;;;445    #if (ETH_ENABLE && NBNS_ENABLE)
;;;446      nbns_init ();
00001a  f7fffffe          BL       nbns_init
;;;447    #endif
;;;448    #if (ETH_ENABLE && DHCP_ENABLE)
;;;449      dhcp_init ();
00001e  f7fffffe          BL       dhcp_init
;;;450    #elif (ETH_ENABLE)
;;;451      arp_notify ();
;;;452    #endif
;;;453    #if (DNS_ENABLE)
;;;454      dns_init ();
;;;455    #endif
;;;456    #if (SMTP_ENABLE)
;;;457      smtp_init ();
;;;458    #endif
;;;459    #if (SNMP_ENABLE)
;;;460      snmp_init ();
;;;461    #endif
;;;462    #if (SNTP_ENABLE)
;;;463      sntp_init ();
;;;464    #endif
;;;465    
;;;466    #if (BSD_ENABLE && __RTX)
;;;467     {
;;;468    	bsd_mutex = xSemaphoreCreateMutex();
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       xQueueCreateMutex
000028  4c04              LDR      r4,|L7.60|
;;;469    	if(bsd_mutex == NULL)
;;;470        {
;;;471            /* ERR */
;;;472        }	 
;;;473    	
;;;474    	bsd_sem = xSemaphoreCreateBinary();
00002a  2203              MOVS     r2,#3
00002c  2100              MOVS     r1,#0
00002e  61a0              STR      r0,[r4,#0x18]  ; bsd_mutex
000030  2001              MOVS     r0,#1
000032  f7fffffe          BL       xQueueGenericCreate
000036  61e0              STR      r0,[r4,#0x1c]  ; bsd_sem
;;;475    	if(bsd_sem == NULL)
;;;476        {
;;;477            /* ERR */
;;;478        }
;;;479     }
;;;480    #endif
;;;481    }
000038  bd10              POP      {r4,pc}
;;;482    
                          ENDP

00003a  0000              DCW      0x0000
                  |L7.60|
                          DCD      ||.data||

                          AREA ||i.ppp_send_frame||, CODE, READONLY, ALIGN=1

                  ppp_send_frame PROC
;;;606    /* Empty function when PPP Interface is disabled. */
;;;607    BOOL ppp_send_frame (OS_FRAME *frame, U16 prot) { return (__FALSE); }
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;608    #endif
                          ENDP


                          AREA ||i.run_system||, CODE, READONLY, ALIGN=2

                  run_system PROC
;;;485    
;;;486    void run_system (void) {
000000  b510              PUSH     {r4,lr}
;;;487      /* Run configured interfaces and applications. */
;;;488    
;;;489    #if (BSD_ENABLE && __RTX)
;;;490    	xSemaphoreTake(bsd_mutex, portMAX_DELAY);
000002  4c0d              LDR      r4,|L9.56|
000004  2300              MOVS     r3,#0
000006  1e5a              SUBS     r2,r3,#1
000008  4619              MOV      r1,r3
00000a  69a0              LDR      r0,[r4,#0x18]  ; bsd_mutex
00000c  f7fffffe          BL       xQueueGenericReceive
;;;491    #endif
;;;492    
;;;493    #if (ETH_ENABLE)
;;;494      eth_run_link ();
000010  f7fffffe          BL       eth_run_link
;;;495    #endif
;;;496    #if (PPP_ENABLE)
;;;497      ppp_run_link ();
;;;498    #endif
;;;499    #if (SLIP_ENABLE)
;;;500      slip_run_link ();
;;;501    #endif
;;;502      ip_run_local ();
000014  f7fffffe          BL       ip_run_local
;;;503      icmp_run_engine ();
000018  f7fffffe          BL       icmp_run_engine
;;;504    #if (ETH_ENABLE && IGMP_ENABLE)
;;;505      igmp_run_host ();
;;;506    #endif
;;;507    #if (TCP_ENABLE)
;;;508      tcp_poll_sockets ();
00001c  f7fffffe          BL       tcp_poll_sockets
;;;509    #endif
;;;510    #if (BSD_ENABLE)
;;;511      bsd_poll_sockets ();
000020  f7fffffe          BL       bsd_poll_sockets
;;;512    #endif
;;;513    #if (HTTP_ENABLE)
;;;514      http_run_server ();
;;;515    #endif
;;;516    #if (TNET_ENABLE)
;;;517      tnet_run_server ();
;;;518    #endif
;;;519    #if (TFTP_ENABLE)
;;;520      tftp_run_server ();
;;;521    #endif
;;;522    #if (TFTPC_ENABLE)
;;;523      tftpc_run_client ();
;;;524    #endif
;;;525    #if (FTP_ENABLE)
;;;526      ftp_run_server ();
;;;527    #endif
;;;528    #if (FTPC_ENABLE)
;;;529      ftpc_run_client ();
;;;530    #endif
;;;531    #if (ETH_ENABLE && DHCP_ENABLE)
;;;532      dhcp_run_client ();
000024  f7fffffe          BL       dhcp_run_client
;;;533    #endif
;;;534    #if (DNS_ENABLE)
;;;535      dns_run_client ();
;;;536    #endif
;;;537    #if (SMTP_ENABLE)
;;;538      smtp_run_client ();
;;;539    #endif
;;;540    #if (SNMP_ENABLE)
;;;541      snmp_run_agent ();
;;;542    #endif
;;;543    #if (SNTP_ENABLE)
;;;544      sntp_run_client ();
;;;545    #endif
;;;546    
;;;547    #if (BSD_ENABLE && __RTX)
;;;548      xSemaphoreGive(bsd_mutex);
000028  2300              MOVS     r3,#0
00002a  69a0              LDR      r0,[r4,#0x18]  ; bsd_mutex
00002c  e8bd4010          POP      {r4,lr}
000030  461a              MOV      r2,r3
000032  4619              MOV      r1,r3
000034  f7ffbffe          B.W      xQueueGenericSend
;;;549    #endif
;;;550    }
;;;551    
                          ENDP

                  |L9.56|
                          DCD      ||.data||

                          AREA ||i.slip_send_frame||, CODE, READONLY, ALIGN=1

                  slip_send_frame PROC
;;;625    /* Empty function when SLIP Interface is disabled. */
;;;626    BOOL slip_send_frame (OS_FRAME *frame) { return (__FALSE); }
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;627    #endif
                          ENDP


                          AREA ||i.sntp_get_time||, CODE, READONLY, ALIGN=1

                  sntp_get_time PROC
;;;640    /* Empty function when SNTP not enabled. */
;;;641    BOOL sntp_get_time (U8 *ipadr, void (*cbfunc)(U32)) { return(__FALSE); }
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;642    #endif
                          ENDP


                          AREA ||i.sys_error||, CODE, READONLY, ALIGN=1

                  sys_error PROC
;;;881    
;;;882    void sys_error (ERROR_CODE code) {
000000  2807              CMP      r0,#7
;;;883      /* This function is called when a fatal error is encountered. The normal */
;;;884      /* program execution is not possible anymore. Add your crytical error   .*/
;;;885      /* handler code here.                                                    */
;;;886    
;;;887      switch (code) {
000002  d20c              BCS      |L12.30|
000004  e8dff000          TBB      [pc,r0]
000008  04050607          DCB      0x04,0x05,0x06,0x07
00000c  08090a00          DCB      0x08,0x09,0x0a,0x00
;;;888        case ERR_MEM_ALLOC:
;;;889          /* Out of memory. */
;;;890          break;
000010  e005              B        |L12.30|
;;;891    
;;;892        case ERR_MEM_FREE:
;;;893          /* Trying to release non existing memory block. */
;;;894          break;
000012  e004              B        |L12.30|
;;;895    
;;;896        case ERR_MEM_CORRUPT:
;;;897          /* Memory Link pointer is Corrupted. */
;;;898          /* More data written than the size of allocated mem block. */
;;;899          break;
000014  e003              B        |L12.30|
;;;900    
;;;901        case ERR_MEM_LOCK:
;;;902          /* Locked Memory management function (alloc/free) re-entered. */
;;;903          /* RTX multithread protection malfunctioning, not implemented */
;;;904          /* or interrupt disable is not functioning correctly. */
;;;905          break;
000016  e002              B        |L12.30|
;;;906    
;;;907        case ERR_UDP_ALLOC:
;;;908          /* Out of UDP Sockets. */
;;;909          break;
000018  e001              B        |L12.30|
;;;910    
;;;911        case ERR_TCP_ALLOC:
;;;912          /* Out of TCP Sockets. */
;;;913          break;
00001a  e000              B        |L12.30|
;;;914    
;;;915        case ERR_TCP_STATE:
;;;916          /* TCP State machine in undefined state. */
;;;917          break;
00001c  bf00              NOP      
                  |L12.30|
00001e  bf00              NOP                            ;890
;;;918      }
;;;919    
;;;920      /* End-less loop */
;;;921      while (1);
000020  bf00              NOP      
                  |L12.34|
000022  e7fe              B        |L12.34|
;;;922    }
;;;923    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  mem_pool
                          %        8192
                  arp_table
                          %        140
                  udp_scb
                          %        60
                  tcp_scb
                          %        340
                  bsd_scb
                          %        84

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  nlocalm
000000  c0a80164          DCB      0xc0,0xa8,0x01,0x64
000004  c0a80101          DCB      0xc0,0xa8,0x01,0x01
000008  ffffff00          DCB      0xff,0xff,0xff,0x00
00000c  c2190281          DCB      0xc2,0x19,0x02,0x81
000010  c2190282          DCB      0xc2,0x19,0x02,0x82
000014  00000000          DCB      0x00,0x00,0x00,0x00
000018  00000000          DCB      0x00,0x00,0x00,0x00
00001c  00000000          DCB      0x00,0x00,0x00,0x00
000020  00000000          DCB      0x00,0x00,0x00,0x00
000024  00000000          DCB      0x00,0x00,0x00,0x00
000028  00000000          DCB      0x00,0x00,0x00,0x00
00002c  00000000          DCB      0x00,0x00,0x00,0x00
000030  00000000          DCB      0x00,0x00,0x00,0x00
000034  00000000          DCB      0x00,0x00,0x00,0x00
000038  00000000          DCB      0x00,0x00,0x00,0x00
                  sys_config
                          DCD      mem_pool
                          DCD      0x00002000
000044  0a640239          DCB      0x0a,0x64,0x02,0x39
                          DCD      lhost_name
                  arp_config
                          DCD      arp_table
000050  0a960402          DCB      0x0a,0x96,0x04,0x02
000054  00000000          DCB      0x00,0x00,0x00,0x00
                  dhcp_config
                          DCD      ||.conststring||
00005c  02000000          DCB      0x02,0x00,0x00,0x00
                  udp_config
                          DCD      udp_scb
000064  05000000          DCB      0x05,0x00,0x00,0x00
                  tcp_config
                          DCD      tcp_scb
00006c  0505              DCB      0x05,0x05
00006e  0028              DCW      0x0028
000070  00020014          DCW      0x0002,0x0014
000074  000a0078          DCW      0x000a,0x0078
000078  05b4111c          DCW      0x05b4,0x111c
00007c  07000000          DCB      0x07,0x00,0x00,0x00
                  bsd_config
                          DCD      bsd_scb
000084  0301              DCB      0x03,0x01
000086  00c8              DCW      0x00c8

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  lhost_name
000000  61726d66          DCB      0x61,0x72,0x6d,0x66
000004  6c790000          DCB      0x6c,0x79,0x00,0x00
                          %        8
                  own_hw_adr
000010  1e306ca2          DCB      0x1e,0x30,0x6c,0xa2
000014  455e0000          DCB      0x45,0x5e,0x00,0x00
                  bsd_mutex
                          DCD      0x00000000
                  bsd_sem
                          DCD      0x00000000
